[{"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\index.js":"1","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\App.js":"2","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\doctorApp.js":"3","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\recepcionApp.js":"4","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\superAdminApp.js":"5","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\adminHospitalApp.js":"6","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\patientApp.js":"7","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\public_escalas_routes.jsx":"8","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\register.jsx":"9","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\login.jsx":"10","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\resources.jsx":"11","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\perfil.jsx":"12","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\historial.jsx":"13","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\sucursal.jsx":"14","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\recetas.jsx":"15","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\perfil.jsx":"16","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\misCitas.jsx":"17","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\perfil.jsx":"18","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\citas.jsx":"19","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\expedientes.jsx":"20","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\main.pacientes.jsx":"21","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\escalasMenu.jsx":"22","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\home\\home.jsx":"23","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\balances.jsx":"24","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\main.patients.jsx":"25","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\main.citas.jsx":"26","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\main.cortes.jsx":"27","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\home\\home.jsx":"28","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\ingresos.jsx":"29","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\main.pacientes.jsx":"30","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\main.patients.jsx":"31","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\main.admins.jsx":"32","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\main.hospitals.jsx":"33","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\main.doctors.jsx":"34","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\horarios\\horarios.jsx":"35","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\main.receptionists.jsx":"36","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\main.citas.jsx":"37","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\perfil\\perfil.administrador.jsx":"38","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\main.users.jsx":"39","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\main.doctors.jsx":"40","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ingresos.jsx":"41","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\main.receptionists.jsx":"42","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\main.cortes.jsx":"43","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\main.enfermeros.jsx":"44","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\home\\home.jsx":"45","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorEncuesta.jsx":"46","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaEncuesta.jsx":"47","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionEncuesta.jsx":"48","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_encuesta.jsx":"49","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresionEncuesta.jsx":"50","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_encuesta.jsx":"51","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_encuesta.jsx":"52","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_encuesta.jsx":"53","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\loading.jsx":"54","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\perfilEdit.jsx":"55","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\perfilEdit.jsx":"56","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\configuration.jsx":"57","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\perfilEdit.jsx":"58","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\cita.create.jsx":"59","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\auth.button.jsx":"60","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleNota.jsx":"61","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleHistoria.jsx":"62","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\expedienteForPrint.jsx":"63","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\detalles.paciente.jsx":"64","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresionMenu.jsx":"65","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\register.patient.jsx":"66","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\postTraumaticoMenu.jsx":"67","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaResults.jsx":"68","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorResults.jsx":"69","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionResults.jsx":"70","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\dash.enfermeros.main.jsx":"71","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\create.corte.jsx":"72","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\register.enfermero.jsx":"73","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\details.corte.jsx":"74","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\dash.receptionists.main.jsx":"75","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\horarios.receptionists.jsx":"76","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\register.receptionist.jsx":"77","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ingresos.hospital.jsx":"78","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\create-ingreso.jsx":"79","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ticket-for-print.jsx":"80","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\dash.doctors.main.jsx":"81","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\register.doctor.jsx":"82","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\dash.patients.main.jsx":"83","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\hospital-tab.citas.jsx":"84","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\perfil\\perfil.edit.jsx":"85","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\register.user.jsx":"86","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\side.receptionists.jsx":"87","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\side.doctors.jsx":"88","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\side.hospitals.jsx":"89","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\side.admins.jsx":"90","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\dash.patients.jsx":"91","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\register.user.jsx":"92","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\register.patient.jsx":"93","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\ticket-for-print.jsx":"94","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\details.corte.jsx":"95","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\create-ingreso.jsx":"96","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\dash.patients.main.jsx":"97","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\create.corte.jsx":"98","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\hospital-tab.citas.jsx":"99","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\side.patients.jsx":"100","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\create-balance.jsx":"101","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\ticket-for-print.jsx":"102","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolor_catalog.jsx":"103","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketamina_catalog.jsx":"104","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccion_catalog.jsx":"105","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_catalog.jsx":"106","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresion_catalog.jsx":"107","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_catalog.jsx":"108","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_catalog.jsx":"109","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_catalog.jsx":"110","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\service.add.jsx":"111","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\hojasEnfermeria.jsx":"112","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\notasEvolucion.jsx":"113","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_results.jsx":"114","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\lastCita.jsx":"115","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorDetails.jsx":"116","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_results.jsx":"117","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\register.patent.fisio.jsx":"118","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaDetails.jsx":"119","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionDetails.jsx":"120","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\getEscalas.jsx":"121","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\dash.enfermeros.hospitalTab.jsx":"122","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\escalasCreateGeneralLink.jsx":"123","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\corteForPrint.jsx":"124","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\dash.receptionists.hospitalTab.jsx":"125","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\create-ingreso-hosptal.jsx":"126","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\dash.doctors.hospitalTab.jsx":"127","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\dash.receptionists.jsx":"128","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\dash.patients.hospital-tab.jsx":"129","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\dash.admins.jsx":"130","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\dash.doctors.jsx":"131","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\register.admin.jsx":"132","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\dash.hospitals.jsx":"133","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\register.hospital.jsx":"134","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\register.doctor.jsx":"135","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\dash.patients.hospital-tab.jsx":"136","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\detalles.paciente.jsx":"137","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\create-cita-for-medic.jsx":"138","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\move.patients.jsx":"139","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\dash.patients.jsx":"140","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\register.patient.jsx":"141","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\hojaEnfermeriaPrint.jsx":"142","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_details.jsx":"143","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\register.receptionist.jsx":"144","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\loadingIndicator.jsx":"145","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleReceta.jsx":"146","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\nuevaNota.jsx":"147","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_results.jsx":"148","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_results.jsx":"149","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresionResults.jsx":"150","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\assets\\diagnosticos2.js":"151","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_details.jsx":"152","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleRecetaForPrint.jsx":"153","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\create-cita-for-medic.jsx":"154","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\expediente.jsx":"155","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\historia.jsx":"156","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\nota.jsx":"157","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\detalles.fisio.modal.jsx":"158","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\padecimiento.jsx":"159","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\nuevaNota.jsx":"160","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\detalleReceta.jsx":"161","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\bitacora.jsx":"162","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\goniometria.jsx":"163","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\examenManMusc.jsx":"164","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\exoneracion.jsx":"165","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\expedienteDocument.jsx":"166","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccion_stats.jsx":"167","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\printNota.jsx":"168","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\code.generate.jsx":"169","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\register_patient_fisio.jsx":"170","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.encuesta.jsx":"171","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.catalog.jsx":"172","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\utils.jsx":"173","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.results.jsx":"174","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.details.jsx":"175","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.encuesta.jsx":"176","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.catalog.jsx":"177","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.results.jsx":"178","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.details.jsx":"179","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.encuesta.jsx":"180","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.results.jsx":"181","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.catalog.jsx":"182","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.details.jsx":"183","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.encuesta.jsx":"184","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.catalog.jsx":"185","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.results.jsx":"186","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.details.jsx":"187","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.encuesta.jsx":"188","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.catalog.jsx":"189","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.results.jsx":"190","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.details.jsx":"191","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.encuesta.jsx":"192","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.catalog.jsx":"193","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.results.jsx":"194","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.details.jsx":"195","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.encuesta.jsx":"196","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.catalog.jsx":"197","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.results.jsx":"198","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.details.jsx":"199","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\historialCitas.jsx":"200","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\patients-chart.jsx":"201","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\patients.results.jsx":"202","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.results.jsx":"203","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.encuesta.jsx":"204","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.catalog.jsx":"205","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.details.jsx":"206","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.encuesta.jsx":"207","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.catalog.jsx":"208","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.results.jsx":"209","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.details.jsx":"210","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\reports.doctors.jsx":"211","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\register.patient.jsx":"212","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\details-cita.jsx":"213","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\details-cita.jsx":"214","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\register.patient.jsx":"215","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_results.jsx":"216","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_encuesta.jsx":"217","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_catalog.jsx":"218","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_selector.jsx":"219","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_details.jsx":"220","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\generate.escalas.all.jsx":"221","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\csv.escalas.jsx":"222"},{"size":221,"mtime":1675822185458,"results":"223","hashOfConfig":"224"},{"size":4559,"mtime":1717479852514,"results":"225","hashOfConfig":"224"},{"size":3390,"mtime":1690903482238,"results":"226","hashOfConfig":"224"},{"size":4787,"mtime":1717184199410,"results":"227","hashOfConfig":"224"},{"size":2382,"mtime":1681274630913,"results":"228","hashOfConfig":"224"},{"size":3245,"mtime":1700537868682,"results":"229","hashOfConfig":"224"},{"size":2007,"mtime":1675891395960,"results":"230","hashOfConfig":"224"},{"size":6668,"mtime":1717479811992,"results":"231","hashOfConfig":"224"},{"size":10831,"mtime":1709694998577,"results":"232","hashOfConfig":"224"},{"size":3482,"mtime":1682650849331,"results":"233","hashOfConfig":"224"},{"size":5399,"mtime":1710472843443,"results":"234","hashOfConfig":"224"},{"size":4283,"mtime":1679539949639,"results":"235","hashOfConfig":"224"},{"size":1305,"mtime":1675822185521,"results":"236","hashOfConfig":"224"},{"size":125,"mtime":1675822185318,"results":"237","hashOfConfig":"224"},{"size":2431,"mtime":1675822185489,"results":"238","hashOfConfig":"224"},{"size":4532,"mtime":1675822185489,"results":"239","hashOfConfig":"224"},{"size":7781,"mtime":1675822185474,"results":"240","hashOfConfig":"224"},{"size":5895,"mtime":1688506408806,"results":"241","hashOfConfig":"224"},{"size":7807,"mtime":1717188492722,"results":"242","hashOfConfig":"224"},{"size":5378,"mtime":1719541863142,"results":"243","hashOfConfig":"224"},{"size":5055,"mtime":1710297341339,"results":"244","hashOfConfig":"224"},{"size":2832,"mtime":1717478707678,"results":"245","hashOfConfig":"224"},{"size":4655,"mtime":1675891657338,"results":"246","hashOfConfig":"224"},{"size":6395,"mtime":1707348120800,"results":"247","hashOfConfig":"224"},{"size":369,"mtime":1675822185536,"results":"248","hashOfConfig":"224"},{"size":567,"mtime":1678999906931,"results":"249","hashOfConfig":"224"},{"size":4070,"mtime":1697557829510,"results":"250","hashOfConfig":"224"},{"size":4655,"mtime":1675891716693,"results":"251","hashOfConfig":"224"},{"size":11358,"mtime":1712693976020,"results":"252","hashOfConfig":"224"},{"size":453,"mtime":1675822185318,"results":"253","hashOfConfig":"224"},{"size":510,"mtime":1679000743829,"results":"254","hashOfConfig":"224"},{"size":363,"mtime":1675822185599,"results":"255","hashOfConfig":"224"},{"size":261,"mtime":1675822185614,"results":"256","hashOfConfig":"224"},{"size":366,"mtime":1675822185599,"results":"257","hashOfConfig":"224"},{"size":1037,"mtime":1682452266707,"results":"258","hashOfConfig":"224"},{"size":256,"mtime":1675822185630,"results":"259","hashOfConfig":"224"},{"size":567,"mtime":1678999678623,"results":"260","hashOfConfig":"224"},{"size":3655,"mtime":1678763342280,"results":"261","hashOfConfig":"224"},{"size":453,"mtime":1675822185318,"results":"262","hashOfConfig":"224"},{"size":639,"mtime":1675822185302,"results":"263","hashOfConfig":"224"},{"size":12299,"mtime":1719592259607,"results":"264","hashOfConfig":"224"},{"size":789,"mtime":1682702460835,"results":"265","hashOfConfig":"224"},{"size":6063,"mtime":1701148579249,"results":"266","hashOfConfig":"224"},{"size":782,"mtime":1691608636862,"results":"267","hashOfConfig":"224"},{"size":4316,"mtime":1675891689275,"results":"268","hashOfConfig":"224"},{"size":7516,"mtime":1719275347929,"results":"269","hashOfConfig":"224"},{"size":6716,"mtime":1719275347909,"results":"270","hashOfConfig":"224"},{"size":5580,"mtime":1719275347921,"results":"271","hashOfConfig":"224"},{"size":8075,"mtime":1719275347932,"results":"272","hashOfConfig":"224"},{"size":8162,"mtime":1719275347943,"results":"273","hashOfConfig":"224"},{"size":7305,"mtime":1719275347903,"results":"274","hashOfConfig":"224"},{"size":4639,"mtime":1719275347895,"results":"275","hashOfConfig":"224"},{"size":7463,"mtime":1719275347892,"results":"276","hashOfConfig":"224"},{"size":412,"mtime":1675822185474,"results":"277","hashOfConfig":"224"},{"size":11085,"mtime":1709694998579,"results":"278","hashOfConfig":"224"},{"size":11085,"mtime":1709694998587,"results":"279","hashOfConfig":"224"},{"size":6539,"mtime":1697218577123,"results":"280","hashOfConfig":"224"},{"size":12494,"mtime":1709694998589,"results":"281","hashOfConfig":"224"},{"size":9078,"mtime":1717188033484,"results":"282","hashOfConfig":"224"},{"size":8626,"mtime":1717188033485,"results":"283","hashOfConfig":"224"},{"size":16258,"mtime":1708112591792,"results":"284","hashOfConfig":"224"},{"size":4147,"mtime":1708720664150,"results":"285","hashOfConfig":"224"},{"size":5225,"mtime":1719588286254,"results":"286","hashOfConfig":"224"},{"size":1792,"mtime":1710298438223,"results":"287","hashOfConfig":"224"},{"size":608,"mtime":1678935536702,"results":"288","hashOfConfig":"224"},{"size":18069,"mtime":1710293617695,"results":"289","hashOfConfig":"224"},{"size":782,"mtime":1678935742100,"results":"290","hashOfConfig":"224"},{"size":10040,"mtime":1693003282766,"results":"291","hashOfConfig":"224"},{"size":11005,"mtime":1693436817299,"results":"292","hashOfConfig":"224"},{"size":10947,"mtime":1708114397349,"results":"293","hashOfConfig":"224"},{"size":605,"mtime":1691608620076,"results":"294","hashOfConfig":"224"},{"size":2823,"mtime":1701148272116,"results":"295","hashOfConfig":"224"},{"size":11858,"mtime":1709694998592,"results":"296","hashOfConfig":"224"},{"size":5678,"mtime":1715715333415,"results":"297","hashOfConfig":"224"},{"size":612,"mtime":1682700270055,"results":"298","hashOfConfig":"224"},{"size":4710,"mtime":1682703936136,"results":"299","hashOfConfig":"224"},{"size":8987,"mtime":1682652697575,"results":"300","hashOfConfig":"224"},{"size":5394,"mtime":1702589626045,"results":"301","hashOfConfig":"224"},{"size":6791,"mtime":1700104745647,"results":"302","hashOfConfig":"224"},{"size":7488,"mtime":1706640622792,"results":"303","hashOfConfig":"224"},{"size":600,"mtime":1719432759623,"results":"304","hashOfConfig":"224"},{"size":8984,"mtime":1681158897911,"results":"305","hashOfConfig":"224"},{"size":696,"mtime":1698870637498,"results":"306","hashOfConfig":"224"},{"size":8511,"mtime":1717131398987,"results":"307","hashOfConfig":"224"},{"size":10776,"mtime":1678763266593,"results":"308","hashOfConfig":"224"},{"size":20128,"mtime":1695153053048,"results":"309","hashOfConfig":"224"},{"size":3612,"mtime":1675822185646,"results":"310","hashOfConfig":"224"},{"size":3576,"mtime":1675822185614,"results":"311","hashOfConfig":"224"},{"size":4232,"mtime":1675822185630,"results":"312","hashOfConfig":"224"},{"size":3601,"mtime":1675822185599,"results":"313","hashOfConfig":"224"},{"size":4372,"mtime":1677532716644,"results":"314","hashOfConfig":"224"},{"size":20128,"mtime":1695153053048,"results":"315","hashOfConfig":"224"},{"size":13391,"mtime":1683827501867,"results":"316","hashOfConfig":"224"},{"size":5945,"mtime":1705611701451,"results":"317","hashOfConfig":"224"},{"size":6309,"mtime":1715917472643,"results":"318","hashOfConfig":"224"},{"size":6832,"mtime":1689021966012,"results":"319","hashOfConfig":"224"},{"size":684,"mtime":1716439028094,"results":"320","hashOfConfig":"224"},{"size":2390,"mtime":1697558018301,"results":"321","hashOfConfig":"224"},{"size":8597,"mtime":1720812683785,"results":"322","hashOfConfig":"224"},{"size":2763,"mtime":1675822185552,"results":"323","hashOfConfig":"224"},{"size":6665,"mtime":1709321909506,"results":"324","hashOfConfig":"224"},{"size":7942,"mtime":1709697677504,"results":"325","hashOfConfig":"224"},{"size":7157,"mtime":1709784012977,"results":"326","hashOfConfig":"224"},{"size":4008,"mtime":1675822185458,"results":"327","hashOfConfig":"224"},{"size":2748,"mtime":1716785663171,"results":"328","hashOfConfig":"224"},{"size":2864,"mtime":1675822185443,"results":"329","hashOfConfig":"224"},{"size":6989,"mtime":1675822185411,"results":"330","hashOfConfig":"224"},{"size":1086,"mtime":1675822185443,"results":"331","hashOfConfig":"224"},{"size":1686,"mtime":1675822185458,"results":"332","hashOfConfig":"224"},{"size":15677,"mtime":1675822185411,"results":"333","hashOfConfig":"224"},{"size":3848,"mtime":1697175656700,"results":"334","hashOfConfig":"224"},{"size":14496,"mtime":1709694583355,"results":"335","hashOfConfig":"224"},{"size":13471,"mtime":1702316754047,"results":"336","hashOfConfig":"224"},{"size":5151,"mtime":1693440777157,"results":"337","hashOfConfig":"224"},{"size":4356,"mtime":1712952596029,"results":"338","hashOfConfig":"224"},{"size":1923,"mtime":1693106570527,"results":"339","hashOfConfig":"224"},{"size":5798,"mtime":1693440832213,"results":"340","hashOfConfig":"224"},{"size":15532,"mtime":1711666238054,"results":"341","hashOfConfig":"224"},{"size":2646,"mtime":1693007524335,"results":"342","hashOfConfig":"224"},{"size":2310,"mtime":1693243685815,"results":"343","hashOfConfig":"224"},{"size":430,"mtime":1693113757977,"results":"344","hashOfConfig":"224"},{"size":1955,"mtime":1691608620106,"results":"345","hashOfConfig":"224"},{"size":11626,"mtime":1720031960213,"results":"346","hashOfConfig":"224"},{"size":7726,"mtime":1715916696698,"results":"347","hashOfConfig":"224"},{"size":1959,"mtime":1682652697572,"results":"348","hashOfConfig":"224"},{"size":4902,"mtime":1702589852631,"results":"349","hashOfConfig":"224"},{"size":2183,"mtime":1715715058597,"results":"350","hashOfConfig":"224"},{"size":3522,"mtime":1677530586865,"results":"351","hashOfConfig":"224"},{"size":6922,"mtime":1719004726255,"results":"352","hashOfConfig":"224"},{"size":3539,"mtime":1675822185583,"results":"353","hashOfConfig":"224"},{"size":3507,"mtime":1677530472302,"results":"354","hashOfConfig":"224"},{"size":11594,"mtime":1709694998573,"results":"355","hashOfConfig":"224"},{"size":3293,"mtime":1706284833711,"results":"356","hashOfConfig":"224"},{"size":5695,"mtime":1706285348184,"results":"357","hashOfConfig":"224"},{"size":12402,"mtime":1709694998570,"results":"358","hashOfConfig":"224"},{"size":6922,"mtime":1719004750084,"results":"359","hashOfConfig":"224"},{"size":128,"mtime":1675822185536,"results":"360","hashOfConfig":"224"},{"size":11439,"mtime":1717131092292,"results":"361","hashOfConfig":"224"},{"size":3997,"mtime":1675822185552,"results":"362","hashOfConfig":"224"},{"size":1772,"mtime":1675822185536,"results":"363","hashOfConfig":"224"},{"size":6408,"mtime":1681158897926,"results":"364","hashOfConfig":"224"},{"size":11347,"mtime":1709694583358,"results":"365","hashOfConfig":"224"},{"size":833,"mtime":1693108845424,"results":"366","hashOfConfig":"224"},{"size":11603,"mtime":1709694998564,"results":"367","hashOfConfig":"224"},{"size":192,"mtime":1678157387934,"results":"368","hashOfConfig":"224"},{"size":10354,"mtime":1705464077553,"results":"369","hashOfConfig":"224"},{"size":12277,"mtime":1675822185380,"results":"370","hashOfConfig":"224"},{"size":6556,"mtime":1693440817018,"results":"371","hashOfConfig":"224"},{"size":1099,"mtime":1684988091570,"results":"372","hashOfConfig":"224"},{"size":3894,"mtime":1693440759566,"results":"373","hashOfConfig":"224"},{"size":15661,"mtime":1675822185333,"results":"374","hashOfConfig":"224"},{"size":1538,"mtime":1693107958987,"results":"375","hashOfConfig":"224"},{"size":5007,"mtime":1683869069790,"results":"376","hashOfConfig":"224"},{"size":11439,"mtime":1717131092292,"results":"377","hashOfConfig":"224"},{"size":2030,"mtime":1707367373363,"results":"378","hashOfConfig":"224"},{"size":971,"mtime":1709699652745,"results":"379","hashOfConfig":"224"},{"size":4477,"mtime":1710472530844,"results":"380","hashOfConfig":"224"},{"size":773,"mtime":1704389707661,"results":"381","hashOfConfig":"224"},{"size":1521,"mtime":1705467499542,"results":"382","hashOfConfig":"224"},{"size":14834,"mtime":1709921571170,"results":"383","hashOfConfig":"224"},{"size":8361,"mtime":1709920750614,"results":"384","hashOfConfig":"224"},{"size":8359,"mtime":1709920183764,"results":"385","hashOfConfig":"224"},{"size":5464,"mtime":1705459127482,"results":"386","hashOfConfig":"224"},{"size":4141,"mtime":1709769481885,"results":"387","hashOfConfig":"224"},{"size":7111,"mtime":1707347590679,"results":"388","hashOfConfig":"224"},{"size":26412,"mtime":1710472843442,"results":"389","hashOfConfig":"224"},{"size":5158,"mtime":1711135938769,"results":"390","hashOfConfig":"224"},{"size":19789,"mtime":1711642263653,"results":"391","hashOfConfig":"224"},{"size":3180,"mtime":1710367662231,"results":"392","hashOfConfig":"224"},{"size":1134,"mtime":1712100549759,"results":"393","hashOfConfig":"224"},{"size":3751,"mtime":1719275347905,"results":"394","hashOfConfig":"224"},{"size":437,"mtime":1711493209798,"results":"395","hashOfConfig":"224"},{"size":1297,"mtime":1711515354529,"results":"396","hashOfConfig":"224"},{"size":3006,"mtime":1716784100365,"results":"397","hashOfConfig":"224"},{"size":965,"mtime":1714713856038,"results":"398","hashOfConfig":"224"},{"size":4661,"mtime":1719275347959,"results":"399","hashOfConfig":"224"},{"size":852,"mtime":1716784791604,"results":"400","hashOfConfig":"224"},{"size":2997,"mtime":1712164582647,"results":"401","hashOfConfig":"224"},{"size":1786,"mtime":1716784998883,"results":"402","hashOfConfig":"224"},{"size":3749,"mtime":1719275347946,"results":"403","hashOfConfig":"224"},{"size":3042,"mtime":1712167474046,"results":"404","hashOfConfig":"224"},{"size":566,"mtime":1711493833038,"results":"405","hashOfConfig":"224"},{"size":1848,"mtime":1712168239352,"results":"406","hashOfConfig":"224"},{"size":3492,"mtime":1719275298963,"results":"407","hashOfConfig":"224"},{"size":1704,"mtime":1711494196738,"results":"408","hashOfConfig":"224"},{"size":2970,"mtime":1712170195425,"results":"409","hashOfConfig":"224"},{"size":823,"mtime":1712170427045,"results":"410","hashOfConfig":"224"},{"size":3634,"mtime":1719275347890,"results":"411","hashOfConfig":"224"},{"size":706,"mtime":1711497876811,"results":"412","hashOfConfig":"224"},{"size":2982,"mtime":1712172586863,"results":"413","hashOfConfig":"224"},{"size":987,"mtime":1716786059337,"results":"414","hashOfConfig":"224"},{"size":3588,"mtime":1719275347910,"results":"415","hashOfConfig":"224"},{"size":745,"mtime":1716785269601,"results":"416","hashOfConfig":"224"},{"size":2970,"mtime":1716785051874,"results":"417","hashOfConfig":"224"},{"size":878,"mtime":1712173461728,"results":"418","hashOfConfig":"224"},{"size":3630,"mtime":1719275347925,"results":"419","hashOfConfig":"224"},{"size":304,"mtime":1711510468574,"results":"420","hashOfConfig":"224"},{"size":2982,"mtime":1716785354154,"results":"421","hashOfConfig":"224"},{"size":883,"mtime":1712174023047,"results":"422","hashOfConfig":"224"},{"size":1708,"mtime":1712953806989,"results":"423","hashOfConfig":"224"},{"size":989,"mtime":1719592579640,"results":"424","hashOfConfig":"224"},{"size":20837,"mtime":1720758096261,"results":"425","hashOfConfig":"224"},{"size":2981,"mtime":1714541772043,"results":"426","hashOfConfig":"224"},{"size":14421,"mtime":1719275347929,"results":"427","hashOfConfig":"224"},{"size":10732,"mtime":1714542167703,"results":"428","hashOfConfig":"224"},{"size":1948,"mtime":1714670636689,"results":"429","hashOfConfig":"224"},{"size":8372,"mtime":1719275347913,"results":"430","hashOfConfig":"224"},{"size":2149,"mtime":1711511544814,"results":"431","hashOfConfig":"224"},{"size":2750,"mtime":1714711671333,"results":"432","hashOfConfig":"224"},{"size":2122,"mtime":1714713692834,"results":"433","hashOfConfig":"224"},{"size":2127,"mtime":1715367862463,"results":"434","hashOfConfig":"224"},{"size":622,"mtime":1718130055136,"results":"435","hashOfConfig":"224"},{"size":5828,"mtime":1718129610784,"results":"436","hashOfConfig":"224"},{"size":5828,"mtime":1718129610784,"results":"437","hashOfConfig":"224"},{"size":621,"mtime":1718129996542,"results":"438","hashOfConfig":"224"},{"size":3154,"mtime":1719381226247,"results":"439","hashOfConfig":"224"},{"size":8703,"mtime":1719602889431,"results":"440","hashOfConfig":"224"},{"size":1106,"mtime":1717477790891,"results":"441","hashOfConfig":"224"},{"size":4809,"mtime":1720033476021,"results":"442","hashOfConfig":"224"},{"size":5807,"mtime":1720535818182,"results":"443","hashOfConfig":"224"},{"size":2438,"mtime":1720728416377,"results":"444","hashOfConfig":"224"},{"size":3115,"mtime":1720728182098,"results":"445","hashOfConfig":"224"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},"1h0k5li",{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"448"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"448"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"448"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"448"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"448"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"448"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"448"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"448"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"448"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"448"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"448"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"448"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"448"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"448"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"448"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"448"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"448"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"448"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"448"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"448"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"448"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"448"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"448"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"448"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"448"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"448"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"448"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"448"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"448"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"448"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"448"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"448"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"448"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"448"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"448"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"448"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"448"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"448"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"448"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"448"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"448"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"448"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"448"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"448"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"448"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"448"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"448"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"448"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"448"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"448"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"448"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"448"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"688","usedDeprecatedRules":"448"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"448"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"448"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"448"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"448"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"448"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731","usedDeprecatedRules":"448"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734","usedDeprecatedRules":"448"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737","usedDeprecatedRules":"448"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740","usedDeprecatedRules":"448"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743","usedDeprecatedRules":"448"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"448"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"448"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"448"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"765","usedDeprecatedRules":"448"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"448"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"448"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"448"},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"448"},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"448"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"448"},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"448"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"448"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801","usedDeprecatedRules":"448"},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804","usedDeprecatedRules":"448"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"448"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"448"},{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"448"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"448"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"448"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824","usedDeprecatedRules":"448"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"829","usedDeprecatedRules":"448"},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"448"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"448"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"448"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"842","usedDeprecatedRules":"448"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847","usedDeprecatedRules":"448"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"448"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"448"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"448"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"863","usedDeprecatedRules":"448"},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868","usedDeprecatedRules":"448"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"871","usedDeprecatedRules":"448"},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"874","usedDeprecatedRules":"448"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877","usedDeprecatedRules":"448"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884","usedDeprecatedRules":"448"},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"448"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"892","usedDeprecatedRules":"448"},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895","usedDeprecatedRules":"448"},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"898","usedDeprecatedRules":"448"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"903","usedDeprecatedRules":"448"},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"908","usedDeprecatedRules":"448"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911","usedDeprecatedRules":"448"},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"918","usedDeprecatedRules":"448"},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"923","usedDeprecatedRules":"448"},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"928","usedDeprecatedRules":"448"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933","usedDeprecatedRules":"448"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"938","usedDeprecatedRules":"448"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"943","usedDeprecatedRules":"448"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948","usedDeprecatedRules":"448"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"448"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"960","usedDeprecatedRules":"448"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"963","usedDeprecatedRules":"448"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"966","usedDeprecatedRules":"448"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"969","usedDeprecatedRules":"448"},{"filePath":"970","messages":"971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"448"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981","usedDeprecatedRules":"448"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986","usedDeprecatedRules":"448"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"991","messages":"992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"448"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1000","usedDeprecatedRules":"448"},{"filePath":"1001","messages":"1002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005","usedDeprecatedRules":"448"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1008","usedDeprecatedRules":"448"},{"filePath":"1009","messages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"448"},"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\index.js",[],["1013","1014"],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\App.js",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\doctorApp.js",["1015"],"import React from 'react'\r\nimport { Button } from 'antd'\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Citas from './citas/citas'\r\nimport Expedientes from './expedientes/expedientes'\r\nimport Perfil from './perfil/perfil'\r\nimport Home from './home/home'\r\nimport icon from '../assets/Icon.png';\r\nimport { Footer, logout } from '../resources'\r\nimport { usuario } from '../resources'\r\nimport MainPacientes from './pacientes/main.pacientes';\r\nimport Escalas from '../escalas/escalasMenu';\r\nimport Balances from './balances/balances';\r\nimport Cortes from './cortes/main.cortes';\r\n\r\nfunction Navigator() {\r\n  console.log(\"DoctorApp\", usuario.name)\r\n  return <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\r\n    <Container>\r\n      <img\r\n        src={icon}\r\n        width=\"40\"\r\n        height=\"35\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"Recreamed logo\"\r\n        style={{ marginRight: 6 }}\r\n      />\r\n      <Navbar.Brand href=\"#home\" style={{ fontFamily: 'Poppins', color: 'White' }}>\r\n        Bienvenido {usuario.name}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"me-auto\">\r\n          {/* <Nav.Link href=\"/\">Inicio</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/pacientesdash\">PacientesDash</Nav.Link> */}\r\n          <Nav.Link href=\"/pacientes\" >Pacientes</Nav.Link>\r\n          <Nav.Link href=\"/citas\">Citas</Nav.Link>\r\n          <Nav.Link href=\"/escalas\">Escalas</Nav.Link>\r\n          <Nav.Link href=\"/balances\">Balance</Nav.Link>\r\n          <Nav.Link href=\"/cortes\">Cortes</Nav.Link>\r\n          {/* <Nav.Link href=\"/expedientes\">Expedientes</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/recetas\">Recetas</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/notas\">Notas</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/historial\">Historiales</Nav.Link> */}\r\n          <Nav.Link href=\"/perfil\">Mi Perfil</Nav.Link>\r\n          {/* <Nav.Link href=\"/stripe\">Stripe</Nav.Link> */}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n\r\n      <Navbar.Brand href=\"#home\" className=\"justify-content-end\">\r\n        <Button ghost onClick={logout} style={{ marginLeft: 10 }}>Cerrar Sesion</Button>\r\n      </Navbar.Brand>\r\n\r\n    </Container>\r\n  </Navbar>\r\n\r\n}\r\n\r\nexport default function DoctorApp() {\r\n\r\n  return (\r\n    <Router>\r\n      <Navigator />\r\n      <Switch>\r\n\r\n        <Route path=\"/pacientes\">\r\n          <MainPacientes />\r\n        </Route>\r\n\r\n        <Route path=\"/citas\">\r\n          <Citas />\r\n        </Route>\r\n\r\n        <Route path=\"/expedientes\">\r\n          <Expedientes />\r\n        </Route>\r\n\r\n        {/* <Route path=\"/Recetas\">\r\n          <Recetas />\r\n        </Route> */}\r\n\r\n        <Route path=\"/perfil\">\r\n          <Perfil />\r\n        </Route>\r\n\r\n        <Route path=\"/balances\">\r\n          <Balances />\r\n        </Route>\r\n\r\n        <Route path=\"/cortes\">\r\n          <Cortes />\r\n        </Route>\r\n\r\n        {/* Teporaty stripe */}\r\n        {/* <Route path=\"/stripe\">\r\n          <Stripe/>\r\n        </Route> */}\r\n\r\n        <Route path=\"/escalas\">\r\n          {/* This is taken from escalas directory*/}\r\n          <Escalas />\r\n        </Route>\r\n\r\n        <Route path=\"/\">\r\n          <MainPacientes />\r\n        </Route>\r\n\r\n      </Switch>\r\n\r\n      <Footer />\r\n    </Router>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\recepcionApp.js",["1016"],"import React from 'react'\r\nimport { Button } from 'antd'\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Patients from './pacientesDash/main.patients'\r\nimport Citas from './citas/main.citas'\r\n// import Recetas from './recetas'\r\nimport Perfil from './perfil'\r\nimport Home from './home/home'\r\nimport icon from '../assets/Icon.png';\r\nimport { Footer, logout } from '../resources'\r\nimport { usuario } from '../resources'\r\nimport { Historial } from './historial';\r\nimport MainPacientes from './pacientes/main.pacientes';\r\nimport Escalas from '../escalas/escalasMenu';\r\nimport Ingresos from './ingresos/ingresos';\r\nimport { KetaminaPublic, DepresionQidsPublic, DepresionEspanolPublic, HeadachePublic, PostTraumaticoPublic, PostTraumaticoClinicoPublic, PostTraumaticoMX } from '../session/public_escalas_routes';\r\nimport Horarios from './horarios/horarios';\r\n// import { KetaminaPublic, DepresionQidsPublic, DepresionEspanolPublic,HeadachePublic, PostTraumaticoPublic, PostTraumaticoClinicoPublic, PostTraumaticoMX } from './session/public_escalas_routes';\r\n\r\nfunction Navigator() {\r\n  console.log(\"DoctorApp\", usuario.name)\r\n  return <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\r\n    <Container>\r\n      <img\r\n        src={icon}\r\n        width=\"40\"\r\n        height=\"35\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"Recreamed logo\"\r\n        style={{ marginRight: 6 }}\r\n      />\r\n      <Navbar.Brand href=\"#home\" style={{ fontFamily: 'Poppins', color: 'White' }}>\r\n        Bienvenido {usuario.name}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"me-auto\">\r\n          <Nav.Link href=\"/\">Inicio</Nav.Link>\r\n          {/* <Nav.Link href=\"/pacientesdash\">PacientesDash</Nav.Link> */}\r\n          <Nav.Link href=\"/pacientes\" >Pacientes</Nav.Link>\r\n          <Nav.Link href=\"/citas\">Citas</Nav.Link>\r\n          <Nav.Link href=\"/escalas\">Escalas</Nav.Link>\r\n          {/* <Nav.Link href=\"/horarios\">Horarios</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/balances\">Balances</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/expedientes\">Expedientes</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/recetas\">Recetas</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/notas\">Notas</Nav.Link> */}\r\n          {/* <Nav.Link href=\"/historial\">Historiales</Nav.Link> */}\r\n          <Nav.Link href=\"/perfil\">Mi Perfil</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Navbar.Collapse className=\"justify-content-end\">\r\n        <Button onClick={logout} ghost>Cerrar Sesion</Button>\r\n      </Navbar.Collapse>\r\n    </Container>\r\n  </Navbar>\r\n\r\n}\r\n\r\nexport default function RecepcionApp() {\r\n\r\n  return (\r\n    <Router>\r\n\r\n      <Navigator />\r\n\r\n      <Switch>\r\n\r\n        {/* Deprecated */}\r\n        <Route path=\"/pacientesdash\">\r\n          <Patients />\r\n        </Route>\r\n\r\n        <Route path=\"/pacientes\">\r\n          <MainPacientes />\r\n        </Route>\r\n\r\n        <Route path=\"/citas\">\r\n          <Citas />\r\n        </Route>\r\n\r\n        {/* <Route path=\"/Recetas\">\r\n          <Recetas />\r\n        </Route> */}\r\n\r\n        <Route path=\"/perfil\">\r\n          <Perfil />\r\n        </Route>\r\n\r\n        <Route path=\"/historial\">\r\n          <Historial />\r\n        </Route>\r\n\r\n        <Route path=\"/balances\">\r\n          <Ingresos />\r\n        </Route>\r\n\r\n        <Route path=\"/horarios\">\r\n          <Horarios />\r\n        </Route>\r\n\r\n        <Route path=\"/escalas\">\r\n          {/* This is taken from escalas directory*/}\r\n          <Escalas />\r\n        </Route>\r\n\r\n\r\n        {/* Scales Routes just like anonymous */}\r\n        <Route path=\"/ketamina_public/:idmedico/:idpaciente/:key\">\r\n          <KetaminaPublic />\r\n        </Route>\r\n        <Route path=\"/dolor_public/:idmedico/:idpaciente/:key\">\r\n          <HeadachePublic />\r\n        </Route>\r\n        <Route path=\"/depresion_qids_public/:idmedico/:idpaciente/:key\">\r\n          <DepresionQidsPublic />\r\n        </Route>\r\n        <Route path=\"/depresion_gpc_public/:idmedico/:idpaciente/:key\">\r\n          <DepresionEspanolPublic />\r\n        </Route>\r\n        <Route path=\"/post_traumatico_public/:idmedico/:idpaciente/:key\">\r\n          <PostTraumaticoPublic />\r\n        </Route>\r\n        <Route path=\"/post_traumatico_clinico_public/:idmedico/:idpaciente/:key\">\r\n          <PostTraumaticoClinicoPublic />\r\n        </Route>\r\n        <Route path=\"/post_traumatico_mx_public/:idmedico/:idpaciente/:key\">\r\n          <PostTraumaticoMX />\r\n        </Route>\r\n\r\n        {/* End of Scales Routes just like anonymous */}\r\n\r\n\r\n        <Route path=\"/\">\r\n          <MainPacientes />\r\n\r\n        </Route>\r\n\r\n      </Switch>\r\n\r\n      <Footer />\r\n    </Router>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\superAdminApp.js",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\adminHospitalApp.js",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\patientApp.js",["1017"],"import React from 'react'\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport icon from '../assets/Icon.png';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Button } from 'antd'\r\nimport MisCitas from './misCitas'\r\nimport Recetas from './recetas'\r\nimport Perfil from './perfil';\r\nimport Home from './home/home';\r\nimport { usuario } from '../resources'\r\n\r\nconst logout = () => { localStorage.removeItem('sessionToken'); localStorage.removeItem('userType'); window.location.href = '/'; }\r\n\r\nfunction Navigator() {\r\n\r\n  return <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\r\n    <Container>\r\n      <img\r\n        src={icon}\r\n        width=\"40\"\r\n        height=\"35\"\r\n        className=\"d-inline-block align-top\"\r\n        alt=\"Recreamed logo\"\r\n        style={{ marginRight: 6 }}\r\n      />\r\n      <Navbar.Brand href=\"#home\" style={{ fontFamily: 'Poppins', color: 'White' }}>\r\n        Bienvenido {usuario.name}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"me-auto\">\r\n          {/* <Nav.Link href=\"/\">Landing</Nav.Link> */}\r\n          <Nav.Link href=\"/citas\">Mis Citas</Nav.Link>\r\n          <Nav.Link href=\"/recetas\">Mis Recetas</Nav.Link>\r\n          <Nav.Link href=\"/perfil\">Mi Perfil</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <Navbar.Collapse className=\"justify-content-end\">\r\n        <Button onClick={logout} ghost>Cerrar Sesion</Button>\r\n      </Navbar.Collapse>\r\n    </Container>\r\n  </Navbar>;\r\n\r\n}\r\n\r\nexport default function PatientApp() {\r\n  return (\r\n    <Router>\r\n      <Navigator />\r\n      <Switch>\r\n        <Route path=\"/citas\">\r\n          <MisCitas />\r\n        </Route>\r\n        <Route path=\"/recetas\">\r\n          <Recetas />\r\n        </Route>\r\n        <Route path=\"/perfil\">\r\n          <Perfil />\r\n        </Route>\r\n        <Route path=\"/\">\r\n        <MisCitas />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\public_escalas_routes.jsx",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029"],"import React from 'react'\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport KetaminaEncuesta from '../escalas/ketamina/ketaminaEncuesta'\r\nimport DepresionEncuesta from '../escalas/depresion/depresion_1/depresionEncuesta';\r\nimport Depresion2Encuesta from '../escalas/depresion/depresion_2/depresion2_encuesta';\r\nimport DolorEncuesta from '../escalas/dolor/dolorEncuesta';\r\nimport PostTraumaticoEncuesta from '../escalas/estres_post_traumatico/post_traumatico/p_t_encuesta';\r\nimport PTClinicoEncuesta from '../escalas/estres_post_traumatico/p_t_clinico/p_t_clinico_encuesta';\r\nimport PTMexicanaEncuesta from '../escalas/estres_post_traumatico/p_t_mexicana/p_t_mexicana_encuesta';\r\nimport SatisfaccionEncuesta from '../escalas/satisfaccion/satisfaccionEncuesta';\r\nimport Gad7Encuesta from '../escalas/gad7/gad7.encuesta';\r\nimport Phq9pEncuesta from '../escalas/phq9p/phq9p.encuesta';\r\nimport CssrsEncuesta from '../escalas/cssrs/cssrs.encuesta';\r\nimport ThiEncuesta from '../escalas/thi/thi.encuesta';\r\nimport EmcaEncuesta from '../escalas/emca/emca.encuesta';\r\nimport OwsEncuesta from '../escalas/ows/ows.encuesta';\r\nimport SowsEncuesta from '../escalas/sows/sows.encuesta';\r\nimport DocsEncuesta from '../escalas/docs/docs.encuesta';\r\nimport Pcl5Encuesta from '../escalas/pcl5/pcl5.encuesta';\r\nimport Dolor2Encuesta from '../escalas/dolor_2/dolor2_encuesta';\r\n\r\n// Ketamina\r\nexport function KetaminaPublic() {\r\n    let { idmedico, idpaciente, key } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <KetaminaEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Depresion 1 \r\nexport function DepresionQidsPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <DepresionEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Depresion 2 gpc \r\nexport function DepresionEspanolPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <Depresion2Encuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Dolor\r\nexport function HeadachePublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <DolorEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Post Trauma 1 \r\nexport function PostTraumaticoPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <PostTraumaticoEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Post Trauma 2 Clinico Hoja Verde\r\nexport function PostTraumaticoClinicoPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <PTClinicoEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Post Trauma Mexicana\r\nexport function PostTraumaticoMX() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            <PTMexicanaEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// Escala de satosfaccion\r\nexport function SatisfaccionPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    console.log(key)\r\n    return (\r\n        <div>\r\n            {/* <PTMexicanaEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} /> */}\r\n            <SatisfaccionEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} protocolo={protocolo} momento={momento} />\r\n        </div>\r\n    )\r\n}\r\n\r\n// GAD-7\r\nexport function Gad7Public() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <Gad7Encuesta idmedico={idmedico} idpaciente={idpaciente} token={key} protocolo={protocolo} momento={momento} />\r\n    </div>\r\n}\r\n\r\n// PHQ9P\r\nexport function PHQ9PPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <Phq9pEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} protocolo={protocolo} momento={momento} />\r\n    </div>\r\n}\r\n\r\n// CSSRS\r\nexport function CssrsPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <CssrsEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} protocolo={protocolo} momento={momento} />\r\n    </div>\r\n}\r\n\r\n// THI\r\nexport function ThiPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <ThiEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento}/>\r\n    </div>\r\n}\r\n\r\n// DOCS\r\nexport function DocsPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <DocsEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento}/>\r\n    </div>\r\n}\r\n\r\n// EMCA\r\nexport function EmcaPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <EmcaEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key} protocolo={protocolo} momento={momento} />\r\n    </div>\r\n}\r\n\r\n// OWS\r\nexport function OwsPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <OwsEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento}/>\r\n    </div>\r\n}\r\n\r\n// SOWS\r\nexport function SowsPublic() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <SowsEncuesta idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento}/>\r\n    </div>\r\n}\r\n\r\n// DOLOR 2\r\nexport function Dolor2Public() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <Dolor2Encuesta  idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento} />\r\n    </div>\r\n}\r\n\r\n// PCL-5\r\nexport function Pcl5Public() {\r\n    let { idmedico, idpaciente, key, protocolo, momento } = useParams();\r\n    return <div>\r\n        <Pcl5Encuesta idmedico={idmedico} idpaciente={idpaciente} token={key}  protocolo={protocolo} momento={momento}/>\r\n    </div>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\register.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\login.jsx",["1030"],"import { Form, Input, Button, Checkbox, Row, Col, Card, message } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { S_API } from '../resources'\r\nimport logo from '../assets/Logo.png';\r\n\r\nexport function Login() {\r\n\r\n  const onFinish = (values) => {\r\n    delete values.remember;\r\n    console.log('Received values of form: ', values);\r\n\r\n    // Inicio de sesion\r\n    fetch(S_API + 'login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(values)\r\n    })\r\n      .then((data) => { console.log(\"data\", data); return data.json() })\r\n      .then(res => {\r\n        console.log(\"resp\", res);\r\n        if (res.message === \"Bienvenido\") {\r\n          localStorage.setItem(\"userType\", res.user.rol);\r\n          localStorage.setItem('sessionToken', res.data.token);\r\n          localStorage.setItem('userData', JSON.stringify(res.user));\r\n\r\n          if (res.user.rol === 'Recepcion') // Save login time to schedule\r\n            localStorage.setItem('fecha_hora_entrada', new Date());\r\n\r\n          window.location.href = '/';\r\n        } else (message.info(res.error || res.message))\r\n      })\r\n      .catch(err => window.alert(\"Error: \", err))\r\n\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col lg={{ span: 8, offset: 8 }} md={{ span: 10, offset: 7 }} sm={{ span: 16, offset: 4 }} xs={{ span: 16, offset: 4 }}>\r\n        <br />\r\n        <br />\r\n        <Card hoverable>\r\n          <br />\r\n          <Row justify=\"center\"> <img src={logo} alt=\"Logo\" width={160} /></Row>\r\n          <br />\r\n          <Row justify=\"center\">\r\n            <h3>Inicio de Sesion</h3>\r\n          </Row>\r\n          <br />\r\n          <br />\r\n          <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{\r\n              remember: true,\r\n            }}\r\n            onFinish={onFinish}\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Por favor ingresa el correo de tu cuenta!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Usuario\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Por favor ingresa tu contraseña!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />} placeholder=\"Contraseña\" />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                <Checkbox>Mantener la sesion</Checkbox>\r\n              </Form.Item>\r\n\r\n              <a className=\"login-form-forgot\" href=\"\">\r\n                Recuperar contraseña\r\n              </a>\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button block type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                Iniciar Sesion\r\n              </Button>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Row justify=\"center\"> O <a href=\"register\" style={{ marginLeft: 4 }}>Registrarse</a></Row>\r\n\r\n            </Form.Item>\r\n          </Form>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n\r\n  );\r\n};","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\resources.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\perfil.jsx",["1031","1032","1033","1034","1035"],"import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Space, Button, Divider, Image } from 'antd';\r\nimport { Avatar, Card } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { API, usuario } from '.././resources';\r\nimport Loading from '.././loading';\r\nimport { PlusOutlined, FormOutlined } from '@ant-design/icons';\r\nimport PerfilEdit from './perfilEdit';\r\n\r\nexport default function Perfil() {\r\n\r\n    const [profileData, setProfileData] = useState([]);\r\n    const [profileForEdit, setProfileForEdit] = useState([]);\r\n    const [editing, setEditing] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n    }, [editing])\r\n\r\n    const getProfileData = () => {\r\n        fetch(API + 'userByMail/' + usuario.email)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setProfileData(data[0]);\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const editPerfil = async (p) => {\r\n        p.horarios.forEach((h) => { h.sucursal = h.sucursal._id })\r\n        console.log('Horarios before edit profile: ', p.horarios);\r\n        await setProfileForEdit(p)\r\n        setEditing(true);\r\n        console.log('Editar medico: ', p)\r\n    }\r\n\r\n    const DetailsProfile = () => {\r\n        return <Row>\r\n            <Col span={8} offset={4}>\r\n                {\r\n                    // Profile Pic\r\n                    profileData.avatar.length > 9 ?\r\n                        <Image style={{ borderRadius: 12 }} width={256} src={'https://api.recreamed.com/images/' + profileData.avatar} />\r\n                        :\r\n                        <Avatar size={128} icon={<UserOutlined />} className='btnIconCentered' />\r\n                }\r\n                <br /><br /><br />\r\n                <p className='nombre'> {profileData.name} </p>\r\n                <p className='datos'>{profileData.rol} </p>\r\n                <p className='datos'>Correo: {profileData.email} </p>\r\n                <p className='datos'>Telefono: {profileData.telefono} </p>\r\n            </Col>\r\n            {/* <Col span={8}>\r\n                <p>Estado: {profileData.estado}</p>\r\n                <p>Municipio: {profileData.municipio}</p>\r\n                <p>Colonia: {profileData.colonia}</p>\r\n                <p>Calle: {profileData.calle}</p>\r\n                <p>Codigo Postal:{profileData.codigopostal} </p>\r\n            </Col> */}\r\n            <Col span={8}>\r\n                <Card title='Horarios' style={{ borderRadius: 12 }}>\r\n                    {\r\n                        profileData.horarios.map((h) => {\r\n                            return <Card.Grid style={{ width: '100%' }} >\r\n                                <Row align=\"middle\">\r\n                                    <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                    <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                </Row>\r\n                            </Card.Grid>\r\n                        })\r\n                    }\r\n                </Card>\r\n                <br />\r\n                <br />\r\n                <br />\r\n            </Col>\r\n        </Row>\r\n    }\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n\r\n            <Space>\r\n                <h4>Mi Perfil</h4>\r\n                <Button onClick={() => editPerfil(profileData)} type=\"primary\" shape=\"circle\" icon={<FormOutlined />} className='btnIconCentered' />\r\n            </Space> <br /><br />\r\n            {isLoading ? <Loading /> :\r\n                <Card style={{ borderRadius: 16 }}>\r\n                    {\r\n                        editing ?\r\n\r\n                            <>\r\n                                <PerfilEdit perfil={profileData} setEditing={setEditing} />\r\n                                <Button onClick={() => setEditing(false)}>Cancelar</Button>\r\n                            </> :\r\n                            <DetailsProfile />\r\n                    }\r\n                </Card>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\historial.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\sucursal.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\recetas.jsx",["1036","1037"],"import React, { useState } from 'react'\r\nimport { Table, Tag, Space, Button, Modal } from 'antd';\r\n\r\n\r\nexport default function Recetas() {\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n    const columns = [\r\n        {\r\n            title: 'ID Receta',\r\n            dataIndex: 'key',\r\n            key: '_id',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'ID Nota',\r\n            dataIndex: 'id_nota',\r\n            key: 'id_nota',\r\n        },\r\n        {\r\n            title: 'Prescripcion',\r\n            dataIndex: 'prescripcion',\r\n            key: 'prescripcion',\r\n        },\r\n        {\r\n            title: 'Detalles',\r\n            key: 'action',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={showModal}>Detalles</Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const data = [\r\n        {\r\n            key: \"62570ab89a6437369f835be7\",\r\n            id_nota: \"62570a9a9a6437369f835be5\",\r\n            prescripcion: \"Paracetamol cada 8 horas\",\r\n            createdAt: \"2022-04-13T17:39:04.541Z\",\r\n            updatedAt: \"2022-04-13T17:39:04.541Z\",\r\n            __v: 0\r\n        },\r\n        {\r\n            key: \"62570ab89a6437369f835be8\",\r\n            id_nota: \"62570a9a9a6437369f835be5\",\r\n            prescripcion: \"Ibuprofeno\",\r\n            createdAt: \"2022-04-13T17:39:04.541Z\",\r\n            updatedAt: \"2022-04-13T17:39:04.541Z\",\r\n            __v: 0\r\n        }\r\n    ];\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Mis Recetas</h4>\r\n            \r\n            <Table columns={columns} dataSource={data} />\r\n\r\n            <Modal title=\"Basic Modal\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n\r\n                <p> _id\": \"62570ab89a6437369f835be7\",</p>\r\n                <p> id_nota\": \"62570a9a9a6437369f835be5\",</p>\r\n                <p> prescripcion\": \"Paracetamol cada 8 horas\",</p>\r\n                <p> createdAt\": \"2022-04-13T17:39:04.541Z\",</p>\r\n                <p> updatedAt\": \"2022-04-13T17:39:04.541Z\",</p>\r\n                <p> __v\": 0</p>\r\n\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\perfil.jsx",["1038","1039"],"import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Space, Button, Divider, Image } from 'antd';\r\nimport { Avatar, Card } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { API, usuario } from '.././resources';\r\nimport Loading from '.././loading';\r\nimport { PlusOutlined, FormOutlined } from '@ant-design/icons';\r\nimport PerfilEdit from './perfilEdit';\r\n\r\n\r\nexport default function Perfil() {\r\n\r\n    const [profileData, setProfileData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [profileForEdit, setProfileForEdit] = useState([]);\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n    }, [])\r\n\r\n    const getProfileData = () => {\r\n        fetch(API + 'userByMail/' + usuario.email)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setProfileData(data[0]);\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const DetailsProfile = () => {\r\n        // Two columns of 8 spaces with 4 spaces around\r\n        return <Row>\r\n            <Col span={8} offset={4}>\r\n                {\r\n                    // Profile Pic\r\n                    profileData.avatar.length > 8 ?\r\n                        <Image style={{ borderRadius: 12 }} width={256} src={'https://api.recreamed.com/images/' + profileData.avatar} />\r\n                        :\r\n                        <Avatar size={128} icon={<UserOutlined />} className='btnIconCentered' />\r\n                }\r\n                <Divider />\r\n                <p className='nombre'>{profileData.name} </p>\r\n                <p className='datos'>{profileData.email} </p>\r\n                <p className='datos'>{profileData.telefono} </p>\r\n            </Col>\r\n            <Col span={8}>\r\n                <p><span className='desc'>Estado:</span> {profileData.estado}</p>\r\n                <p><span className='desc'>Municipio:</span> {profileData.municipio}</p>\r\n                <p><span className='desc'>Colonia:</span> {profileData.colonia}</p>\r\n                <p><span className='desc'>Calle:</span> {profileData.calle}</p>\r\n                <p><span className='desc'>Codigo Postal:</span>{profileData.codigopostal} </p>\r\n            </Col>\r\n            {/* <Col span={8}>\r\n                <Card title='Horarios' style={{ borderRadius: 12 }}>\r\n                    {\r\n                        profileData.horarios.map((h) => {\r\n                            return <Card.Grid style={{ width: '100%' }} >\r\n                                <Row align=\"middle\">\r\n                                    <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                    <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                </Row>\r\n                            </Card.Grid>\r\n                        })\r\n                    }\r\n                </Card>\r\n                <br />\r\n                <p><span className='desc'>Universidad:</span> {profileData.universidad} </p>\r\n                <p><span className='desc'>Certificacion:</span> {profileData.certificacion} </p>\r\n                <p><span className='desc'>Cedula:</span> {profileData.cedula} </p>\r\n            </Col> */}\r\n\r\n\r\n\r\n        </Row>\r\n    }\r\n    const editPerfil = async (p) => {\r\n        p.horarios.forEach((h) => { h.sucursal = h.sucursal._id })\r\n        console.log('Horarios before edit profile: ', p.horarios);\r\n        await setProfileForEdit(p)\r\n        setEditing(true);\r\n        console.log('Editar medico: ', p)\r\n    }\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n\r\n            <Space>\r\n                <h3>PERFIL</h3>\r\n                <Button onClick={() => editPerfil(profileData)} type=\"primary\" shape=\"circle\" icon={<FormOutlined />} />\r\n            </Space> <br /><br />\r\n            {isLoading ? <Loading /> :\r\n                <Card>\r\n                    {\r\n                        editing ?\r\n\r\n                            <>\r\n                                <PerfilEdit perfil={profileData} setEditing={setEditing} />\r\n                                <Button shape=\"circle\" title='Cancelar' />\r\n                                <Button onClick={() => setEditing(false)}>Cancelar</Button>\r\n                            </> :\r\n                            <DetailsProfile />\r\n                    }\r\n                </Card>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\misCitas.jsx",["1040","1041","1042","1043","1044","1045"],"import React, { useState, useEffect } from 'react'\r\nimport { Table, Space, Row, Col, Button, Modal, Form, Input, message, DatePicker } from 'antd';\r\nimport { Calendar, Badge } from 'antd';\r\nimport { API, getData } from '../resources';\r\nimport { usuario } from '../resources';\r\nimport Loading from '../loading'\r\n// import { API } from '../resources'\r\n// import Stripe from './stripe/stripe';\r\n\r\nexport default function MisCitas() {\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [citasData, setCitasData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [cita, setCita] = useState({})\r\n    const [isDetailVisible, setIsDetailVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getCitasData()\r\n        // getData(`receta/${props.receta}`).then(rs => { setRecetaData(rs); setRecetaLoading(false) })\r\n\r\n    }, [])\r\n\r\n    const getCitasData = () => {\r\n        fetch(API + `citas/${usuario._id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data); setCitasData(data);\r\n            })\r\n            .finally(() => setIsLoading(false))\r\n    }\r\n\r\n    // Add Modal\r\n    const showModal = () => { setIsModalVisible(true) };\r\n    const handleOk = () => { setIsModalVisible(false) };\r\n    const handleCancel = () => { setIsModalVisible(false) };\r\n    // Details Modal\r\n    const handleDetailOk = () => { setIsDetailVisible(false); };\r\n    const handleDetailCancel = () => { setIsDetailVisible(false); };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Fecha y Hora',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha_hora',\r\n            render: text => <a>{text}</a>,\r\n        },\r\n        {\r\n            title: 'Paciente',\r\n            dataIndex: 'id_usuario',\r\n            key: 'id_usuario',\r\n        },\r\n        {\r\n            title: 'Sucursal',\r\n            dataIndex: 'id_sucursal',\r\n            key: 'v',\r\n        },\r\n        {\r\n            title: 'Comentarios',\r\n            dataIndex: 'comentarios',\r\n            key: 'comentarios',\r\n        },\r\n        {\r\n            title: 'Detalles',\r\n            key: 'detalles',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    {/* <a href>Enlace</a> */}\r\n                    <Button>Enlace</Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const onFinish = (values) => {\r\n        values.medico = usuario._id;\r\n        console.log('Valores:', values);\r\n        fetch(API + 'citas/add', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => { console.log('Success:', response); message.success(response.message || response.error); })\r\n            .catch(error => console.error('Error:', error))\r\n            .finally(() => { getCitasData(); setIsModalVisible(false) })\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    // DatePicker\r\n    function onChange(value, dateString) {\r\n        console.log('Selected Time: ', value);\r\n        console.log('Formatted Selected Time: ', dateString);\r\n    }\r\n    function onOk(value) {\r\n        console.log('onOk: ', value);\r\n    }\r\n\r\n    //Calendar Functions\r\n    const getMonthData = (value) => {\r\n        if (value.month() === 8) {\r\n            return 1394;\r\n        }\r\n    };\r\n    const monthCellRender = (value) => {\r\n        const num = getMonthData(value);\r\n        return num ? (\r\n            <div className=\"notes-month\">\r\n                <section>{num}</section>\r\n                <span>Backlog number</span>\r\n            </div>\r\n        ) : null;\r\n    };\r\n\r\n    const dateCellRender = (value) => {\r\n        // const hoy = value.format('L');\r\n        let hoy = value.format();\r\n        hoy = hoy.substring(0, 10)\r\n        return (\r\n            <ul className=\"events\">\r\n                {citasData.map((cita) => {\r\n\r\n                    cita.fecha_hora = cita.fecha_hora.substring(0, 10);\r\n                    return cita.fecha_hora === hoy ?\r\n                        <li style={{ listStyleType: 'none' }} key={cita._id}>\r\n                            <Badge status='success' text={cita.medico.name} onClick={() => { setCita(cita); setIsDetailVisible(true); }} />\r\n                        </li>\r\n                        : <></>\r\n\r\n                })\r\n                }\r\n            </ul >\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <Row>\r\n                <Col span={8}><h4>CALENDARIO DE CITAS</h4></Col>\r\n                <Col>\r\n                    <Button type=\"primary\" onClick={showModal}>\r\n                        Nueva Cita\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* {isLoading ? <Loading /> : <Table columns={columns} dataSource={citasData} />} */}\r\n\r\n            <Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} />\r\n\r\n\r\n\r\n            <Modal title=\"Nuevo expediente\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Form name=\"expediente\" labelCol={{ span: 8 }} wrapperCol={{ span: 12 }} onFinish={onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\" >\r\n\r\n                    <Form.Item label=\"Paciente\" name=\"usuario\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Sucursal\" name=\"sucursal\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Fecha y Hora\" name=\"fecha_hora\" rules={[{ required: true, message: 'Selecciona Fecha y Hora' }]} >\r\n                        <DatePicker showTime onChange={onChange} onOk={onOk} placeholder='Selecciona Fecha y Hora' />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Enlace a la reunion\" name=\"id_reunion\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Contraseña\" name=\"password_reunion\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                        <Input placeholder='Opcional' />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Comentarios\" name=\"comentarios\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\" form='expediente'>\r\n                            Guardar\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Modal title=\"Detalles de la cita\" visible={isDetailVisible} onOk={handleDetailOk} onCancel={handleDetailCancel}>\r\n                {\r\n                    cita ?\r\n                        <>\r\n                            <p>Paciente: {cita.usuario?.name}</p>\r\n                            <p>fecha y hora: {cita.fecha_hora}</p>\r\n                            <p>Sucursal: {cita.sucursal?.nombre}</p>\r\n                            <p>Comentarios: {cita.comentarios}</p>\r\n                            <p> <a href={cita.id_reunion} target='_blank' rel='noreferrer'>ir a la cita </a> </p>\r\n                        </>\r\n                        :\r\n                        <p>Sin cita seleccionada</p>\r\n                }\r\n                {/* <Stripe /> */}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\perfil.jsx",["1046"],"import React, { useState, useEffect } from 'react'\r\nimport { Row, Col, Space, Button, Divider, Image } from 'antd';\r\nimport { Avatar, Card } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { API, usuario } from '../../resources';\r\nimport Loading from '../../loading';\r\nimport { FormOutlined } from '@ant-design/icons';\r\nimport PerfilEdit from './perfilEdit';\r\nimport Configuration from './configuration';\r\n\r\n\r\nexport default function Perfil() {\r\n\r\n    const [profileData, setProfileData] = useState([]);\r\n    const [editing, setEditing] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n    }, [editing])\r\n\r\n    const getProfileData = () => {\r\n        fetch(API + 'userByMail/' + usuario.email)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setProfileData(data[0]);\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const editPerfil = async (p) => {\r\n        p.horarios.forEach((h) => { h.sucursal = h.sucursal._id })\r\n        setEditing(true);\r\n    }\r\n\r\n    const MiniCard = ({ universidad, carrera, cedula = '' }) => {\r\n        return <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', marginBottom: 12, textAlign: 'left' }}>\r\n            <div style={{ display: 'flex', flexDirection: 'column', width: '30%', borderBottom: 'solid 2px #f5f6f8'  }}><div className='desc'>Universidad:</div><div>{universidad}</div> </div>\r\n            <div style={{ display: 'flex', flexDirection: 'column', width: '30%', borderBottom: 'solid 2px #f5f6f8'  }}><div className='desc'>Carrera:</div><div>{carrera}</div></div>\r\n            <div style={{ display: 'flex', flexDirection: 'column', width: '30%', borderBottom: 'solid 2px #f5f6f8'  }}><div className='desc'>Cedula:</div><div>{cedula}</div></div>\r\n        </div>\r\n    }\r\n\r\n    const DetailsProfile = () => {\r\n        // Two columns of 8 spaces with 4 spaces around\r\n        return <div>\r\n\r\n            <Row gutter={8} style={{ backgroundColor: '#f5f6f8', borderRadius: 12, padding: 8 }}>\r\n                <Col span={8} >\r\n                    <Card style={{ display: 'flex', justifyContent: 'center', textAlign: 'center' }}>\r\n                        {\r\n                            // Profile Pic\r\n                            profileData.avatar.length > 9 ?\r\n                                <Image style={{ borderRadius: 12 }} width={256} src={'https://api.recreamed.com/images/' + profileData.avatar} alt='medic-profile-pic' />\r\n                                :\r\n                                <Avatar size={128} icon={<UserOutlined />} className='btnIconCentered' />\r\n                        }\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <p className='nombre'>{profileData.name} </p>\r\n                        <p className='datos'>{profileData.rol} </p>\r\n                        {\r\n                            profileData.especialidad && <p className='datos'>{profileData.especialidad} </p>\r\n                        }\r\n                        <p className='datos'>{profileData.email} </p>\r\n                        <p className='datos'>{profileData.telefono} </p>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col span={7}>\r\n                    <Card title='Horarios' size='small' style={{ height: '100%' }} >\r\n                        {\r\n                            profileData.horarios.map((h) => {\r\n                                return <Card.Grid style={{ width: '100%' }} >\r\n                                    <Row align=\"middle\">\r\n                                        <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                        <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                    </Row>\r\n                                </Card.Grid>\r\n                            })\r\n                        }\r\n                    </Card>\r\n\r\n                    {/* <Card title='Datos Academicos' size='small' style={cardStyle}>\r\n                        <p><span className='desc'>Certificacion:</span> {profileData.certificacion} </p>\r\n                        <p><span className='desc'>Cedula:</span> {profileData.cedula} </p>\r\n                    </Card> */}\r\n                </Col>\r\n\r\n                <Col span={9}>\r\n                    <Card title='Universidades' size='small' style={{ height: '100%' }}>\r\n\r\n                        {\r\n                            profileData.universidades && profileData.universidades.map((u) => {\r\n                                return <MiniCard {...u} />\r\n                            })\r\n                        }\r\n                    </Card>\r\n                </Col>\r\n\r\n            </Row>\r\n            <br />\r\n            <Configuration id_usuario={usuario._id} correo={usuario.email} />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n\r\n            <Space>\r\n                <h3>PERFIL</h3>\r\n                <Button onClick={() => editPerfil(profileData)} type=\"primary\" shape=\"circle\" icon={<FormOutlined />} className='btnIconCentered' />\r\n            </Space>\r\n            {isLoading ? <Loading /> :\r\n                <div>\r\n                    {\r\n                        editing ?\r\n\r\n                            <>\r\n                                <PerfilEdit perfil={profileData} setEditing={setEditing} />\r\n                                <Button onClick={() => setEditing(false)}>Cancelar</Button>\r\n                            </> :\r\n                            <DetailsProfile />\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\citas.jsx",["1047"],"import { useState, useEffect } from 'react';\r\nimport { Calendar, dayjsLocalizer } from 'react-big-calendar';\r\nimport { getData, usuario, deleteData } from '../../resources';\r\nimport Loading from '../../loading'\r\nimport CreateCita, { CreateCitaForm } from './cita.create'\r\nimport { Button, Modal, Popconfirm } from 'antd'\r\nimport dayjs from 'dayjs';\r\nimport { GoogleOutlined } from '@ant-design/icons'\r\nimport AuthButton from './auth.button';\r\n// import CitaGoogle from './cita.google';\r\n// import '@dayjs/locale/es-mx';\r\n// require('@dayjs/locale/es-mx');\r\n\r\nconst localizer = dayjsLocalizer(dayjs)\r\n\r\nconst { configuracion: { tratamientos_ofrecidos } = {} } = usuario || {};\r\n\r\n// const today = new Date();\r\n\r\n// To set rage for calendar\r\n// start time 8:00am\r\n// const min = new Date(\r\n//     today.getFullYear(),\r\n//     today.getMonth(),\r\n//     today.getDate(),\r\n//     8\r\n// )\r\n\r\n// end time 5:00pm\r\n// const max = new Date(\r\n//     today.getFullYear(),\r\n//     today.getMonth(),\r\n//     today.getDate(),\r\n//     21\r\n// )\r\n\r\n\r\nexport default function Citas() {\r\n    const [citasData, setCitasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [editingCita, setEditingCita] = useState(false)\r\n\r\n    // Modal for details\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const showModal = () => { setIsModalOpen(true) }\r\n    const handleOk = () => { setIsModalOpen(false); setEditingCita(false); setEditingCita(false) }\r\n    const handleCancel = () => { setIsModalOpen(false); setEditingCita(false); setEditingCita(false) }\r\n    // Modal for edit and create\r\n    const [citaForEdit, setCitaForEdit] = useState(null)\r\n    const [fecha_hora, setFecha_hora] = useState(null)\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\r\n\r\n\r\n\r\n    useEffect(() => { getCitasData() }, [])\r\n\r\n    const getCitasData = () => {\r\n        if (usuario)\r\n\r\n            getData(`citas/medico/${usuario._id}`).then((rs) => {\r\n                rs.forEach(cita => {\r\n\r\n                    const servicio = cita.id_servicio;\r\n                    const servicioInfo = tratamientos_ofrecidos.find(servicioItem => servicioItem._id === servicio);\r\n                    if (servicioInfo) {\r\n                        cita.color = servicioInfo.color;\r\n                    }\r\n\r\n                    cita.start = new Date(Date.parse(cita.fecha_hora));\r\n                    const endDate = new Date(cita.fecha_hora);\r\n                    endDate.setTime(endDate.getTime() + 1 * (cita.duracion ?? 60) * 60 * 1000)\r\n                    cita.end = new Date(Date.parse(endDate));\r\n                    cita.title = cita.usuario.name;\r\n                    cita.id = cita._id;\r\n                    cita.key = cita._id;\r\n                });\r\n                console.log('getCitasData medico', rs)\r\n                setCitasData(rs)\r\n            }\r\n            ).finally(() => setLoading(false))\r\n    }\r\n\r\n    // Select cita to show details and to confirm\r\n    const selectEvent = async (e) => {\r\n        if (!e.hospital) e.hospital = e.sucursal._id; // For Edit\r\n        if (e.sucursa && e.sucursal._id) e.sucursal = e.sucursal._id; // For Edit\r\n        if (!e.paciente) e.paciente = e.usuario; // For details\r\n        if (e.usuario && e.usuario._id) e.usuario = e.usuario._id; // For Editing\r\n        e.fecha_hora = dayjs(e.fecha_hora) //For edit\r\n        setCitaForEdit(e)\r\n        showModal()\r\n    }\r\n\r\n    // Select time hour, where cita will be created \r\n    const handleSlotSelection = ({ start, end, action }) => {\r\n        setFecha_hora(dayjs(start))\r\n        setIsCreateModalOpen(true)\r\n        return { style: { backgroundColor: 'red' } };\r\n    };\r\n\r\n    // Confirm servicio\r\n    // const confirmService = () => {\r\n    //     console.log('To confirm service', citaForEdit)\r\n    //     updateData(`balances/update/cita/${citaForEdit._id}`, { estado: 'pagado' })\r\n    // }\r\n\r\n    // Delete button\r\n    const confirm = (e) => {\r\n        deleteData(`citas/remove/${citaForEdit._id}`).then((rs) => { console.log(rs); getCitasData(); handleCancel() })\r\n        deleteData(`balances/remove/cita/${citaForEdit._id}`)\r\n\r\n    };\r\n\r\n    const cancel = (e) => { console.log(e) }\r\n\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n        // const index = serviceList.indexOf(event.servicio);\r\n        // var backgroundColor = '#' + pre_colors[index]; \r\n        // var backgroundColor = '##03fc8c';\r\n        var style = {\r\n            backgroundColor: event.color,\r\n            borderRadius: '4px',\r\n            opacity: 0.8,\r\n            color: 'white',\r\n            border: '0px',\r\n            display: 'block'\r\n        };\r\n        return {\r\n            style: style\r\n        };\r\n    }\r\n\r\n    if (loading) return <Loading />;\r\n\r\n    return <div className='mainContainer'>\r\n        <br />\r\n        {/* <CitaGoogle />\r\n        <br /> */}\r\n\r\n        <AuthButton />\r\n\r\n        {/* <Button icon={<GoogleOutlined />} >\r\n            Sincronzar calendario\r\n        </Button> */}\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Calendar\r\n            // min={min}\r\n            // max={max}\r\n            scrollToTime={new Date(Date.now())}\r\n            defaultDate={new Date(Date.now())}\r\n            selectable='true'\r\n            localizer={localizer}\r\n            events={citasData}\r\n            eventPropGetter={eventStyleGetter}\r\n            startAccessor=\"start\"\r\n            endAccessor=\"end\"\r\n            style={{ height: 500 }}\r\n            messages={{\r\n                next: \"Sig\",\r\n                previous: \"Ant\",\r\n                today: \"Hoy\",\r\n                month: \"Mes\",\r\n                week: \"Semana\",\r\n                day: \"Día\",\r\n            }}\r\n            defaultView=\"week\"\r\n            onDoubleClickEvent={(e) => console.log(e)}\r\n            onSelectEvent={selectEvent} // details cita\r\n            onSelecting={(e) => console.log(e)}\r\n            onSelectSlot={handleSlotSelection} // create cita\r\n        />\r\n        <br />\r\n\r\n\r\n\r\n        <Modal title=\"Detalles Cita\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Popconfirm\r\n                    title=\"Eliminar Cita\"\r\n                    description=\"Seguro que quiere eliminar la cita?\"\r\n                    onConfirm={confirm}\r\n                    onCancel={cancel}\r\n                    okText=\"Si\"\r\n                    cancelText=\"No\"\r\n                >\r\n                    <Button danger>Eliminar</Button>\r\n                </Popconfirm>,\r\n                <Button onClick={() => setEditingCita(!editingCita)}>{editingCita ? \"Cancelar\" : \"Modificar\"}</Button>,\r\n                <Button onClick={handleCancel}>Cerrar</Button>\r\n            ]}>\r\n            {editingCita ?\r\n                <CreateCitaForm cita={citaForEdit} setIsModalOpen={setIsModalOpen} getCitasData={getCitasData} setEditingCita={setEditingCita} />\r\n                : <div>{citaForEdit && <div>\r\n                    <p><strong>Paciente </strong>{citaForEdit.paciente ? citaForEdit.paciente.name : 'Sin paciente'}</p>\r\n                    <p><strong>Fecha </strong>{new Date(citaForEdit.fecha_hora).toLocaleDateString()}</p>\r\n                    <p><strong>Hora </strong>{new Date(citaForEdit.fecha_hora).toLocaleTimeString()}</p>\r\n                    <p><strong>Servicio </strong>{citaForEdit.servicio}</p>\r\n                    <p><strong>Comentarios </strong>{citaForEdit.comentarios}</p>\r\n                    {/* <Button type='primary' onClick={confirmService}>Confirmar Servicio</Button>, */}\r\n                </div>\r\n                }\r\n                </div>\r\n            }\r\n        </Modal>\r\n\r\n        <CreateCita setIsModalOpen={setIsCreateModalOpen} isOpenModal={isCreateModalOpen} fecha_hora={fecha_hora} getCitasData={getCitasData} />\r\n\r\n    </div>\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\expedientes.jsx",["1048"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Modal, message } from 'antd';\r\nimport { API, getData, sendDataBody } from '../../resources';\r\nimport DetalleNota from './detalleNota'\r\nimport DetalleHistoria from './detalleHistoria';\r\nimport DetallesPaciente from '../pacientes/detalles.paciente';\r\nimport { PrinterOutlined, CloudDownloadOutlined } from '@ant-design/icons'\r\nimport ExpedienteDocument from './expedienteForPrint';\r\n// import html2canvas from 'html2canvas'; deprecated\r\n// import { jsPDF } from \"jspdf\";\r\n\r\n\r\nexport default function Expedientes({ paciente, setIsEditModalOpen }) {\r\n\r\n    const [expedientesData, setExpedientesData] = useState(null);\r\n    const [expedientesLoading, setExpedientesLoading] = useState(true);\r\n    const [historia, setHistoria] = useState(\"\");\r\n    const [historiaDetails, sethistoriaDetails] = useState(\"\")\r\n    const [notas, setNotas] = useState(\"\");\r\n    const [recetas, setRecetas] = useState(\"\");\r\n    const [citas, setcitas] = useState(\"\")\r\n\r\n    // Print modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    // Print modal end\r\n\r\n    const { _id: id_paciente } = paciente;\r\n\r\n    useEffect(() => {\r\n        getExpedientesData(id_paciente)\r\n        getPatientRegisters(id_paciente)\r\n    }, [id_paciente])\r\n\r\n\r\n    const getExpedientesData = (id_paciente) => {\r\n        // console.log('Received patient exp doc ', id_paciente)\r\n        fetch(API + `expedientes/${id_paciente}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // console.log(\"GetExpData: \", data);\r\n                setExpedientesData(data);\r\n                if (typeof data != \"undefined\" && data !== null) {\r\n                    // setNotas(data.notas); \r\n                    setHistoria(data.historia);\r\n                    getHistoriaData(data.historia)\r\n                } else { setNotas(null); setHistoria(null) }\r\n            })\r\n            .finally(() => setExpedientesLoading(false))\r\n    }\r\n\r\n    const getPatientRegisters = (id_paciente) => {\r\n        getData(`notas/${id_paciente}`).then(rs => setNotas(rs))\r\n        getData(`receta/${id_paciente}`).then(rs => setRecetas(rs))\r\n        getData(`citas/${id_paciente}`).then(rs => setcitas(rs))\r\n    }\r\n\r\n    const getHistoriaData = (historia) => {\r\n        getData(`historia/${historia}`).then(rs => { sethistoriaDetails(rs) })\r\n    }\r\n\r\n    async function addHistoria() {\r\n        return sendDataBody('historias/add', {\r\n            historial: \"Historia clinica al \" + new Date()\r\n        })\r\n    }\r\n\r\n    const createPAtientData = async (usr) => {\r\n        const historia = await addHistoria();\r\n        const postBody = {\r\n            usuario: usr,\r\n            historia: historia.id_historia,\r\n            notas: [],\r\n            recetas: []\r\n        }\r\n        // console.log('postBodyForExpedient: ', postBody);\r\n\r\n        sendDataBody('expedientes/add', postBody).then(response => {\r\n            // console.log('Success:', response);\r\n            message.success(response.message || response.error);\r\n            if (response.message && response.message === 'Expediente creado correctamente') {\r\n                getExpedientesData(id_paciente)\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    function DownloadConscent() {\r\n        // El archvo de conscentmiento se guardará en ./uploads y se llamara con /notas/estudos/download de momento porque no hay un endpoint para archivo de conscentimento para subrlo sera en /notas/estudus/upload\r\n        return <Button icon={<CloudDownloadOutlined className=\"teamSocialIcon\" />} style={{ marginLeft: 12 }} href={`${API}notas/estudios/download/3d4c9465-889f-428c-9e15-13bea15162ef.doc`}>\r\n            Avso de Conscentmiento\r\n        </Button>\r\n\r\n    }\r\n\r\n\r\n\r\n    if (expedientesLoading) return <p>Cargando...</p>\r\n\r\n    return <div id='expedient-export' >\r\n\r\n        {/* <h4 className='spacedTitle'>Expediente </h4> */}\r\n\r\n        <div style={{ display: 'flex', flexDirection: 'row', gap: 15 }}>\r\n            <DetallesPaciente paciente={paciente} setIsEditModalOpen={setIsEditModalOpen} />\r\n\r\n            <DetalleHistoria historia={historia} detalles_paciente={paciente} />\r\n\r\n        </div>\r\n\r\n\r\n        {\r\n            expedientesData ?\r\n                <DetalleNota id_expediente={expedientesData._id} prevExpNotas={expedientesData.notas} paciente={id_paciente} datosPaciente={paciente} />\r\n                :\r\n                <div style={{}}>\r\n                    Sin expediente\r\n                    <br />\r\n                    <br />\r\n                    <Button onClick={() => { createPAtientData(id_paciente) }}>Crear Expediente Ahora</Button>\r\n                </div>\r\n        }\r\n\r\n        <Button onClick={showModal} style={{ marginTop: 6 }} icon={<PrinterOutlined />}>Imprimir expediente</Button>\r\n\r\n\r\n        <Modal title=\"Imprimir Expediente\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={900}>\r\n            <ExpedienteDocument pacienteData={paciente} expedienteData={expedientesData} notas={notas} recetas={recetas} historia={historiaDetails} citas={citas}/>\r\n        </Modal>\r\n\r\n        <DownloadConscent />\r\n\r\n    </div>;\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\main.pacientes.jsx",["1049","1050","1051","1052"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Select, List, Row, Col } from 'antd'\r\nimport { API } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport { usuario } from '../../resources'\r\nimport Expedientes from '../expedientes/expedientes'\r\n// import DetallesPaciente from './detalles.paciente_old'\r\nimport DetallesPaciente from './detalles.paciente'\r\nimport Register from './register.patient'\r\nimport { PlusOutlined, MobileOutlined, UserOutlined } from '@ant-design/icons';\r\nimport dayjs from 'dayjs'\r\nimport ExpedienteFisio from '../expedieteFisio/expediente'\r\nimport RegisterFisio from './register.patent.fisio'\r\nimport CodeGenerate from './code.generate'\r\nconst { Option } = Select;\r\n\r\nexport default function MainPacientes() {\r\n\r\n  const TIPO = usuario.tipo || \"PSIQ\"\r\n\r\n  const [pacientesData, setPacientesData] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const [activePatient, setActivePatient] = useState(pacientesData[0]?._id)\r\n\r\n  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false) // PSIQ\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false)\r\n  const [isRegisterFisioModal, setIsRegisterFisioModal] = useState(false) // FISIO\r\n  const [isEditFisioModalOpen, setIsEditFisioModalOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    getPacientesData()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    getPacientesData()\r\n  }, [isRegisterModalOpen,isRegisterFisioModal,isEditFisioModalOpen])\r\n\r\n  const getPacientesData = () => {\r\n    fetch(API + `mispacientes/${usuario._id}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data.forEach(paciente => {\r\n          if (paciente.responsable) {\r\n            paciente.res_name = paciente.responsable.nombre;\r\n            paciente.res_phone = paciente.responsable.telefono;\r\n          }\r\n          paciente.fecha_nacimiento = dayjs(paciente.fecha_nacimiento);\r\n        });\r\n        // console.log(data); \r\n        setPacientesData(data);\r\n        if (data && data.length > 0) setActivePatient(data[0])\r\n      })\r\n      .finally(() => setIsLoading(false))\r\n  }\r\n\r\n\r\n\r\n\r\n  const onChange = (data) => {\r\n    const found = pacientesData.find(p => p._id === data)\r\n    setActivePatient(found)\r\n    console.log('active patient', found)\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    console.log('search:', value);\r\n  };\r\n\r\n  if (isLoading) return <Loading />\r\n\r\n  return (\r\n    <div className='mainContainer' style={{ backgroundColor: '#f5f6f8' }}>\r\n      {/* <Col ></Col> */}\r\n      <h3 >Pacientes</h3>\r\n      <Row justify=\"start\">\r\n        <Col>\r\n          <div className=\"my-select-container\">\r\n            <Select\r\n              // Widget para buscar pacientes\r\n              style={{ borderRadius: 8, width: 320 }}\r\n              dropdownStyle={{ borderRadius: 8 }}\r\n              showSearch\r\n              placeholder=\"Buscar paciente\"\r\n              optionFilterProp=\"children\"\r\n              onChange={onChange}\r\n              onSearch={onSearch}\r\n              filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\r\n            >\r\n              {\r\n                pacientesData.map((p) => <Option key={p._id} value={p._id}>{p.name}</Option>)\r\n              }\r\n            </Select>\r\n          </div>\r\n        </Col>\r\n        <Col style={{ marginLeft: 12 }}>\r\n          {TIPO === 'FISIO' ?\r\n            <div className='fila'>\r\n              <Button className='btnIconCentered' style={{ height: 30 }} onClick={() => setIsRegisterFisioModal(!isRegisterFisioModal)} size='small' icon={<PlusOutlined />} shape='round' type=\"primary\"  >Agregar Paciente</Button>\r\n              <CodeGenerate />\r\n            </div>\r\n            :\r\n            <Button className='btnIconCentered' style={{ height: 30 }} onClick={() => setIsRegisterModalOpen(!isRegisterModalOpen)} size='small' icon={<PlusOutlined />} shape='round' type=\"primary\" title='Agregar paciente' >Agregar Paciente</Button>\r\n          }\r\n        </Col>\r\n      </Row> <div style={{ height: '16px' }}></div>\r\n\r\n\r\n      {\r\n        TIPO === 'FISIO' ?\r\n          <ExpedienteFisio paciente={activePatient} setIsEditModalOpen={setIsEditFisioModalOpen} /> :\r\n          <Expedientes paciente={activePatient} setIsEditModalOpen={setIsEditModalOpen} />\r\n      }\r\n\r\n      {/* Modal For Register */}\r\n      <Register setIsModalOpen={setIsRegisterModalOpen} isModalOpen={isRegisterModalOpen} getPacientesData={getPacientesData} />\r\n\r\n      {/* Modal For Edit */}\r\n      <Register setIsModalOpen={setIsEditModalOpen} isModalOpen={isEditModalOpen} paciente={activePatient} getPacientesData={getPacientesData} />\r\n\r\n      {/* Modal For Register FISIO*/}\r\n      <RegisterFisio setIsModalOpen={setIsRegisterFisioModal} isModalOpen={isRegisterFisioModal} getPacientesData={getPacientesData} />\r\n\r\n      {/* Modal For Edit FISIO*/}\r\n      <RegisterFisio setIsModalOpen={setIsEditFisioModalOpen} isModalOpen={isEditFisioModalOpen} getPacientesData={getPacientesData} paciente={activePatient} />\r\n\r\n    </div >\r\n  )\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\escalasMenu.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\home\\home.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\balances.jsx",["1053"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Button, Typography, Modal } from 'antd';\r\nimport { CheckCircleTwoTone } from '@ant-design/icons'\r\nimport { deleteData, getData, usuario } from '../../resources';\r\nimport CreateBalance from './create-balance';\r\nimport Ticket from './ticket-for-print';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function Balances() {\r\n    const [balancesData, setBalancesData] = useState([])\r\n\r\n    // Modal For Edit Ingreso\r\n    const [ingresoForEdit, setIngresoForEdit] = useState(null)\r\n    const [isIngresoModalOpen, setIsIngresoModalOpen] = useState(false);\r\n    const showIngresoModal = () => { setIsIngresoModalOpen(true) };\r\n\r\n    // Modal For Edit Gasto\r\n    const [egresoForEdit, setEgresoForEdit] = useState(null)\r\n    const [isEgresoModalOpen, setIsEgresoModalOpen] = useState(false);\r\n    const showEgresoModal = () => { setIsEgresoModalOpen(true) };\r\n\r\n    // Modal For Ticket\r\n    const [ingresoForPrint, setIngresoForPrint] = useState([])\r\n    const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\r\n    const showTicketModal = () => { setIsTicketModalOpen(true) }\r\n    const handleTicketOk = () => { setIsTicketModalOpen(false) }\r\n    const handleTicketCancel = () => { setIsTicketModalOpen(false) }\r\n\r\n    useEffect(() => { getBalancesData() }, [])\r\n\r\n    const getBalancesData = () => { getData(`balances/medico/${usuario._id}`).then((rs) => { setBalancesData(rs.reverse()); console.log('balances', rs); }) }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Fecha y Hora',\r\n            dataIndex: 'fecha_hpra',\r\n            key: 'fecha_hora',\r\n            render: (_, { fecha_hora }) => { return <>{new Date(fecha_hora).toLocaleString()}</> }\r\n        },\r\n        {\r\n            title: 'Tipo',\r\n            dataIndex: 'tipo',\r\n            key: 'tipo',\r\n            render: (_, { tipo }) => {\r\n                let color = (tipo && tipo === 'ingreso') ? 'geekblue' : 'volcano';\r\n                return tipo ? <Tag color={color} >{tipo.toUpperCase()}</Tag> : <Tag color={color}>Indefinido</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => `$ ${monto}`\r\n        },\r\n        {\r\n            title: 'Abono',\r\n            dataIndex: 'abono',\r\n            key: 'abono',\r\n            render: (_, { abono }) => { return abono && <>${abono}</> }\r\n        },\r\n        {\r\n            title: 'Adeudo',\r\n            dataIndex: 'adeudo',\r\n            key: 'adeudo',\r\n            render: (_, record) => { return <>${record.monto - record.abono}</> }\r\n\r\n        },\r\n        {\r\n            title: 'Forma de pago',\r\n            key: 'forma_de_pago',\r\n            dataIndex: 'forma_de_pago',\r\n            render: (_, { forma_de_pago }) => {\r\n                let color = forma_de_pago === 'efectivo' ? 'green' : 'geekblue';\r\n                return <Tag color={color} >{forma_de_pago.toUpperCase()}</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Paciente',\r\n            key: 'cita.paciente',\r\n            dataIndex: 'cita',\r\n            // render: (_, { cita }) => {\r\n            //     return cita ? <MatchPatient paciente={cita.usuario} /> : <Text disabled>Sin Paciente</Text>\r\n            // },\r\n            render: (_, record) => {\r\n                // if (record.cita) return <MatchPatient paciente={record.cita.usuario} />\r\n                if (record.cita) return <div style={{ display: 'flex', flexDirection: 'column' }}>{record.cita.usuario.name} <span style={{ fontSize: 9 }}>Tomado de la cita</span></div> //when populate is ready\r\n                else if (record.paciente) return <>{record.paciente.name}</>\r\n                else return <Text type=\"secondary\"> Sin Paciente </Text>\r\n            },\r\n        },\r\n        {\r\n            title: 'Factura',\r\n            key: 'Factura',\r\n            dataIndex: 'factura',\r\n            render: (_, { factura }) => { return factura && <CheckCircleTwoTone /> }\r\n\r\n        },\r\n        {\r\n            title: 'Estado',\r\n            key: 'Estado',\r\n            dataIndex: 'estado',\r\n            render: (_, { estado }) => {\r\n\r\n                let color = estado === 'pagado' ? 'geekblue' : 'green';\r\n                if (estado === 'pendiente' || estado === 'sin pagar') color = 'volcano';\r\n\r\n                return <Tag color={color}> {estado.toUpperCase()} </Tag>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Editar',\r\n            render: (_, record) => <div className='fila'>\r\n                <Button onClick={() => { setIngresoForEdit(record); showIngresoModal() }}>Editar</Button>\r\n                {record.tipo === 'ingreso' && <Button onClick={() => { console.log(record); setIngresoForPrint([record]); showTicketModal() }}>Imprimir Nota</Button>}\r\n            </div>\r\n        },\r\n    ];\r\n\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <div className='fila'>\r\n                <h4>Tabla de Ingresos</h4>\r\n                <Button onClick={showIngresoModal} type='primary' ghost style={{ marginLeft: 32 }}>Agregar Ingreso</Button>\r\n                <Button onClick={showEgresoModal} type='primary' ghost style={{ marginLeft: 32 }}>Agregar Gasto</Button>\r\n            </div>\r\n            <Table columns={columns} dataSource={balancesData} />\r\n            <div style={{ height: 200 }}></div>\r\n\r\n            {/* Ingreso */}\r\n            <CreateBalance tipo='ingreso' balanceForEdit={ingresoForEdit} setBalanceForEdit={setIngresoForEdit} setIsModalOpen={setIsIngresoModalOpen} isModalOpen={isIngresoModalOpen} getBalancesData={getBalancesData} />\r\n\r\n            {/* Gasto */}\r\n            <CreateBalance tipo='egreso' balanceForEdit={egresoForEdit} setBalanceForEdit={setEgresoForEdit} setIsModalOpen={setIsEgresoModalOpen} isModalOpen={isEgresoModalOpen} getBalancesData={getBalancesData} />\r\n\r\n            {/* Ticket */}\r\n            <Modal title=\"Imprimir Nota de Venta\" open={isTicketModalOpen} onOk={handleTicketOk} onCancel={handleTicketCancel} width={600}>\r\n                <Ticket ingresos={ingresoForPrint} idHospital={usuario.horarios[0].sucursal._id} logo=\"https://api.recreamed.com/images/bd71d914-1f11-4bea-81e5-81b55e11a4e1.jpg\" company='Hospital: ' seller='Médico: ' buyer='Paciente: ' />\r\n            </Modal>\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\main.patients.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\main.citas.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\main.cortes.jsx",["1054","1055","1056","1057"],"import { useEffect, useState } from 'react'\r\nimport { Button, Table, Space, Popconfirm } from 'antd'\r\nimport { getData, sendDataBody, usuario } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport Detalles from './details.corte'\r\nimport CreateCorte from './create.corte'\r\n\r\nexport default function Cortes() {\r\n\r\n    const [balance, setBalance] = useState({})\r\n    const [cortesData, setCortesData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    // For details modal\r\n    const [corteForDetails, setCorteForDetails] = useState({})\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const showModal = (corte) => { setCorteForDetails(corte); setIsModalOpen(true) };\r\n\r\n    // For Create Corte Modal\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n    const showCreateModal = () => {\r\n        setIsCreateModalOpen(true);\r\n    };\r\n    const handleCreateOk = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n    const handleCreateCancel = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        return getCortesData()\r\n    }, [])\r\n\r\n    const getCortesData = () => {\r\n        getData(`cortes/${usuario._id}`).then((rs) => {\r\n            setCortesData(rs.reverse())\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const createCorte = () => {\r\n        const newCorte = {\r\n            medico: usuario._id,\r\n            fecha_inicio: cortesData.length === 0 ? new Date() : cortesData.at(0).fecha_cierre,\r\n            fecha_cierre: new Date(),\r\n            comentario: ''\r\n        }\r\n        console.log('ready to send ', newCorte)\r\n        sendDataBody('cortes/add', newCorte).then((rs) => {\r\n            console.log(rs);\r\n            getCortesData()\r\n        })\r\n    }\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'fecha y hora de Inicio',\r\n            dataIndex: 'fecha_inicio',\r\n            key: 'fecha_inicio',\r\n            render: (_, { fecha_inicio }) => <> {new Date(fecha_inicio).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Fecha y hora de Cierre',\r\n            dataIndex: 'fecha_cierre',\r\n            key: 'fecha_cierre',\r\n            render: (_, { fecha_cierre }) => <> {new Date(fecha_cierre).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Comentario',\r\n            dataIndex: 'comentario',\r\n            key: 'comentario',\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Acciones',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={() => { showModal(record) }}>Ver Detalles</Button>\r\n                    {/* <Button onClick={() => console.log(record)}>Editar</Button> */}\r\n                    {/* <Button onClick={() => deleteData(`cortes/remove/${record._id}`)}>Eliminar</Button> */}\r\n                </Space>)\r\n        }\r\n    ];\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return <div className='mainContainer'>\r\n        <div className='fila'>\r\n            <h4>Cortes</h4>\r\n            {/* <Popconfirm\r\n                placement='bottomRight'\r\n                title=\"Crear Corte\"\r\n                description=\"Seguro que quiere crear un corte de caja hasta la fecha y hora actuales?\"\r\n                onConfirm={createCorte}\r\n                onCancel={() => console.log('Cancel create corte')}\r\n                okText=\"Si\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' style={{ marginLeft: 12 }}>{cortesData.length === 0 ? 'Generar Primer Corte' : 'Generar Corte'}</Button>\r\n            </Popconfirm> */}\r\n            <Button onClick={showCreateModal} type='primary' style={{ marginLeft: 12 }}>Generar corte</Button>\r\n\r\n        </div>\r\n        <br />\r\n        <Table columns={columns} dataSource={cortesData} />\r\n\r\n        <Detalles corte={corteForDetails} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} />\r\n\r\n        <CreateCorte isModalOpen={isCreateModalOpen} handleOk={handleCreateOk} handleCancel={handleCreateCancel} />\r\n\r\n    </div>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\home\\home.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\ingresos.jsx",["1058","1059","1060","1061","1062","1063","1064"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Button, Typography, Card, Modal, Row, Col, Switch, Select } from 'antd';\r\nimport { CheckCircleTwoTone } from '@ant-design/icons'\r\nimport { getData, usuario, sendDataBody, ids_hospitales, deleteData } from '../../resources';\r\nimport CreateBalance from './create-ingreso';\r\nimport Loading from '../../loading';\r\nimport Ticket from './ticket-for-print';\r\nimport moment from 'moment/moment';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function Ingresos() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [medicosData, setMedicosData] = useState({}) // Populate the main select component\r\n    const [medico, setMedico] = useState(null)\r\n    const [ingresosData, setIngresosData] = useState([])\r\n    const [ingresoForEdit, setIngresoForEdit] = useState({})\r\n    const [ingresoForPrint, setIngresoForPrint] = useState([])\r\n\r\n    // Select logo for print in receta. Switches the modal view into select logo hospital/pdf recipe for print\r\n    const [logoHospital, setLogoHospital] = useState(null)\r\n    const [nombreHospital, setNombreHospital] = useState(null)\r\n    const [isLogoSelected, setIsLogoSelected] = useState(false)\r\n\r\n    // Modal For Edit Balance\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n\r\n    // Modal For Ticket\r\n    const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\r\n    const showTicketModal = () => { setIsTicketModalOpen(true) };\r\n    const handleTicketOk = () => { setIsTicketModalOpen(false); setIsLogoSelected(false) };\r\n    const handleTicketCancel = () => { setIsTicketModalOpen(false); setIsLogoSelected(false) };\r\n\r\n    // Modal For Add/Edit Gasto\r\n    const [isEgresoModalOpen, setIsEgresoModalOpen] = useState(false)\r\n    const showEgresoModal = () => { setIsEgresoModalOpen(true) };\r\n\r\n    // Toggles between for medic/for hospital\r\n    const [viewTipeMedics, setViewTipeMedics] = useState(false)\r\n\r\n    const [lastFecha, setLastFecha] = useState(\"\")\r\n    const [firstFecha, setFirstFecha] = useState(\"\")\r\n\r\n\r\n    function subtractMonths(date, months) { date.setMonth(date.getMonth() - months); return date; }\r\n\r\n\r\n    useEffect(() => {\r\n        getIngresos()\r\n    }, [])\r\n\r\n    const getIngresos = async () => {\r\n        const medicos = await sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales })\r\n\r\n        medicos.forEach(m => { m.label = m.name; m.value = m._id; })// to pass to create modal\r\n        setMedicosData(medicos) // to pass to create modal\r\n\r\n        const promises = medicos.map(medico => getData(`balances/medico/${medico._id}`));\r\n\r\n        Promise.all(promises)\r\n            .then(resultados => {\r\n                const ingresos = resultados.flat(); // concatenar todos los arrays de ingresos\r\n                console.log(ingresos);\r\n                // Doctor is for details, medico is for edit. Usuario is for details, paciente id for Edit\r\n                ingresos.forEach((i) => { i.doctor = i.medico; i.medico = i.medico._id; if (i.paciente) { i.usuario = i.paciente; i.paciente = i.paciente._id; } })\r\n                setIngresosData(ingresos.sort((a, b) => a.fecha_hora < b.fecha_hora))\r\n                setLoading(false)\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    const handleEditIngreso = (record) => {\r\n        record.fecha_hora = moment.utc(record.fecha_hora)\r\n        setIngresoForEdit(record);\r\n        showModal()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Médico',\r\n            dataIndex: 'medico',\r\n            key: 'createdAt',\r\n            render: (_, { doctor }) => { return <>{doctor.name}</> }\r\n        },\r\n        {\r\n            title: 'Tipo',\r\n            dataIndex: 'tipo',\r\n            key: 'tipo',\r\n            render: (_, { tipo }) => {\r\n                let color = (tipo && tipo === 'ingreso') ? 'geekblue' : 'volcano';\r\n                return tipo ? <Tag color={color} >{tipo.toUpperCase()}</Tag> : <Tag color={color}>Indefinido</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Fecha',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha_hora',\r\n            render: (_, { fecha_hora }) => { return <>{new Date(fecha_hora).toLocaleString()}</> },\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => a.fecha_hora > b.fecha_hora,\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => { return <>${monto}</> }\r\n        },\r\n        {\r\n            title: 'Abono',\r\n            dataIndex: 'abono',\r\n            key: 'abono',\r\n            render: (_, { abono }) => { return abono && <>${abono}</> }\r\n\r\n        },\r\n        {\r\n            title: 'Adeudo',\r\n            dataIndex: 'adeudo',\r\n            key: 'adeudo',\r\n            render: (_, record) => { return <>${record.monto - record.abono}</> }\r\n        },\r\n        {\r\n            title: 'Forma de pago',\r\n            key: 'forma_de_pago',\r\n            dataIndex: 'forma_de_pago',\r\n            render: (_, { forma_de_pago }) => {\r\n                let color = forma_de_pago === 'efectivo' ? 'green' : 'geekblue';\r\n                return <Tag color={color} >{forma_de_pago.toUpperCase()}</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Paciente',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, record) => {\r\n                // if (record.cita) return <>{record.cita.usuario}</>\r\n                if (record.cita) return <>{record.cita.usuario.name}</> //when populate is ready\r\n                else if (record.usuario) return <>{record.usuario.name}</>\r\n                else return <Text type=\"secondary\"> Sin Paciente</Text>\r\n            }\r\n        },\r\n        {\r\n            title: 'Factura',\r\n            key: 'Factura',\r\n            dataIndex: 'factura',\r\n            render: (_, { factura }) => { return factura && <CheckCircleTwoTone /> }\r\n\r\n        },\r\n        {\r\n            title: 'Estado',\r\n            key: 'Estado',\r\n            dataIndex: 'estado',\r\n            // render: (_, { estado }) => {\r\n            //     let color = estado === 'pagado' ? 'geekblue' : 'green';\r\n            //     if (estado === 'pendiente' || estado === 'sin pagar') color = 'volcano';\r\n            //     return <Tag color={color}> {estado.toUpperCase()} </Tag>\r\n            // }\r\n            render: (_, { abono, monto }) => {\r\n                const pagado = abono === monto;\r\n                let color = pagado ? 'green' : 'volcano';\r\n                return <Tag color={color}> {pagado ? 'PAGADO' : 'PENDIENTE'} </Tag>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Editar',\r\n            render: (_, record) => <div style={{ display: 'flex', gap: 2, flexDirection: 'column' }}>\r\n                {/* <Button onClick={() => { deleteData(`balances/remove/${record._id}`).then(()=>getIngresos()) }}>Eliminar</Button> */}\r\n                <Button size='small' onClick={() => handleEditIngreso(record)}>Editar Estado</Button>\r\n                <Button size='small' onClick={() => { setIngresoForPrint(record); showTicketModal() }}>Imprimir Nota</Button>\r\n            </div>\r\n        },\r\n    ];\r\n\r\n    const getBalancesData = (medicos) => {\r\n        const body = {\r\n            fecha_inicio: subtractMonths(new Date(), 2),\r\n            medico: medicos\r\n        }\r\n        // console.log('Balances body',body)\r\n        sendDataBody('balances', body).then((rs) => {\r\n            console.log('alances', rs)\r\n            rs.forEach((i) => { i.doctor = i.medico; i.medico = i.medico._id; if (i.paciente) { i.usuario = i.paciente; i.paciente = i.paciente._id; } })\r\n            setIngresosData(rs)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    // Toggle View Tipe medic/for all\r\n    const onSwitchChange = (checked) => {\r\n        setViewTipeMedics(checked)\r\n        console.log(`switch to ${checked}`);\r\n        if (!checked) getIngresos()\r\n    };\r\n\r\n    const handleDoctorChange = (value) => { setMedico(value); getBalancesData([value]); };\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n\r\n            <div className='fila'>\r\n                <h4>Ingresos de todos los medicos</h4>\r\n                <Button size='small' onClick={showModal} type='primary' >Agregar Nuevo Ingreso</Button>\r\n                {/* <Button ghost onClick={showEgresoModal} type='primary' style={{ marginBottom: 22, marginLeft: 6 }} >Agregar Nuevo Gasto</Button> */}\r\n            </div>\r\n\r\n            <div>\r\n                Hospital <Switch onChange={onSwitchChange} /> Medico\r\n                {\r\n                    viewTipeMedics && <Select options={medicosData} onChange={handleDoctorChange} style={{ width: 240, marginLeft: 16 }} placeholder='Seleccione medico' />\r\n                }\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <Table columns={columns} dataSource={ingresosData}\r\n            // scroll={{ x: 950, y: \"calc(100vh - 220px)\" }}\r\n            />\r\n\r\n            <div style={{ height: 200 }}></div>\r\n\r\n            {/* Ingreso */}\r\n            <CreateBalance tipo='ingreso' balanceForEdit={ingresoForEdit} setBalanceForEdit={setIngresoForEdit} setIsModalOpen={setIsModalOpen} isModalOpen={isModalOpen} getIngresos={getIngresos} medico={medico} medicosData={medicosData} />\r\n\r\n            {/* Gasto */}\r\n            {/* <CreateBalance tipo='egreso' setBalanceForEdit={setIngresoForEdit} setIsModalOpen={setIsEgresoModalOpen} isModalOpen={isEgresoModalOpen} getIngresos={getIngresos} medicosData={medicosData} /> */}\r\n\r\n            {/* Ticket */}\r\n            <Modal title=\"Imprimir Nota de Venta\" open={isTicketModalOpen} onOk={handleTicketOk} onCancel={handleTicketCancel} width={600}>\r\n\r\n                {\r\n                    isLogoSelected ? // Si ya hay logo seleccionado, se pasa a la receta y se muestra en pdf\r\n                        <Ticket ingreso={ingresoForPrint} logo={'https://api.recreamed.com/images/' + logoHospital} hospital={nombreHospital} seller='Médico: ' buyer='Paciente: ' />\r\n                        :\r\n                        <div>\r\n                            <Card title='Selecciona un hospital' bordered={false}>\r\n                                {\r\n                                    usuario.horarios.map((h) => {\r\n                                        return <Card.Grid style={{ width: '100%' }} onClick={() => { console.log(h.sucursal); setLogoHospital(h.sucursal.logo); setNombreHospital(h.sucursal.nombre); setIsLogoSelected(true) }} key={h._id}>\r\n                                            <Row align=\"middle\">\r\n                                                <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                                <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                            </Row>\r\n                                        </Card.Grid>\r\n                                    })\r\n                                }\r\n                            </Card>\r\n                        </div>\r\n                }\r\n\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\main.pacientes.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\main.patients.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\main.admins.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\main.hospitals.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\main.doctors.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\horarios\\horarios.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\main.receptionists.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\main.citas.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\perfil\\perfil.administrador.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\main.users.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\main.doctors.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ingresos.jsx",["1065","1066","1067"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Button, Typography, Modal, Card, Row, Col, Switch, Select } from 'antd';\r\nimport { CheckCircleTwoTone } from '@ant-design/icons'\r\nimport moment from 'moment/moment';\r\n\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../resources';\r\nimport CreateBalance from './create-ingreso';\r\nimport Loading from '../../loading';\r\nimport Ticket from './ticket-for-print';\r\nimport IngersosHosptal from './ingresos.hospital';\r\nimport PatientsChart from './patients-chart';\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function Ingresos() {\r\n    const [loading, setLoading] = useState(true)\r\n    const [medicosData, setMedicosData] = useState({}) // Populate the main select component\r\n    const [medico, setMedico] = useState(null)\r\n    const [ingresosData, setIngresosData] = useState([])\r\n    const [ingresoForEdit, setIngresoForEdit] = useState({})\r\n    const [ingresoForPrint, setIngresoForPrint] = useState([])\r\n    // const [medicos, setMedicos] = useState({})\r\n\r\n    // Modal For Add/Edit Inreso\r\n    const [isIngresoModalOpen, setIsIngresoModalOpen] = useState(false);\r\n    const showIngresoModal = () => { setIsIngresoModalOpen(true) };\r\n    // Modal For Add/Edit Enreso\r\n    const [isEgresoModalOpen, setIsEgresoModalOpen] = useState(false)\r\n    const showEgresoModal = () => { setIsEgresoModalOpen(true) };\r\n\r\n    // Select logo for print in receta. Switches the modal view into select logo hospital/pdf recipe for print\r\n    const [logoHospital, setLogoHospital] = useState(null)\r\n    const [nombreHospital, setNombreHospital] = useState(null)\r\n    const [isLogoSelected, setIsLogoSelected] = useState(false)\r\n    const [idHospital, setIdHospital] = useState({})\r\n\r\n    // Modal For Ticket\r\n    const [isTicketModalOpen, setIsTicketModalOpen] = useState(false);\r\n    const showTicketModal = () => { setIsTicketModalOpen(true); };\r\n    const handleTicketOk = () => { setIsTicketModalOpen(false); setIsLogoSelected(false) };\r\n    const handleTicketCancel = () => { setIsTicketModalOpen(false);; setIsLogoSelected(false) };\r\n\r\n    const [lastFecha, setLastFecha] = useState(\"\")\r\n    const [firstFecha, setFirstFecha] = useState(\"\")\r\n\r\n    // Toggles between for medic/for hospital\r\n    const [viewTipeMedics, setViewTipeMedics] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getLastFechaCierre()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getIngresos()\r\n    }, [lastFecha])\r\n\r\n    function subtractMonths(date, months) { date.setMonth(date.getMonth() - months); return date; }\r\n\r\n    const getLastFechaCierre = async () => {\r\n        await getData(`cortes/${usuario._id}`).then((rs) => {\r\n            setFirstFecha(rs.at(0).fecha_cierre)\r\n            setLastFecha(rs.length > 1 ? rs.at(-1).fecha_cierre : subtractMonths(new Date(), 3))\r\n        })\r\n    }\r\n\r\n    const getIngresos = async () => {\r\n        // First get List of medics\r\n        const medicos = await sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales })\r\n\r\n        medicos.forEach(m => { m.label = m.name; m.value = m._id; })// to pass to create modal\r\n        setMedicosData(medicos) // to pass to create modal and select\r\n\r\n        // const lastFechaCierre = await getData(`cortes/${usuario._id}`).then((rs) => {\r\n        //     setFirstFecha(rs.at(0).fecha_cierre)\r\n        //     setLastFecha(rs.length > 1 ? rs.at(-1).fecha_cierre : subtractMonths(new Date(), 3))\r\n        //     return rs.length > 1 ? rs.at(-1).fecha_cierre : subtractMonths(new Date(), 3)\r\n        // })\r\n\r\n        const ids = medicos.map(doc => {\r\n            return doc._id\r\n        });\r\n\r\n        getBalancesData(ids)\r\n\r\n        // setMedicos(medicos); // Used to get the percents to create the pie chart\r\n    }\r\n\r\n    const getBalancesData = (medicos) => {\r\n        const body = {\r\n            fecha_inicio: lastFecha,\r\n            medico: medicos\r\n        }\r\n        // console.log('Balances body',body)\r\n        sendDataBody('balances', body).then((rs) => {\r\n            console.log('alances', rs)\r\n            rs.forEach((i) => { i.doctor = i.medico; i.medico = i.medico._id; if (i.paciente) { i.usuario = i.paciente; i.paciente = i.paciente._id; } })\r\n            setIngresosData(rs)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const handleEditIngreso = (record) => {\r\n        record.fecha_hora = moment.utc(record.fecha_hora)\r\n        setIngresoForEdit(record);\r\n        showIngresoModal()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Médico',\r\n            dataIndex: 'medico',\r\n            key: 'createdAt',\r\n            render: (_, { doctor }) => { return <>{doctor.name}</> }\r\n        },\r\n        // {\r\n        //     title: 'Concepto',\r\n        //     dataIndex: 'concepto',\r\n        //     key: 'concepto',\r\n        // },\r\n        {\r\n            title: 'Tipo',\r\n            dataIndex: 'tipo',\r\n            key: 'tipo',\r\n            render: (_, { tipo }) => {\r\n                let color = (tipo && tipo === 'ingreso') ? 'geekblue' : 'volcano';\r\n                return tipo ? <Tag color={color} >{tipo.toUpperCase()}</Tag> : <Tag color={color}>Indefinido</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Fecha',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha_hora',\r\n            render: (_, { fecha_hora }) => { return <>{new Date(fecha_hora).toLocaleString()}</> },\r\n            defaultSortOrder: 'descend',\r\n            // sorter: (a, b) => a.fecha_hora > b.fecha_hora,\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => { return <>${monto}</> }\r\n        },\r\n        {\r\n            title: 'Abono',\r\n            dataIndex: 'abono',\r\n            key: 'abono',\r\n            render: (_, { abono }) => { return abono && <>${abono}</> }\r\n        },\r\n        {\r\n            title: 'Adeudo',\r\n            dataIndex: 'adeudo',\r\n            key: 'adeudo',\r\n            render: (_, record) => { return <>${record.monto - record.abono}</> }\r\n\r\n        },\r\n        {\r\n            title: 'Forma de pago',\r\n            key: 'forma_de_pago',\r\n            dataIndex: 'forma_de_pago',\r\n            render: (_, { forma_de_pago }) => {\r\n                let color = forma_de_pago === 'efectivo' ? 'geekblue' : 'green';\r\n                return <Tag color={color} >{forma_de_pago.toUpperCase()}</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Paciente',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, record) => {\r\n                // if (record.cita) return <>{record.cita.usuario}</>\r\n                if (record.cita) return <div style={{ display: 'flex', flexDirection: 'column' }}>{record.cita.usuario.name} <span style={{ fontSize: 9 }}>Tomado de la cita</span></div> //when populate is ready\r\n                else if (record.usuario) return <>{record.usuario.name}</>\r\n                else return <Text type=\"secondary\"> Sin Paciente</Text>\r\n            },\r\n        },\r\n        {\r\n            title: 'Factura',\r\n            key: 'Factura',\r\n            dataIndex: 'factura',\r\n            render: (_, { factura }) => { return factura && <CheckCircleTwoTone /> }\r\n\r\n        },\r\n        {\r\n            title: 'Estado',\r\n            key: 'Estado',\r\n            dataIndex: 'estado',\r\n            // render: (_, { estado }) => {\r\n            //     let color = estado === 'pagado' ? 'green' : 'geekblue';\r\n            //     if (estado === 'pendiente' || estado === 'sin pagar') color = 'volcano';\r\n            //     return <Tag color={color}> {estado.toUpperCase()} </Tag>\r\n            // }\r\n            render: (_, { abono, monto }) => {\r\n                const pagado = abono === monto;\r\n                let color = pagado ? 'green' : 'volcano';\r\n                return <Tag color={color}> {pagado ? 'PAGADO' : 'PENDIENTE'} </Tag>\r\n            }\r\n\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Editar',\r\n            render: (_, record) => <div style={{ display: 'flex', gap: 2, flexDirection: 'column' }}>\r\n                {/* <Button onClick={() => { deleteData(`balances/remove/${record._id}`).then(()=>getIngresos()) }}>Eliminar</Button> */}\r\n                <Button size='small' onClick={() => handleEditIngreso(record)}>Editar Monto</Button>\r\n                <Button size='small' onClick={() => { setIngresoForPrint([record]); showTicketModal() }}>Imprimir Nota</Button>\r\n            </div>\r\n        },\r\n    ];\r\n\r\n    // Toggle View Tipe medic/for all\r\n    const onSwitchChange = (checked) => {\r\n        setViewTipeMedics(checked)\r\n        console.log(`switch to ${checked}`);\r\n        if (!checked) getIngresos()\r\n    };\r\n\r\n    const handleDoctorChange = (value) => { setMedico(value); getBalancesData([value]); };\r\n\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            {/* <div>first fecha cierre {firstFecha} </div>\r\n            <div>last fecha cierre {lastFecha} </div> */}\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', gap: 12, alignItems: 'center' }}>\r\n                <h4>Ingresos de{viewTipeMedics ? 'l médico' : ' todos los medicos'}</h4>\r\n                <Button ghost size='small' onClick={showIngresoModal} type='primary'  >Agregar Nuevo Ingreso</Button>\r\n                <Button ghost size='small' onClick={showEgresoModal} type='primary'  >Agregar Nuevo Gasto</Button>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <div>\r\n                Hospital <Switch onChange={onSwitchChange} /> Medico\r\n                {\r\n                    viewTipeMedics && <Select options={medicosData} onChange={handleDoctorChange} style={{ width: 240, marginLeft: 16 }} placeholder='Seleccione medico' />\r\n                }\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <Table columns={columns} dataSource={ingresosData} size='small' />\r\n\r\n            <PatientsChart ids_medicos={medicosData}/>\r\n\r\n            <IngersosHosptal ids_hospitales={ids_hospitales} />\r\n\r\n            {/* Ingreso */}\r\n            <CreateBalance tipo='ingreso' balanceForEdit={ingresoForEdit} setBalanceForEdit={setIngresoForEdit} setIsModalOpen={setIsIngresoModalOpen} isModalOpen={isIngresoModalOpen} getIngresos={getIngresos} medico={medico} medicosData={medicosData} />\r\n\r\n            {/* Gasto */}\r\n            <CreateBalance tipo='egreso' balanceForEdit={ingresoForEdit} setBalanceForEdit={setIngresoForEdit} setIsModalOpen={setIsEgresoModalOpen} isModalOpen={isEgresoModalOpen} getIngresos={getIngresos} medico={medico} medicosData={medicosData} />\r\n\r\n            <Modal title=\"Imprimir Nota de Venta\" open={isTicketModalOpen} onOk={handleTicketOk} onCancel={handleTicketCancel} width={600}>\r\n                {\r\n                    isLogoSelected ? // Si ya hay logo seleccionado, se pasa a la receta y se muestra en pdf\r\n                        <Ticket ingresos={ingresoForPrint} logo={'https://api.recreamed.com/images/' + logoHospital} hospital={nombreHospital} seller='Médico: ' buyer='Paciente: ' idHospital={idHospital} />\r\n                        :\r\n                        <div>\r\n                            <Card title='Selecciona un hospital' bordered={false}>\r\n                                {\r\n                                    usuario.horarios.map((h) => {\r\n                                        return <Card.Grid style={{ width: '100%' }} onClick={() => { console.log(h.sucursal); setIdHospital(h.sucursal._id); setLogoHospital(h.sucursal.logo); setNombreHospital(h.sucursal.nombre); setIsLogoSelected(true) }} key={h._id}>\r\n                                            <Row align=\"middle\">\r\n                                                <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                                <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                            </Row>\r\n                                        </Card.Grid>\r\n                                    })\r\n                                }\r\n                            </Card>\r\n                        </div>\r\n                }\r\n\r\n            </Modal>\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\main.receptionists.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\main.cortes.jsx",["1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079"],"import { useEffect, useState } from 'react'\r\nimport { Button, Table, Space, Select, Popconfirm, Switch } from 'antd'\r\nimport { getData, sendDataBody, usuario, ids_hospitales } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport Detalles from './details.corte'\r\nimport CreateCorte from './create.corte'\r\n\r\nexport default function Cortes() {\r\n    const [medico, setMedico] = useState(null)\r\n    const [balance, setBalance] = useState({})\r\n    const [cortesData, setCortesData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [medicosData, setMedicosData] = useState([]) // For populate medics select\r\n\r\n    // Toggles between for medic/for hospital\r\n    const [viewTipeMedics, setViewTipeMedics] = useState(true)\r\n\r\n    // Data before all\r\n    const [idsMedicos, setIdsMedicos] = useState([])\r\n\r\n    // For details modal\r\n    const [corteForDetails, setCorteForDetails] = useState({})\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const showModal = (corte) => {\r\n        corte.medico = idsMedicos; // in controller, medics is used for flter balances not cortes   \r\n        setCorteForDetails(corte); setIsModalOpen(true)\r\n    };\r\n\r\n    // For Create Corte Modal\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n    const showCreateModal = () => {\r\n        setIsCreateModalOpen(true);\r\n    };\r\n    const handleCreateOk = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n    const handleCreateCancel = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getDoctorsData()\r\n        getCortesData()\r\n    }, [])\r\n\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador. Is used for filter balances by corte\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            const md = rs.map(doc => {\r\n                return doc._id\r\n            });\r\n            rs.forEach(m => { m.value = m._id; m.label = m.name })\r\n            setMedicosData(rs)\r\n            setIdsMedicos(md)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const getCortesData = () => {\r\n        getData(`cortes/${usuario._id}`).then((rs) => {\r\n            console.log('cortesData', rs)\r\n            setCortesData(rs.reverse())\r\n        }).finally(() => { setLoading(false) })\r\n    }\r\n\r\n    const createCorte = (values) => {\r\n        const newCorte = {\r\n            medico: usuario._id,\r\n            fecha_inicio: cortesData.length === 0 ? new Date() : cortesData.at(0).fecha_cierre,\r\n            ...values\r\n        }\r\n        console.log('ready to send ', newCorte)\r\n        sendDataBody('cortes/add', newCorte).then((rs) => {\r\n            console.log(rs);\r\n            getCortesData()\r\n        })\r\n    }\r\n\r\n    const handleDoctorChange = (value) => { setMedico(value); getCortesData(value); };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'fecha y hora de Inicio',\r\n            dataIndex: 'fecha_inicio',\r\n            key: 'fecha_inicio',\r\n            render: (_, { fecha_inicio }) => <> {new Date(fecha_inicio).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Fecha y hora de Cierre',\r\n            dataIndex: 'fecha_cierre',\r\n            key: 'fecha_cierre',\r\n            render: (_, { fecha_cierre }) => <> {new Date(fecha_cierre).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Comentario',\r\n            dataIndex: 'comentario',\r\n            key: 'comentario',\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Acciones',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={() => { showModal(record) }}>Ver Detalles</Button>\r\n                    {/* <Button onClick={() => console.log(record)}>Editar</Button> */}\r\n                    {/* <Button onClick={() => deleteData(`cortes/remove/${record._id}`)}>Eliminar</Button> */}\r\n                </Space>)\r\n        }\r\n    ];\r\n\r\n    const onChange = (checked) => {\r\n        console.log(`switch to ${checked}`);\r\n        setViewTipeMedics(checked);\r\n    };\r\n\r\n\r\n    return <div className='mainContainer'>\r\n\r\n        <h4>Cortes de cada Medico</h4>\r\n        <br />\r\n        {/* <p className='datos'>Selecciona un medico a continuacion para ver sus cortes</p> */}\r\n\r\n        {/* <Select options={medicosData} onChange={handleDoctorChange} style={{ width: 240 }} placeholder='Seleccione medico' /> */}\r\n\r\n        {/* <Popconfirm\r\n            placement='bottomRight'\r\n            title=\"Crear Corte\"\r\n            description=\"Seguro que quere generar un corte de caja a la fecha y hora actuales?\"\r\n            onConfirm={createCorte}\r\n            onCancel={() => console.log('Cancelled corte')}\r\n            okText=\"Si\"\r\n            cancelText=\"No\"\r\n        >\r\n\r\n            <Button type='primary' style={{ marginLeft: 12 }}>{cortesData.length === 0 ? 'Generar Primer Corte' : 'Generar Corte'}</Button>\r\n        </Popconfirm> */}\r\n\r\n        <Button onClick={showCreateModal} type='primary' style={{ marginLeft: 12 }}>Generar corte</Button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Table columns={columns} dataSource={cortesData} />\r\n\r\n        <div style={{ height: 200 }}></div>\r\n        {/* {\r\n            !medico ? <div>Seleccione un medico para ver sus cortes</div>\r\n                :\r\n                <div>\r\n                    <div className='fila'>\r\n                        <h4>Cortes</h4>\r\n                        <Button onClick={createCorte} type='primary' style={{ marginLeft: 12 }}>{cortesData.length === 0 ? 'Generar Primer Corte' : 'Generar Corte'}</Button>\r\n                    </div>\r\n                    <br />\r\n                    <Table columns={columns} dataSource={cortesData} />\r\n                </div>\r\n        } */}\r\n\r\n        <Detalles corte={corteForDetails} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} />\r\n\r\n        <CreateCorte isModalOpen={isCreateModalOpen} handleOk={handleCreateOk} handleCancel={handleCreateCancel} onFinish={createCorte} />\r\n\r\n    </div>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\main.enfermeros.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\home\\home.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorEncuesta.jsx",["1080","1081"],"import React, { useState, useEffect } from 'react'\r\nimport { dolor_catalog, initialDolorValues } from './dolor_catalog';\r\nimport { Form, Input, Button, Slider, Checkbox, Radio, message, Row } from 'antd';\r\nimport { getData, sendDataBody } from '../../resources';\r\nimport logo from \"../../assets/Logo.png\";\r\nimport head from '../../assets/head.jpg';\r\n\r\nexport default function DolorEncuesta(props) {\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            respuestas_dolor: values,\r\n            tipo: 'dolor',\r\n            uuid: props.token\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('init', initialDolorValues)\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const onChange = (checkedValues) => {\r\n        console.log('checked = ', checkedValues);\r\n    };\r\n\r\n    const marks = { 0: '0', 10: '10' };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta de Dolor</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <Form\r\n                layout='vertical'\r\n                name=\"dolor_esc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={initialDolorValues}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n\r\n\r\n                <Form.Item\r\n                    key={1}\r\n                    label='1. Indique en el diagrama las zonas donde siente dolor sombreando la parte afectada. Marque una cruz en la zona que más le duele.'\r\n                    name={1}\r\n                    rules={[{ required: true, message: 'Conteste correctamente' }]}\r\n                >\r\n                    {/* <Checkbox.Group options={['Delante Derecha', 'Delante Izquierda', 'Detras Derecha', 'Detras Izquierda']} defaultValue={['Apple']} onChange={onChange} /> */}\r\n                    <Checkbox.Group\r\n                        style={{\r\n                            width: '100%',\r\n                        }}\r\n                        onChange={onChange}\r\n                    >\r\n                        <Row>\r\n                            <div className='columna'>\r\n                                <br />\r\n                                <br />\r\n                                <Checkbox value=\"Delante Izquierda\">Delante Izquierda</Checkbox>\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                                <Checkbox value=\"Detras Izquierda\">Detras Izquierda</Checkbox>\r\n                            </div>\r\n                            <div>\r\n                                <img\r\n                                    src={head}\r\n                                    width=\"140\"\r\n                                    height=\"160\"\r\n                                    // className=\"d-inline-block align-top\"\r\n                                    alt=\"Head diagram\"\r\n                                />\r\n                            </div>\r\n                            <div className='columna'>\r\n                                <br />\r\n                                <br />\r\n                                <Checkbox value=\"Delante Derecha\">Delante Derecha</Checkbox>\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                                <Checkbox value=\"Detras Derecha\">Detras Derecha</Checkbox>\r\n                            </div>\r\n                        </Row>\r\n                    </Checkbox.Group>\r\n                </Form.Item>\r\n\r\n                {\r\n                    dolor_catalog.map((p) => {\r\n                        let input;\r\n                        switch (p.tipo) {\r\n                            case 'metrica':\r\n                                input = <Slider defaultValue={0} min={0} max={10} marks={marks} />\r\n                                break;\r\n                            case 'multiple':\r\n                                input = <Checkbox.Group options={p.respuestas} defaultValue={['Apple']} onChange={onChange} />\r\n                                break;\r\n                            case 'seleccion':\r\n                                input = <Radio.Group>\r\n                                    {p.respuestas.map((r, i) => { return <Radio value={i}>{r}</Radio> })}\r\n                                </Radio.Group>;\r\n                                break;\r\n                            case 'texto':\r\n                                input = < Input />;\r\n                                break;\r\n                            default:\r\n                                input = < Input />;\r\n                        }\r\n\r\n                        return p.tipo !== 'titulo' ? <Form.Item\r\n                            key={p.n}\r\n                            label={p.pregunta}\r\n                            name={p.n}\r\n                            rules={[{ required: true, message: 'Conteste correctamente' }]}\r\n                        >\r\n                            {input}\r\n                        </Form.Item> : <h5>{`${p.n}.  ${p.pregunta}`}</h5>\r\n                    })\r\n                }\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='dolor_esc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaEncuesta.jsx",["1082","1083"],"import React, { useState, useEffect } from 'react'\r\nimport { catalogo_efectos, desrealizacion, despersonalizacion, amnesia } from './ketamina_catalog'\r\nimport { Form, Switch, Button, Radio, Space, Slider, Select, message } from 'antd'\r\nimport { getData, sendDataBody } from '../../resources';\r\nimport logo from \"../../assets/Logo.png\";\r\nconst { Option } = Select;\r\n\r\nexport default function KetaminaEncuesta(props) {\r\n  // For check if the encuesta existts on db\r\n  const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n  const [checking, setChecking] = useState(true)\r\n  const [pacienteData, setPacienteData] = useState({})\r\n  const [medicoData, setMedicoData] = useState({})\r\n\r\n  useEffect(() => {\r\n    checkEncuesta()\r\n  }, [])\r\n\r\n  const checkEncuesta = () => {\r\n\r\n    getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n    getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n    getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n      console.log(rs);\r\n      setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n    }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n\r\n    Object.keys(values).forEach((k) => {\r\n      const nk = k.replace(/ /g, \"_\")\r\n      values[nk] = values[k];\r\n      if (k.includes(' ')) delete values[k];\r\n    })\r\n\r\n    const body = {\r\n      usuario: props.idpaciente,\r\n      medico: props.idmedico,\r\n      respuestas_ketamina: values,\r\n      tipo: 'ketamina',\r\n      uuid: props.token\r\n    }\r\n\r\n    console.log('Efectos Form:', values);\r\n    sendDataBody('encuestas/add', body).then((rs) => {\r\n      console.log(rs)\r\n      message.success(rs.message)\r\n    }).then(() => checkEncuesta())\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  const marks = { 0: '0', 10: '10' };\r\n\r\n  if (checking) return <div style={{ paddingTop: 180 }}>\r\n    <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n      <h3 >Cargando</h3>\r\n    </div>\r\n  </div>\r\n\r\n  if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n    <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n      <h3 >Gracias por contestar la encuesta</h3>\r\n      <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n    </div>\r\n  </div>\r\n\r\n  return (\r\n    <div className='mainContainer'>\r\n      <h4>Lista de verificación para Efectos Secundarios de Ketamina</h4>\r\n      <br />\r\n      <h5>Medico: {medicoData.name}</h5>\r\n      <h5>Paciente: {pacienteData.name}</h5>\r\n      <br />\r\n      <Form\r\n        layout='vertical'\r\n        name=\"efectos_form\"\r\n        // labelCol={{ span: 8 }}\r\n        // wrapperCol={{ span: 16 }}\r\n        initialValues={{ ...catalogo_efectos, ketamina: 0, ketaminaiv: 0, ketaminaivb: 0 }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        autoComplete=\"off\"\r\n      >\r\n\r\n        {\r\n          Object.keys(catalogo_efectos).map((efk, i) => {\r\n            return <Form.Item\r\n              label={efk}\r\n              name={efk}\r\n              rules={[{ required: false, message: 'Selecciona una respuesta' }]}\r\n            >\r\n              <Switch checkedChildren=\"Si\" unCheckedChildren=\"No\" defaultChecked={false} />\r\n            </Form.Item>\r\n          })\r\n        }\r\n        <h4>Escala de 6 elementos simplificada de síntomas disociativos administrada por el médico  (CADSS)</h4>\r\n\r\n        <h5>Desrealizacion</h5>\r\n        {\r\n          Object.keys(desrealizacion).map((pr, index) => {\r\n            return <Form.Item\r\n              label={pr}\r\n              name={'desrealizacion_' + index}\r\n              rules={[{ required: true, message: 'Selecciona una respuesta' }]}\r\n            >\r\n              <Radio.Group>\r\n                <Space direction=\"vertical\">\r\n                  {\r\n                    desrealizacion[pr].map((rs, i) => <Radio value={i}>{rs}</Radio>)\r\n                  }\r\n                </Space>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          })\r\n        }\r\n\r\n\r\n        <h5>Despersonalizacion</h5>\r\n        {\r\n          Object.keys(despersonalizacion).map((pr, index) => {\r\n            return <Form.Item\r\n              label={pr}\r\n              name={'despersonalizacion_' + index}\r\n              rules={[{ required: true, message: 'Selecciona una respuesta' }]}\r\n            >\r\n              <Radio.Group>\r\n                <Space direction=\"vertical\">\r\n                  {\r\n                    despersonalizacion[pr].map((rs, i) => <Radio value={i}>{rs}</Radio>)\r\n                  }\r\n                </Space>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          })\r\n        }\r\n\r\n        <h5>Amnesia</h5>\r\n        {\r\n          Object.keys(amnesia).map((pr, i) => {\r\n            return <Form.Item\r\n              label={pr}\r\n              name={'amnesia_' + i}\r\n              rules={[{ required: true, message: 'Selecciona una respuesta' }]}\r\n            >\r\n              <Radio.Group>\r\n                <Space direction=\"vertical\">\r\n                  {\r\n                    amnesia[pr].map((rs, i) => <Radio value={i}>{rs}</Radio>)\r\n                  }\r\n                </Space>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          })\r\n        }\r\n\r\n        <Form.Item\r\n          label=\"a)\tEn general mi gusto por la ketamina IV es:\"\r\n          name=\"ketamina\"\r\n\r\n        // rules={[{ required: true, message: 'Selecciona una opcion' }]}\r\n        >\r\n          <Slider min={0} max={10} marks={marks} dots defaultValue={0} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"a.)\tEn general, cuánto anhela, apetece el tratamiento de la ketamina IV para otros efectos además de los efectos antidepresivos? \"\r\n          name=\"ketaminaiv\"\r\n        // rules={[{ required: true, message: 'Selecciona una opcion' }]}\r\n        >\r\n          <Slider min={0} max={10} marks={marks} dots defaultValue='0' />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"b.)\tCuánto desea usar la ketamina IV en cantidades mayores con más frecuencia de lo que su psiquiatra le esta prescribiendo por razones distintas a esperar más efecto antidepresivo?  \"\r\n          name=\"ketaminaivb\"\r\n        // rules={[{ required: true, message: 'Selecciona una opcion' }]}\r\n        >\r\n          <Slider min={0} max={10} marks={marks} dots />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          wrapperCol={{\r\n            offset: 8,\r\n            span: 16,\r\n          }}\r\n        >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Enviar respuestas\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionEncuesta.jsx",["1084","1085"],"import React, { useState, useEffect } from 'react'\r\nimport { satisfaccion_catalog } from './satisfaccion_catalog';\r\nimport { Form, Input, Button, Slider, Checkbox, Radio, message } from 'antd';\r\nimport { getData, sendDataBody } from '../../resources';\r\nimport logo from \"../../assets/Logo.png\";\r\n\r\nexport default function SatisfaccionEncuesta(props) {\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            encuesta_satisfaccion: values,\r\n            tipo: 'satisfaccion',\r\n            uuid: props.token,\r\n            cat: [props.protocolo, props.momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const onChange = (checkedValues) => {\r\n        console.log('checked = ', checkedValues);\r\n    };\r\n\r\n    const marks = { 0: '0', 10: '10' };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta de Satisfaccion</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <Form\r\n                layout='vertical'\r\n                name=\"basic\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                // initialValues={initialDolorValues}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                {\r\n                    satisfaccion_catalog.map((p) => {\r\n                        let input;\r\n                        switch (p.tipo) {\r\n                            case 'radioButton':\r\n                                input = <Radio.Group onChange={onChange} defaultValue=\"a\">\r\n                                    {p.respuestas.map((r, i) => { return <Radio.Button value={i}>{r}</Radio.Button> })}\r\n                                </Radio.Group>\r\n                                break;\r\n                            case 'metrica':\r\n                                input = <Slider defaultValue={0} min={0} max={10} marks={marks} />\r\n                                break;\r\n                            case 'multiple':\r\n                                input = <Checkbox.Group options={p.respuestas} defaultValue={['Apple']} onChange={onChange} />\r\n                                break;\r\n                            case 'seleccion':\r\n                                input = <Radio.Group>\r\n                                    {p.respuestas.map((r, i) => { return <Radio value={i === 0 ? false : true}>{r}</Radio> })}\r\n                                </Radio.Group>;\r\n                                break;\r\n                            case 'texto':\r\n                                input = < Input />;\r\n                                break;\r\n                            default:\r\n                                input = < Input />;\r\n                        }\r\n\r\n                        return p.tipo !== 'titulo' ? <Form.Item\r\n                            key={p.n}\r\n                            label={p.pregunta}\r\n                            name={p.n}\r\n                            rules={[{ required: true, message: 'Conteste correctamente' }]}\r\n                        >\r\n                            {input}\r\n                        </Form.Item> : <h5>{`${p.n}.  ${p.pregunta}`}</h5>\r\n                    })\r\n                }\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_encuesta.jsx",["1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Switch, Button, Radio, Space, Row, Col, Select, message, Divider } from 'antd'\r\nimport { Card } from 'react-bootstrap'\r\nimport { getData, sendDataBody } from '../../../resources';\r\nimport logo from \"../../../assets/Logo.png\";\r\nimport { depresion2_catalog, catalog2, catalog3, preg10 } from './depresion2_catalog'\r\nconst { Option } = Select;\r\n\r\nexport default function Depresion2Encuesta(props) {\r\n    const [pesoEnabled, setPesoEnabled] = useState(false)\r\n    const [apetitoEnabled, setApetitoEnabled] = useState(false)\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        let primeros = 0, segundos = 0, terceros = 0;\r\n        console.log('Sintomatologia gpc:', values);\r\n\r\n        for (let i = 1; i < 17; i++) { primeros += values[i] }\r\n\r\n        for (let i = 1; i < 11; i++) {\r\n            const pos = `2_${i}`\r\n            segundos += values[pos]\r\n        }\r\n        for (let i = 1; i < 10; i++) {\r\n            const pos = `3_${i}`\r\n            terceros += values[pos]\r\n        }\r\n\r\n\r\n        const respuestas = {\r\n            hrsd: primeros,\r\n            madrs: segundos,\r\n            phq: terceros\r\n        }\r\n\r\n\r\n        console.log('repuestas: ', respuestas);\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            respuestas_depresion2_gpc: respuestas,\r\n            tipo: 'depresion_gpc',\r\n            uuid: props.token\r\n        }\r\n\r\n        console.log('Efectos body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n          console.log(rs)\r\n          message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const handleChange = (value) => {\r\n        // console.log(`selected ${value}`);\r\n    };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n\r\n    // Depreison GPC\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta de las versiones validadas en español de las escalas HRSD, MADRS y PHQ-9</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                name=\"basic\"\r\n                layout='vertical'\r\n                // labelCol={{ span: 8 }}\r\n                // wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <h4>Versión validada en español de la HRSD1</h4>\r\n\r\n                {\r\n                    depresion2_catalog.map((p) => {\r\n                        return <Form.Item\r\n                            key={p.n}\r\n                            label={p.pregunta}\r\n                            name={p.n}\r\n                            rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                        >\r\n                            <Radio.Group>\r\n                                <Space direction=\"vertical\">\r\n                                    {\r\n                                        p.respuestas.map((r, i) => <Radio value={i}> {r} </Radio>)\r\n                                    }\r\n                                </Space>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    })\r\n                }\r\n                <h4>Versión validada en español de la escala Montgomery-Asberg Depression Rating Scale (MADRS)1</h4>\r\n                {\r\n                    catalog2.map((p) => {\r\n                        return <Form.Item\r\n                            key={p.n}\r\n                            label={p.pregunta}\r\n                            name={'2_' + p.n}\r\n                            rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                        >\r\n                            <Radio.Group>\r\n                                <Space direction=\"vertical\">\r\n                                    {\r\n                                        p.respuestas.map((r, i) => <Radio value={i}> {r} </Radio>)\r\n                                    }\r\n                                </Space>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    })\r\n                }\r\n                <h4>Cuestionario sobre la Salud del Paciente (PHQ-9)108 ©1999 Pfizer Inc.</h4>\r\n                <h5>Durante  las  últimas  2  semanas,  ¿con  qué  frecuencia  le  han  molestado  cada  uno  de  los  siguientes problemas?</h5>\r\n                {\r\n                    catalog3.map((p, i) => {\r\n                        return <Form.Item\r\n                            key={i}\r\n                            label={p}\r\n                            name={'3_' + (i + 1)}\r\n                            rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                        >\r\n                            <Radio.Group>\r\n                                <Space direction=\"vertical\">\r\n                                    <Radio value={0}> Nunca </Radio>\r\n                                    <Radio value={1}> Varios Dias </Radio>\r\n                                    <Radio value={2}> Más de la mitad de los días </Radio>\r\n                                    <Radio value={3}> Todos o casi todos los días </Radio>\r\n                                </Space>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    })\r\n                }\r\n\r\n                <Form.Item\r\n                    label={preg10}\r\n                    name='4_1'\r\n                    rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                >\r\n                    <Radio.Group>\r\n                        <Space direction=\"vertical\">\r\n                            <Radio value=\"0\"> Nada en absoluto </Radio>\r\n                            <Radio value=\"1\"> Algo difícil </Radio>\r\n                            <Radio value=\"2\"> Muy difícil </Radio>\r\n                            <Radio value=\"3\"> Extremadamente difícil </Radio>\r\n                        </Space>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{ offset: 8, span: 16 }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                    Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresionEncuesta.jsx",["1099","1100","1101","1102","1103","1104","1105"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Switch, Button, Radio, Space, Row, Col, Select, message, Divider } from 'antd'\r\nimport { depresion_catalog, depresion_catalog2, disminucion_apetito, perdida_peso, aumento_apetito, aumento_peso } from './depresion_catalog'\r\nimport { Card } from 'react-bootstrap'\r\nimport { getData, sendDataBody } from '../../../resources';\r\nimport logo from \"../../../assets/Logo.png\";\r\n\r\nexport default function DepresionEncuesta(props) {\r\n\r\n\r\n  const [pesoEnabled, setPesoEnabled] = useState(false)\r\n  const [apetitoEnabled, setApetitoEnabled] = useState(false)\r\n  // For check if the encuesta existts on db\r\n  const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n  const [checking, setChecking] = useState(true)\r\n  const [pacienteData, setPacienteData] = useState({})\r\n  const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    checkEncuesta()\r\n  }, [])\r\n\r\n  const checkEncuesta = () => {\r\n\r\n    getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n    getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n    getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n      console.log(rs);\r\n      setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n    }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n  }\r\n\r\n  const onFinish = (values) => {\r\n    let _score = 0;\r\n    let high1_4 = 0;\r\n    let high6_9 = 0;\r\n    console.log('Sintomatologia:', values);\r\n    // El mayor de la 1 a la 4\r\n    for (var i = 1; i < 5; i++) {\r\n      if (values[i] > high1_4) high1_4 = values[i]\r\n    }\r\n    // El mayor de la 6 a la 9\r\n    for (var i = 6; i < 10; i++) {\r\n      if (values[i] > high6_9) high6_9 = values[i]\r\n    }\r\n    // console.log('6-9', high6_9)\r\n    // Suma de la 10 a la 14\r\n    for (var i = 10; i < 15; i++) {\r\n      _score += values[i]\r\n    }\r\n    // Suma el mayor enre 15 y 16 y sumarlo\r\n    values[15] > values[16] ? _score += values[15] : _score += values[16];\r\n\r\n    // Sumar la 5 y el resto\r\n    _score = _score + high1_4 + values[5] + high6_9;\r\n\r\n    console.log('score: ', _score);\r\n    const body = {\r\n      usuario: props.idpaciente,\r\n      medico: props.idmedico,\r\n      score: _score,\r\n      tipo: 'depresion',\r\n      uuid: props.token\r\n    }\r\n\r\n    console.log('Efectos body:', body);\r\n    sendDataBody('encuestas/add', body).then((rs) => {\r\n      console.log(rs)\r\n      message.success(rs.message)\r\n    }).then(() => checkEncuesta())\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n    errorInfo.errorFields.map((p) => {\r\n      message.error('Conteste la pregunta ' + p.name)\r\n    })\r\n  };\r\n  const handleChange = (value) => {\r\n    // console.log(`selected ${value}`);\r\n  };\r\n\r\n  // Loading state\r\n  if (checking) return <div style={{ paddingTop: 180 }}>\r\n    <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n      <h3 >Cargando</h3>\r\n    </div>\r\n  </div>\r\n\r\n  if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n    <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n      <h3 >Gracias por contestar la encuesta</h3>\r\n      <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n    </div>\r\n  </div>\r\n\r\n  return (\r\n    <div className='mainContainer'>\r\n      <h4>Encuesta de sintomatologia depresiva QUIDS (QUICK INVENTORY OF DEPRESSIVE SYMPTOMATOLOGY)</h4>\r\n      <br />\r\n      <h5>Medico: {medicoData.name}</h5>\r\n      <h5>Paciente: {pacienteData.name}</h5>\r\n      <br />\r\n\r\n      <Form\r\n        name=\"basic\"\r\n        layout='vertical'\r\n        // labelCol={{ span: 8 }}\r\n        // wrapperCol={{ span: 16 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        autoComplete=\"off\"\r\n      >\r\n\r\n\r\n        {\r\n          depresion_catalog.map((p) => {\r\n            return <Form.Item\r\n              label={p.n + '. ' + p.pregunta}\r\n              name={p.n}\r\n              rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n            >\r\n              <Radio.Group>\r\n                <Space direction=\"vertical\">\r\n                  {\r\n                    p.respuestas.map((r, i) => <Radio value={i}> {r} </Radio>)\r\n                  }\r\n                </Space>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          })\r\n        }\r\n\r\n        {/*Apetito*/}\r\n        <Card>\r\n          <Form.Item\r\n          // wrapperCol={{ offset: 8, span: 16 }} \r\n          >\r\n            Disminucion apetito <Switch onChange={() => setApetitoEnabled(!apetitoEnabled)} /> Aumento Apetito\r\n          </Form.Item>\r\n          <Row>\r\n            <Col md={10}>\r\n              <Form.Item\r\n                label='Disminucion Apetito'\r\n                name='6'\r\n                rules={[{ required: !apetitoEnabled, message: `Selecciona una opcion` }]}\r\n              >\r\n                <Radio.Group disabled={apetitoEnabled}>\r\n                  <Space direction=\"vertical\">\r\n                    {\r\n                      disminucion_apetito.map((s, i) => <Radio value={i}> {s} </Radio>)\r\n                    }\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Form.Item\r\n                label='Aumento Apetito'\r\n                name='6'\r\n                rules={[{ required: apetitoEnabled, message: `Selecciona una opcion` }]}\r\n              >\r\n\r\n                <Radio.Group disabled={!apetitoEnabled}>\r\n                  <Space direction=\"vertical\">\r\n                    {\r\n                      aumento_apetito.map((s, i) => <Radio value={i}> {s} </Radio>)\r\n                    }\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n\r\n\r\n\r\n        {/* Peso */}\r\n        <Card>\r\n          <Form.Item\r\n          // wrapperCol={{ offset: 8, span: 16 }} \r\n          >\r\n            Disminucion de Peso <Switch onChange={() => setPesoEnabled(!pesoEnabled)} /> Aumento de Peso\r\n          </Form.Item>\r\n          <Row>\r\n            <Col md={10}>\r\n              <Form.Item\r\n                label='Perdida de Peso'\r\n                name='8'\r\n                rules={[{ required: !pesoEnabled, message: `Selecciona una opcion` }]}\r\n              >\r\n                <Radio.Group disabled={pesoEnabled}>\r\n                  <Space direction=\"vertical\">\r\n                    {\r\n                      perdida_peso.map((s, i) => <Radio value={i}> {s} </Radio>)\r\n                    }\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Form.Item\r\n                label='Aumento Peso'\r\n                name='8'\r\n                rules={[{ required: pesoEnabled, message: `Selecciona una opcion` }]}\r\n              >\r\n\r\n                <Radio.Group disabled={!pesoEnabled}>\r\n                  <Space direction=\"vertical\">\r\n                    {\r\n                      aumento_peso.map((s, i) => <Radio value={i}> {s} </Radio>)\r\n                    }\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n\r\n        <br />\r\n\r\n        {\r\n          depresion_catalog2.map((p) => {\r\n            return <Form.Item\r\n              label={p.n + '. ' + p.pregunta}\r\n              name={p.n}\r\n              rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n            >\r\n              <Radio.Group>\r\n                <Space direction=\"vertical\">\r\n                  {\r\n                    p.respuestas.map((r, i) => <Radio value={i}> {r} </Radio>)\r\n                  }\r\n                </Space>\r\n              </Radio.Group>\r\n            </Form.Item>\r\n          })\r\n        }\r\n\r\n\r\n\r\n        <Form.Item\r\n          wrapperCol={{ offset: 8, span: 16 }}\r\n        >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n          Enviar respuestas\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_encuesta.jsx",["1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Switch, Button, Radio, Space, Row, Col, Select, message, Input } from 'antd'\r\nimport { Card } from 'antd'\r\nimport { getData, sendDataBody } from '../../../resources';\r\nimport logo from \"../../../assets/Logo.png\";\r\nimport { post_catalog } from './p_t_catalog'\r\nconst { Option } = Select;\r\n\r\nexport default function PostTraumaticoEncuesta(props) {\r\n    const [pesoEnabled, setPesoEnabled] = useState(false)\r\n    const [apetitoEnabled, setApetitoEnabled] = useState(false)\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        // console.log('OriginalsF: ', values);\r\n        Object.keys(values).map(k => {\r\n            // values[k] = Object.values(values[k]);\r\n            let newArr = [];\r\n            Object.values(values[k]).forEach(str => {\r\n                newArr.push(Number(str));\r\n            })\r\n            values[k] = newArr;\r\n        }\r\n        )\r\n        console.log('Values: ', values);\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            respuestas_ept1_davidson: values,\r\n            tipo: 'post_traumatico',\r\n            uuid: props.token\r\n        }\r\n\r\n        console.log('Post Traum Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n          console.log(rs)\r\n          message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const handleChange = (value) => {\r\n        // console.log(`selected ${value}`);\r\n    };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>La Evaluación Del Trastorno Por Estrés Postraumático: Aproximación A Las Propiedades Psicométricas De La Escala De Trauma De Davidson</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                name=\"basic\"\r\n                layout='vertical'\r\n                // labelCol={{ span: 8 }}\r\n                // wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n\r\n                {\r\n                    post_catalog.map((p, i) => {\r\n                        return <Form.Item label={p}>\r\n                            <Input.Group compact>\r\n                                <Form.Item\r\n                                    label='Frecuencia'\r\n                                    name={[i + 1, 'Frecuencia']}\r\n                                    noStyle\r\n                                    rules={[{ required: true, message: 'Selecciona Frecuencia' },\r\n                                    ]}\r\n                                >\r\n                                    <Space direction=\"vertical\">\r\n                                        <Card style={{ padding: 6 }}>\r\n                                            <p style={{ color: \"#5fa1c4\" }}>Frecuencia: </p>\r\n                                            <Radio.Group>\r\n                                                <Space direction=\"vertical\">\r\n                                                    <Radio value={0}> Nunca </Radio>\r\n                                                    <Radio value={1}> A Veces </Radio>\r\n                                                    <Radio value={2}> 2-3 Veces </Radio>\r\n                                                    <Radio value={3}> 4-6 Veces </Radio>\r\n                                                    <Radio value={4}> A diario </Radio>\r\n                                                </Space>\r\n                                            </Radio.Group>\r\n                                        </Card>\r\n                                    </Space>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label='Gravedad'\r\n                                    name={[i + 1, 'Gravedad']}\r\n                                    noStyle\r\n                                    rules={[{ required: true, message: 'Selecciona Gravedad' }]}\r\n                                >\r\n                                    <Space direction=\"vertical\">\r\n                                        <Card style={{ padding: 6 }}>\r\n                                            <p style={{ color: \"#5fa1c4\" }}>Gravedad: </p>\r\n                                            <Radio.Group >\r\n                                                <Space direction=\"vertical\">\r\n                                                    <Radio value={0}> Nada </Radio>\r\n                                                    <Radio value={1}> Leve </Radio>\r\n                                                    <Radio value={2}> Moderada </Radio>\r\n                                                    <Radio value={3}> Marcada </Radio>\r\n                                                    <Radio value={4}> Extrema </Radio>\r\n                                                </Space>\r\n                                            </Radio.Group>\r\n                                        </Card>\r\n                                    </Space>\r\n                                </Form.Item>\r\n                            </Input.Group>\r\n                        </Form.Item>\r\n                    })\r\n                }\r\n\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{ offset: 8, span: 16 }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                    Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_encuesta.jsx",["1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Switch, Button, Radio, Space, Row, Col, Select, message, Divider } from 'antd'\r\nimport { getData, sendDataBody } from '../../../resources';\r\nimport logo from \"../../../assets/Logo.png\";\r\nimport { catalog_ept_mexicana } from './p_t_mexicana_catalog';\r\n\r\nexport default function PTMexicanaEncuesta(props) {\r\n\r\n    const [pesoEnabled, setPesoEnabled] = useState(false)\r\n    const [apetitoEnabled, setApetitoEnabled] = useState(false)\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n\r\n        console.log('vals depres MX: ', values);\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            respuestas_ept_3mx: values,\r\n            tipo: 'post_traumatico_mx',\r\n            uuid: props.token\r\n        }\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log(rs)\r\n            message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const handleChange = (value) => {\r\n        // console.log(`selected ${value}`);\r\n    };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Validación mexicana de la Escala de Estrés Traumático Secundario  </h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                name=\"p_t_mx\"\r\n                layout='vertical'\r\n                // labelCol={{ span: 8 }}\r\n                // wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    catalog_ept_mexicana.map((p, i) => {\r\n                        return <Form.Item\r\n                            key={i}\r\n                            label={p}\r\n                            name={i + 1}\r\n                            rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                        >\r\n                            <Radio.Group>\r\n                                <Space direction=\"vertical\">\r\n                                    <Radio value={1}>Totalmente en desacuerdo.</Radio>\r\n                                    <Radio value={2}>En desacuerdo. </Radio>\r\n                                    <Radio value={3}>De acuerdo. </Radio>\r\n                                    <Radio value={4}>Totalmente de acuerdo. </Radio>\r\n                                </Space>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n                    })\r\n                }\r\n\r\n                <br />\r\n\r\n                <Form.Item\r\n                    wrapperCol={{ offset: 8, span: 16 }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_encuesta.jsx",["1130","1131","1132","1133","1134","1135","1136","1137","1138","1139"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Switch, Button, Radio, Space, Row, Col, Select, message, Input } from 'antd'\r\nimport { Card } from 'antd'\r\nimport { getData, sendDataBody } from '../../../resources';\r\nimport { p_t_clinico_catalog } from './p_t_clinico_catalog'\r\nimport logo from \"../../../assets/Logo.png\";\r\nconst { TextArea } = Input;\r\nexport default function PTClinicoEncuesta(props) {\r\n    const [pesoEnabled, setPesoEnabled] = useState(false)\r\n    const [apetitoEnabled, setApetitoEnabled] = useState(false)\r\n    // For check if the encuesta existts on db\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        checkEncuesta()\r\n    }, [])\r\n\r\n    const checkEncuesta = () => {\r\n\r\n        getData('getuser/' + props.idpaciente).then((rs) => { setPacienteData(rs) })\r\n        getData('getuser/' + props.idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n        getData(`encuestas/uuid/${props.token}`).then(rs => {\r\n            console.log(rs);\r\n            setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n        }).then(() => { setChecking(false); console.log('Not exists: ', encuestaNotExists); })\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n\r\n\r\n        console.log('Vals EPTClinic: ', values);\r\n        const body = {\r\n            usuario: props.idpaciente,\r\n            medico: props.idmedico,\r\n            score: values,\r\n            tipo: 'depresion',\r\n            uuid: props.token\r\n        }\r\n\r\n        console.log('Efectos body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log(rs)\r\n            message.success(rs.message)\r\n        }).then(() => checkEncuesta())\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n        errorInfo.errorFields.map((p) => {\r\n            message.error('Conteste la pregunta ' + p.name)\r\n        })\r\n    };\r\n    const handleChange = (value) => {\r\n        // console.log(`selected ${value}`);\r\n    };\r\n\r\n    // Loading state\r\n    if (checking) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Cargando</h3>\r\n        </div>\r\n    </div>\r\n\r\n    if (!encuestaNotExists) return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n\r\n    const Radios = (props) => {\r\n        const l = props.letra;\r\n        const n = props.numero;\r\n        return <div>\r\n\r\n            <h6>A(1)</h6>\r\n\r\n            <Form.Item label='¿Amenaza vital?' name={`Ac${n}_A1_1`} rules={[{ required: true, message: `Selecciona una opcion` }]} >\r\n                <Radio.Group name={props.nombre} key={props.nombre} >\r\n                    <Radio value=\"No\">No</Radio>\r\n                    <Radio value=\"Si\">Si</Radio>\r\n                    <Radio value=\"Sujeto\">Sujeto</Radio>\r\n                    <Radio value=\"Otro\">Otro</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item label='¿Lesion Grave?' name={`Ac${n}_A1_2`} rules={[{ required: true, message: `Selecciona una opcion` }]} >\r\n                <Radio.Group name={props.nombre} key={props.nombre} >\r\n                    <Radio value=\"No\">No</Radio>\r\n                    <Radio value=\"Si\">Si</Radio>\r\n                    <Radio value=\"Sujeto\">Sujeto</Radio>\r\n                    <Radio value=\"Otro\">Otro</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item label='¿Amenaza de la integridad física?' name={`Ac${props.n}_A2`} rules={[{ required: true, message: `Selecciona una opcion` }]} >\r\n                <Radio.Group name={props.nombre} key={props.nombre} >\r\n                    <Radio value=\"No\">No</Radio>\r\n                    <Radio value=\"Si\">Si</Radio>\r\n                    <Radio value=\"Sujeto\">Sujeto</Radio>\r\n                    <Radio value=\"Otro\">Otro</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <h6>{l}(2)</h6>\r\n            <Form.Item label='¿Miedo intenso/indefensión/horror?' name={`Ac${props.n}_CritA`} rules={[{ required: true, message: `Selecciona una opcion` }]} >\r\n                <Radio.Group name={props.nombre} key={props.nombre} >\r\n                    <Radio value=\"No\">No</Radio>\r\n                    <Radio value=\"Si\">Si</Radio>\r\n                    <Radio value=\"Durante\">Durante</Radio>\r\n                    <Radio value=\"Despues\">Despues</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <h6>Criterio A</h6>\r\n            <Form.Item label='¿Se cumple?' name={`Ac${props.n}_A1_3`} rules={[{ required: true, message: `Selecciona una opcion` }]} >\r\n                <Radio.Group name={props.nombre} key={props.nombre} >\r\n                    <Radio value=\"No\">No</Radio>\r\n                    <Radio value=\"Probable\">Probable</Radio>\r\n                    <Radio value=\"Si\">Si</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n        </div>\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Escala para el Trastorno por Estrés Postraumático Administradapor el Clínico (Clinician Administered PTSD Scale, CAPS)</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                name=\"basic\"\r\n                layout='vertical'\r\n                // labelCol={{ span: 8 }}\r\n                // wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    p_t_clinico_catalog.map((p) => {\r\n                        return <div>\r\n\r\n                            <h5>{p.n}</h5>\r\n                            <Row>\r\n                                <Col span={12} style={{ padding: 6 }}>\r\n                                    <Form.Item\r\n                                        label={p.pregunta}\r\n                                        name=\"Ac1\"\r\n                                        rules={[{ required: true, message: `Selecciona una opcion` }]}\r\n                                    >\r\n                                        <TextArea />\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <Card>\r\n                                        <Radios letra={p.criterio} />\r\n                                    </Card>\r\n                                </Col>\r\n\r\n\r\n                            </Row>\r\n                        </div>\r\n                    })\r\n                }\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }} >\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\loading.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\perfilEdit.jsx",["1140","1141","1142","1143","1144"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { InputNumber, Select } from 'antd';\r\nimport { S_API, getData, API } from '../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function PerfilEdit(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.perfil.avatar)\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.perfil);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  }, [])\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Medico';\r\n    delete values.confirm;\r\n    delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario creado correctamente' ?\r\n          window.location.href = 'doctores' : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.perfil._id, {\r\n      method: 'PUt',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setEditing(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      <h4>Editar perfil</h4>\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinishEdit}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.perfil}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('password') === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: true, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={12}>\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"universidad\" label=\"Universidad\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\patientViews\\perfilEdit.jsx",["1145","1146","1147","1148","1149"],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\configuration.jsx",["1150"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Table, InputNumber, Divider, Popconfirm } from 'antd';\r\nimport Loading from '../../loading';\r\nimport { getData, updateData } from '../../resources';\r\nimport AddService from './service.add';\r\n\r\nexport default function Configuration({ id_usuario, correo }) {\r\n\r\n    const [profileData, setProfileData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [editingCostoCita, setEditingCostoCita] = useState(false)\r\n    const [isModalOpen, setisModalOpen] = useState(false)\r\n    const [servicioForEdit, setServicioForEdit] = useState(null)\r\n\r\n    useEffect(() => {\r\n        getProfileData()\r\n\r\n        // deleteServices()\r\n    }, [])\r\n\r\n    const getProfileData = () => {\r\n        getData(`userByMail/${correo}`).then((rs) => {\r\n            localStorage.setItem('userData', JSON.stringify(rs[0])) // Save profile data into local storage again, due to changes\r\n            setProfileData(rs[0]) // Must change on backend to findOne, and remove the [0]\r\n        }).finally(() => { setLoading(false) })\r\n    }\r\n\r\n    const confirmDelete = async (val) => {\r\n\r\n        const { configuracion: { tratamientos_ofrecidos } } = profileData;\r\n        const foundIndex = tratamientos_ofrecidos.findIndex((svc => svc._id === val._id));\r\n        tratamientos_ofrecidos.splice(foundIndex, 1)\r\n        profileData.configuracion.tratamientos_ofrecidos = tratamientos_ofrecidos;\r\n        console.log(\"after: \", profileData)\r\n        await updateData(`/users/updateUser/${profileData._id}`, profileData).then((rs) => { console.log(rs); getProfileData() })\r\n\r\n        // const newData = { configuracion: {} }\r\n        // updateData(`/users/updateUser/${id_usuario}`, newData).then((rs) => { console.log(rs); getProfileData() })\r\n        console.log(val)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Servicio',\r\n            dataIndex: 'tratamiento',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Observaciones',\r\n            dataIndex: 'observaciones',\r\n            key: 'observaciones',\r\n        },\r\n        {\r\n            title: 'Costo',\r\n            dataIndex: 'costo',\r\n            key: 'costo',\r\n        },\r\n        {\r\n            title: 'Color',\r\n            dataIndex: 'color',\r\n            key: 'color',\r\n            render: (_, { color }) => {\r\n                return <div style={{ width: 42, height: 16, backgroundColor: color, alignSelf: 'center', borderRadius: 3 }}></div>\r\n            }\r\n        },\r\n        {\r\n            title: 'Opciones',\r\n            dataIndex: 'opciones',\r\n            key: 'opciones',\r\n            render: (_, record) => {\r\n                return <div className='fila'>\r\n                    <Button ghost type='primary' onClick={() => handleEditService(record)}>Editar</Button>\r\n                    <Popconfirm\r\n                        title=\"Delete the task\"\r\n                        description=\"Are you sure to delete this task?\"\r\n                        onConfirm={() => confirmDelete(record)}\r\n                        onCancel={() => console.log('Canceled')}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                    >\r\n                        <Button ghost danger>Eliminar</Button>\r\n                    </Popconfirm>\r\n                </div>\r\n            }\r\n        }\r\n    ];\r\n\r\n\r\n    const handleEditService = (record) => {\r\n\r\n        setServicioForEdit(record)\r\n        setisModalOpen(true)\r\n    }\r\n    const handleClose = () => {\r\n        setServicioForEdit(null)\r\n        setisModalOpen(false);\r\n    }\r\n\r\n    // Form For edit Costo base de cita\r\n    const CostoCitaForm = () => {\r\n        return <Form\r\n            name=\"basic\"\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n            style={{ maxWidth: 600 }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinishEditPrice}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.Item\r\n                label=\"Costo base de cita\"\r\n                name=\"costo_cita\"\r\n                rules={[{\r\n                    required: true,\r\n                    message: 'Please input your username!'\r\n                }]}\r\n            >\r\n                <InputNumber />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                wrapperCol={{ offset: 8, span: 16 }}\r\n            >\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Guardar\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    }\r\n\r\n    // Methods for edit base price for cita\r\n    const onFinishEditPrice = (values) => {\r\n        const newConfig = {\r\n            configuracion: Object.assign(profileData.configuracion, values)\r\n        }\r\n        updateData(`/users/updateUser/${id_usuario}`, newConfig)\r\n            .then(() => getProfileData())\r\n            .finally(() => setEditingCostoCita(false))\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div>\r\n            <h4>Configuracion</h4>\r\n            <br />\r\n            {\r\n                editingCostoCita ?\r\n                    <div>\r\n                        <h5>Editando</h5>\r\n                        <CostoCitaForm />\r\n                    </div>\r\n                    :\r\n                    <div style={{ display: 'flex', alignContent: 'center', columnGap: 12 }}>\r\n                        <h5>\r\n                            {\r\n                                profileData.configuracion && profileData.configuracion.costo_cita ? `Costo de cita: ${profileData.configuracion.costo_cita}` : \"Sin costo de cita definido\"\r\n                            }\r\n                        </h5>\r\n                        <Button type='primary' ghost size='small' onClick={setEditingCostoCita}>Modificar</Button>\r\n                    </div>\r\n            }\r\n\r\n            <Divider />\r\n\r\n            <div className='fila'>\r\n                <h5>Servicios Registrados</h5> <Button type='primary' ghost onClick={() => setisModalOpen(true)}>Agergar Servicio</Button>\r\n            </div>\r\n            <br />\r\n            <Table dataSource={profileData.configuracion?.tratamientos_ofrecidos} columns={columns} bordered />\r\n\r\n            <AddService isOpen={isModalOpen} handleClose={handleClose} service={servicioForEdit} profileData={profileData} getProfileData={getProfileData} />\r\n\r\n        </div >\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\perfilEdit.jsx",["1151"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, InputNumber, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Select } from 'antd';\r\nimport { getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function PerfilEdit(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.perfil.avatar)\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.perfil);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  },[])\r\n\r\n  // const onFinish = (values) => {\r\n  //   values.avatar = avatar;\r\n  //   values.estatus = '1';\r\n  //   values.rol = 'Medico';\r\n  //   delete values.confirm;\r\n  //   delete values.prefix;\r\n\r\n  //   console.log('ready to send', values)\r\n  //   fetch(S_API + 'register', {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify(values),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json'\r\n  //     }\r\n  //   }).then(res => res.json())\r\n  //     .then(response => {\r\n  //       console.log('Success:', response);\r\n  //       response.message && response.message === 'Usuario creado correctamente' ?\r\n  //         window.location.href = 'doctores' : message.error(response.error);\r\n  //     })\r\n  //     .catch(error => console.error('Error:', error))\r\n  // };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.perfil._id, {\r\n      method: 'PUt',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setEditing(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>Editar perfil</h4>\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinishEdit}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.perfil}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('password') === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <InputNumber style={{ width: '100%' }} />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: true, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={12}>\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n\r\n\r\n            <Form.Item label=\"Universidades\" rules={[{ required: true, message: 'Ingresa al menos una universidad', },]}>\r\n              <Form.List name=\"universidades\" label=\"universidades list\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'universidad']}\r\n                          rules={[{ required: true, message: 'Ingresa la universidad' }]}\r\n                        >\r\n                          <Input placeholder=\"Universidad\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'carrera']}\r\n                          rules={[{ required: true, message: 'Ingresa la carrera' }]}\r\n                        >\r\n                          <Input placeholder=\"Carrera\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'cedula']}\r\n                          rules={[{ required: false, message: 'Ingresa la cedula' }]}\r\n                        >\r\n                          <Input placeholder=\"Cedula\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Universidad\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"especialidad\" label=\"Especialidad\" rules={[{ required: true, message: 'Ingresa tu especialidad' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item {...tailFormItemLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\cita.create.jsx",["1152","1153","1154","1155","1156","1157","1158","1159"],"import React, { useState, useEffect } from 'react'\r\nimport { Modal, Form, Select, Input, Button, message, Switch, DatePicker, InputNumber } from 'antd'\r\nimport { getData, myHospitals, sendDataBody, updateData, usuario } from '../../resources';\r\nimport { UploadOutlined, PlusOutlined, MinusCircleOutlined } from '@ant-design/icons'\r\nimport { createEvent } from './auth.button';\r\n\r\n\r\nexport function CreateCitaForm(props) {\r\n\r\n    const { configuracion: { costo_cita = 0 } = {} } = usuario;\r\n    // const = configuracion;\r\n\r\n    myHospitals.forEach(h => { h.value = h._id; h.label = h.nombre; });\r\n\r\n    const [medicosData, setMedicosData] = useState([])\r\n    // Select patient for cerate cita\r\n    const [misPacientes, setMisPacientes] = useState([])\r\n\r\n\r\n    // Body of cita\r\n    const [isOnline, setIsOnline] = useState(false)\r\n    const [hospital, setHospital] = useState(null)\r\n    const [usesCostoBase, setUsesCostoBase] = useState(false)\r\n\r\n    const [costo, setCosto] = useState(0)\r\n\r\n    useEffect(() => {\r\n        getPacientesOfDoctor()\r\n    }, [])\r\n\r\n\r\n    // Get patients of specific doctor to populate the select\r\n    const getPacientesOfDoctor = () => { //Para el caso que la sesion sea de Medico\r\n        getData(`mispacientes/${usuario._id}`).then(rs => {\r\n            rs.forEach(p => { p.label = p.name; p.value = p._id })\r\n            setMisPacientes(rs);\r\n        })\r\n    }\r\n    // Form Methods\r\n    const onFinish = (values) => {\r\n\r\n        values.medico = usuario._id;\r\n        values.id_servicio = values.servicio.key;\r\n        values.servicio = values.servicio.label;\r\n        // values.servicio = values.servicio.title +\" - \" + values.servicio.;\r\n        delete values.tratamiento;\r\n\r\n        console.log(values)\r\n\r\n        // Handle if its updating or creating cita\r\n        if (props.cita) {\r\n            updateData(`citas/update/${props.cita._id}`, values).then((response) => {\r\n                console.log(response)\r\n            }).finally(() => { props.getCitasData(); props.setIsModalOpen(false); props.setEditingCita(false) })\r\n        } else {\r\n\r\n              createEvent(values.fecha_hora, values.duracion, values.servicio.title || values.servicio) // Create cita google W\r\n\r\n            sendDataBody('citas/add', values).then((response) => {\r\n                message.success(response.message || response.error);\r\n                response.message && response.message === 'Cita creada correctamente' ? createBalance(response.id_nueva_cita, values.fecha_hora) : message.error('No se pudo crear registro de ingreso')\r\n                console.log(response)\r\n            }).finally(() => { props.getCitasData(); props.setIsModalOpen(false) })\r\n        }\r\n\r\n\r\n    };\r\n    // Create the respective balance for cita\r\n    const createBalance = (_cita, _fecha_hora) => {\r\n        const balanceBody = {\r\n            tipo: 'ingreso',\r\n            medico: usuario._id,\r\n            cita: _cita,\r\n            monto: usesCostoBase ? (costo + costo_cita) : costo,\r\n            forma_de_pago: 'efectivo',\r\n            fecha_hora: _fecha_hora,\r\n            estado: 'pendiente'\r\n        }\r\n        console.log('Balance ready to send: ', balanceBody)\r\n        sendDataBody('balances/add', balanceBody).then((rs) => { message.success(rs.message || rs.error); console.log(rs) })\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const handleHospitalChange = (value) => { console.log('Selected Hospital: ', value); setHospital(value) };\r\n    const handlePacienteChange = (value) => { console.log('Selected Hospital: ', value); };\r\n\r\n    // Select tratamiento old\r\n    // const handleChange = (value) => {\r\n    //     setCosto(value)\r\n    //     console.log(`selected ${value}`);\r\n    // };\r\n    // Select tratamiento new\r\n    const handleChange = (selected) => {\r\n        setCosto(selected.value)\r\n        console.log(`selected service`, selected);\r\n    };\r\n\r\n    const onSwitch = (checked) => {\r\n        console.log(`switch to ${checked}`);\r\n        setIsOnline(checked)\r\n    };\r\n    const onSwitchCosoBase = (checked) => {\r\n        // if(checked)se\r\n        console.log(`switch to ${checked}`);\r\n        setUsesCostoBase(checked)\r\n    };\r\n\r\n    const timeOptions = [\r\n        { label: 'Media Hora', value: 30 },\r\n        { label: 'Una Hora', value: 60 },\r\n        { label: 'Una Hora y Media', value: 90 },\r\n        { label: 'Dos Horas', value: 120 },\r\n        { label: 'Dos Horas Y Media', value: 150 },\r\n        { label: 'Tres Horas', value: 180 },\r\n    ]\r\n\r\n    return <Form name=\"nueva_cita_admin\" labelCol={{ span: 8 }} wrapperCol={{ span: 14 }} onFinish={onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\"\r\n        initialValues={props.cita ? props.cita : { isOnline: false, tratamiento: 'Sin servicio', fecha_hora: props.fecha_hora, duracion: 60 }}\r\n    >\r\n        {\r\n            myHospitals.length < 1 && <span style={{ color: 'red' }}>Debes tener horarios registrados para poder registrar citas, puedes configurarlos en 'Mi perfil'</span>\r\n        }\r\n\r\n        {usuario && usuario.configuracion && usuario.configuracion.tratamientos_ofrecidos ? (\r\n            <></>\r\n        ) : (\r\n            <span style={{ color: 'red' }}>Debes tener servicios registrados para poder registrar citas, puedes configurarlos en 'Mi perfil' y después 'configuracion'</span>\r\n        )}\r\n\r\n        <Form.Item label=\"Hospital\" name=\"sucursal\" rules={[{ required: true, message: 'Selecciona Sucursal' }]} >\r\n            <Select options={myHospitals} onChange={handleHospitalChange} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Paciente\" name=\"usuario\" rules={[{ required: true, message: 'Selecciona Usuario' }]} >\r\n            <Select options={misPacientes} onChange={handlePacienteChange} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"VideoLlamada\" name=\"isOnline\" >\r\n            <Switch onChange={onSwitch} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Comentarios\" name=\"comentarios\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n            <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Fecha y Hora\" name=\"fecha_hora\" rules={[{ required: false, message: 'Selecciona Fecha y Hora' }]} >\r\n            <DatePicker showTime format=\"DD/MM/YYYY HH:mm\" use12Hours={true} style={{ width: '100%' }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Duracion\" name=\"duracion\" rules={[{ required: true, message: 'Selecciona la duracion de la cita' }]} >\r\n            <Select options={timeOptions} />\r\n        </Form.Item>\r\n\r\n        {/* {\r\n            usuario.configuracion.tratamientos_ofrecidos.map((t) => { return <p> `${t.tratamiento} $${t.costo} ${t._id}` </p> })\r\n\r\n        } */}\r\n\r\n        {\r\n            usuario.configuracion && usuario.configuracion.tratamientos_ofrecidos &&\r\n            <Form.Item label=\"Servicio\" name=\"servicio\" rules={[{ required: true, message: 'Selecciona un servicio' }]} >\r\n                <Select\r\n                    onChange={handleChange}\r\n                    options={\r\n                        usuario.configuracion.tratamientos_ofrecidos.map((t) => { return { key: t._id, value: t.costo, label: `${t.tratamiento} - $${t.costo} - ${t.observaciones ?? \"\"}`, title: t.tratamiento } })\r\n                    }\r\n                    labelInValue\r\n                />\r\n            </Form.Item>\r\n        }\r\n\r\n\r\n\r\n\r\n        <Form.Item label={`costo de la cita $${costo_cita}`} >\r\n            <Switch onChange={onSwitchCosoBase} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n            wrapperCol={{\r\n                offset: 8,\r\n                span: 16,\r\n            }}\r\n        >\r\n            <div className='fila'>\r\n                <h6>Costo Total: ${usesCostoBase ? (costo + costo_cita) : costo} </h6>\r\n            </div>\r\n        </Form.Item>\r\n\r\n        {\r\n            // Only if updating cita\r\n            props.cita && <Form.Item\r\n                wrapperCol={{\r\n                    offset: 8,\r\n                    span: 16,\r\n                }}\r\n            >\r\n                <Button type=\"primary\" htmlType=\"submit\" form='nueva_cita_admin'>\r\n                    Guardar\r\n                </Button>\r\n            </Form.Item>\r\n        }\r\n\r\n    </Form >\r\n}\r\nexport default function CreateCita(props) {\r\n\r\n    // Handle Modal Visibility\r\n    const handCreateleOk = () => { props.setIsModalOpen(false) }\r\n    const handCreateleCancel = () => { props.setIsModalOpen(false) }\r\n    return (\r\n        <Modal title={props.cita ? \"Editar Cita\" : \"Nueva Cita\"} open={props.isOpenModal} onOk={handCreateleOk} onCancel={handCreateleCancel} destroyOnClose width={600}\r\n            footer={[\r\n                <Button onClick={handCreateleCancel}>Cancelar</Button>,\r\n                <Button type=\"primary\" htmlType=\"submit\" form='nueva_cita_admin'>\r\n                    Guardar\r\n                </Button>\r\n            ]}\r\n        >\r\n\r\n            <CreateCitaForm setIsModalOpen={props.setIsModalOpen} isOpenModal={props.isCreateModalOpen} fecha_hora={props.fecha_hora} getCitasData={props.getCitasData} />\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\citas\\auth.button.jsx",["1160","1161","1162"],"import React, { useState } from 'react';\r\nimport ApiCalendar from 'react-google-calendar-api';\r\nimport { Button, Card } from 'antd'\r\nimport { GoogleOutlined, CheckCircleOutlined } from '@ant-design/icons'\r\n\r\n//const CLIENT_ID = '245971086169-jepmkkhrdegtq034l5644n51p5jeh7d5.apps.googleusercontent.com'; // D3 personal\r\nconst CLIENT_ID = '91034098034-9nsi5epfbpd5ld2gu8629v125je8i151.apps.googleusercontent.com'; // recreameds\r\nconst CLIENT_SECRET = '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'; // Reemplaza con tu secreto de cliente\r\nconst REDIRECT_URI = 'http://localhost:3000'; // Reemplaza con tu URI de redirección\r\n//const API_KEY = 'AIzaSyDNI5xyDzbiMaI2qp7j0ou2YL0N61RYkXA' // Personal D3\r\nconst API_KEY = 'AIzaSyB4mdJOL1daKPbkvg3T3-Bw_zLHtCq8umo'\r\n\r\nconst config = {\r\n    \"clientId\": CLIENT_ID,\r\n    \"apiKey\": API_KEY,\r\n    \"scope\": \"https://www.googleapis.com/auth/calendar\",\r\n    \"discoveryDocs\": [\r\n        \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"\r\n    ]\r\n}\r\n\r\nconst apiCalendar = new ApiCalendar(config)\r\n\r\nexport default function AuthButton() {\r\n\r\n    const [authText, setAuthText] = useState(null)\r\n\r\n    const handleItemClick = async (name) => {\r\n        if (name === 'sign-in') {\r\n            const response = await apiCalendar.handleAuthClick();\r\n            console.log('auth-response', response)\r\n            setAuthText(response)\r\n        } else if (name === 'sign-out') {\r\n            apiCalendar.handleSignoutClick();\r\n        }\r\n    }\r\n\r\n    const addEvent = () => {\r\n        const eventFromNow = {\r\n            summary: \"Evento recreamed de prueba\",\r\n            time: 30,\r\n        };\r\n\r\n        apiCalendar\r\n            .createEventFromNow(eventFromNow)\r\n            .then((result) => {\r\n                console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    return <div style={{ display: 'flex', flexDirection: 'row', gap: 12, justifyContent: 'flex-end' }}>\r\n        {/* <p>{JSON.stringify(authText)}</p> */}\r\n        {/* <p>{authText && authText.expires_in}</p> */}\r\n        {\r\n            (authText && authText.access_token) ?\r\n                <Card size='small' bodyStyle={{ alignItems: 'center' }}>\r\n                    <CheckCircleOutlined color='green' size={26} style={{ color: '#5fa1c4', fontSize: 22 }} />\r\n                    Sincronizado con Google Calendar\r\n                </Card>\r\n                :\r\n                <Button\r\n                    onClick={(e) => handleItemClick('sign-in')}\r\n                    icon={<GoogleOutlined />}\r\n                >\r\n                    Sincronizar Calendario\r\n                </Button>\r\n\r\n        }\r\n\r\n\r\n\r\n        {/* < Button onClick={(e) => handleItemClick('sign-out')}>\r\n            sign - out\r\n        </Button>\r\n        <Button\r\n            onClick={addEvent}\r\n        >\r\n            Create Event\r\n        </Button> */}\r\n    </div>;\r\n\r\n}\r\n\r\nexport const createEvent = (startDate, duration, desc) => {\r\n\r\n    const endDate = new Date(startDate);\r\n    endDate.setTime(endDate.getTime() + 1 * (duration ?? 60) * 60 * 1000)\r\n\r\n    const eventWithVideoConference = {\r\n        summary: desc,\r\n        start: {\r\n            dateTime: startDate,\r\n            timeZone: \"America/Mexico_City\",\r\n        },\r\n        end: {\r\n            dateTime: endDate,\r\n            timeZone: \"America/Mexico_City\",\r\n        },\r\n    };\r\n    if (apiCalendar) {\r\n        apiCalendar\r\n            .createEventWithVideoConference(eventWithVideoConference)\r\n            .then((result) => {\r\n                console.log(result);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n}\r\n\r\n// {\"access_token\":\"ya29.a0AfB_byAzh57iKijo9zXH0_6INUzz21v8eXhXpMl9AUQwQEOmX_BBlPywhlQxewx6cEgxePBsoTklBzgWSK-AfTcu9AF84X3TKk5vBPkZqsODJAPy2ou-K6QCG47udKrn-v5rwStSJHdL_cN-GTFHSChu14EpsHrxWwaCgYKAUwSARASFQHGX2MibkHFs-cp2NQPpe6vgaaiyw0169\",\"token_type\":\"Bearer\",\"expires_in\":3599,\"scope\":\"https://www.googleapis.com/auth/calendar\"}\r\n\r\n// {\r\n//     \"result\": {\r\n//         \"kind\": \"calendar#event\",\r\n//         \"etag\": \"\\\"3403817418722000\\\"\",\r\n//         \"id\": \"30cfij8rhq7gcl79sak35rt9v8\",\r\n//         \"status\": \"confirmed\",\r\n//         \"htmlLink\": \"https://www.google.com/calendar/event?eid=MzBjZmlqOHJocTdnY2w3OXNhazM1cnQ5djggZ2lsZGFyZG8ubWF0aWFzLnJAbQ\",\r\n//         \"created\": \"2023-12-07T00:25:09.000Z\",\r\n//         \"updated\": \"2023-12-07T00:25:09.361Z\",\r\n//         \"creator\": {\r\n//             \"email\": \"gildardo.matias.r@gmail.com\",\r\n//             \"self\": true\r\n//         },\r\n//         \"organizer\": {\r\n//             \"email\": \"gildardo.matias.r@gmail.com\",\r\n//             \"self\": true\r\n//         },\r\n//         \"start\": {\r\n//             \"dateTime\": \"2023-12-06T18:25:09-06:00\",\r\n//             \"timeZone\": \"America/Mexico_City\"\r\n//         },\r\n//         \"end\": {\r\n//             \"dateTime\": \"2023-12-06T19:25:09-06:00\",\r\n//             \"timeZone\": \"America/Mexico_City\"\r\n//         },\r\n//         \"iCalUID\": \"30cfij8rhq7gcl79sak35rt9v8@google.com\",\r\n//         \"sequence\": 0,\r\n//         \"hangoutLink\": \"https://meet.google.com/mzt-uhoj-qwi\",\r\n//         \"conferenceData\": {\r\n//             \"createRequest\": {\r\n//                 \"requestId\": \"6acc5c7b-2588-4f96-9303-7b68f0a535d1\",\r\n//                 \"conferenceSolutionKey\": {\r\n//                     \"type\": \"hangoutsMeet\"\r\n//                 },\r\n//                 \"status\": {\r\n//                     \"statusCode\": \"success\"\r\n//                 }\r\n//             },\r\n//             \"entryPoints\": [\r\n//                 {\r\n//                     \"entryPointType\": \"video\",\r\n//                     \"uri\": \"https://meet.google.com/mzt-uhoj-qwi\",\r\n//                     \"label\": \"meet.google.com/mzt-uhoj-qwi\"\r\n//                 }\r\n//             ],\r\n//             \"conferenceSolution\": {\r\n//                 \"key\": {\r\n//                     \"type\": \"hangoutsMeet\"\r\n//                 },\r\n//                 \"name\": \"Google Meet\",\r\n//                 \"iconUri\": \"https://fonts.gstatic.com/s/i/productlogos/meet_2020q4/v6/web-512dp/logo_meet_2020q4_color_2x_web_512dp.png\"\r\n//             },\r\n//             \"conferenceId\": \"mzt-uhoj-qwi\"\r\n//         },\r\n//         \"reminders\": {\r\n//             \"useDefault\": true\r\n//         },\r\n//         \"eventType\": \"default\"\r\n//     },\r\n//     \"body\": \"{\\n \\\"kind\\\": \\\"calendar#event\\\",\\n \\\"etag\\\": \\\"\\\\\\\"3403817418722000\\\\\\\"\\\",\\n \\\"id\\\": \\\"30cfij8rhq7gcl79sak35rt9v8\\\",\\n \\\"status\\\": \\\"confirmed\\\",\\n \\\"htmlLink\\\": \\\"https://www.google.com/calendar/event?eid=MzBjZmlqOHJocTdnY2w3OXNhazM1cnQ5djggZ2lsZGFyZG8ubWF0aWFzLnJAbQ\\\",\\n \\\"created\\\": \\\"2023-12-07T00:25:09.000Z\\\",\\n \\\"updated\\\": \\\"2023-12-07T00:25:09.361Z\\\",\\n \\\"creator\\\": {\\n  \\\"email\\\": \\\"gildardo.matias.r@gmail.com\\\",\\n  \\\"self\\\": true\\n },\\n \\\"organizer\\\": {\\n  \\\"email\\\": \\\"gildardo.matias.r@gmail.com\\\",\\n  \\\"self\\\": true\\n },\\n \\\"start\\\": {\\n  \\\"dateTime\\\": \\\"2023-12-06T18:25:09-06:00\\\",\\n  \\\"timeZone\\\": \\\"America/Mexico_City\\\"\\n },\\n \\\"end\\\": {\\n  \\\"dateTime\\\": \\\"2023-12-06T19:25:09-06:00\\\",\\n  \\\"timeZone\\\": \\\"America/Mexico_City\\\"\\n },\\n \\\"iCalUID\\\": \\\"30cfij8rhq7gcl79sak35rt9v8@google.com\\\",\\n \\\"sequence\\\": 0,\\n \\\"hangoutLink\\\": \\\"https://meet.google.com/mzt-uhoj-qwi\\\",\\n \\\"conferenceData\\\": {\\n  \\\"createRequest\\\": {\\n   \\\"requestId\\\": \\\"6acc5c7b-2588-4f96-9303-7b68f0a535d1\\\",\\n   \\\"conferenceSolutionKey\\\": {\\n    \\\"type\\\": \\\"hangoutsMeet\\\"\\n   },\\n   \\\"status\\\": {\\n    \\\"statusCode\\\": \\\"success\\\"\\n   }\\n  },\\n  \\\"entryPoints\\\": [\\n   {\\n    \\\"entryPointType\\\": \\\"video\\\",\\n    \\\"uri\\\": \\\"https://meet.google.com/mzt-uhoj-qwi\\\",\\n    \\\"label\\\": \\\"meet.google.com/mzt-uhoj-qwi\\\"\\n   }\\n  ],\\n  \\\"conferenceSolution\\\": {\\n   \\\"key\\\": {\\n    \\\"type\\\": \\\"hangoutsMeet\\\"\\n   },\\n   \\\"name\\\": \\\"Google Meet\\\",\\n   \\\"iconUri\\\": \\\"https://fonts.gstatic.com/s/i/productlogos/meet_2020q4/v6/web-512dp/logo_meet_2020q4_color_2x_web_512dp.png\\\"\\n  },\\n  \\\"conferenceId\\\": \\\"mzt-uhoj-qwi\\\"\\n },\\n \\\"reminders\\\": {\\n  \\\"useDefault\\\": true\\n },\\n \\\"eventType\\\": \\\"default\\\"\\n}\\n\",\r\n//     \"headers\": {\r\n//         \"cache-control\": \"no-cache, no-store, max-age=0, must-revalidate\",\r\n//         \"content-encoding\": \"gzip\",\r\n//         \"content-length\": \"694\",\r\n//         \"content-type\": \"application/json; charset=UTF-8\",\r\n//         \"date\": \"Thu, 07 Dec 2023 00:25:09 GMT\",\r\n//         \"etag\": \"\\\"3403817418722000\\\"\",\r\n//         \"expires\": \"Mon, 01 Jan 1990 00:00:00 GMT\",\r\n//         \"pragma\": \"no-cache\",\r\n//         \"server\": \"ESF\",\r\n//         \"vary\": \"Origin, X-Origin, Referer\"\r\n//     },\r\n//     \"status\": 200,\r\n//     \"statusText\": null\r\n// }","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleNota.jsx",["1163","1164","1165","1166","1167","1168","1169","1170"],"import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Tabs, Row, Col, Modal, Space, message,Select } from 'antd';\r\nimport { getData, API, usuario, updateData } from '../../resources';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { NuevaNota } from './nuevaNota';\r\nimport DetalleReceta from './detalleReceta';\r\nimport LastCita from './lastCita'\r\nimport NotasEvolucion from './notasEvolucion';\r\nimport HojasEnfermeria from './hojasEnfermeria';\r\nimport { diagnosticos } from '../../assets/diagnosticos2';\r\nconst { Option, OptGroup } = Select;\r\n\r\nexport default function DetalleNota(props) {\r\n\r\n    const isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\r\n\r\n    const [notaData, setNotaData] = useState([]);\r\n    const [notaLoading, setnotaLoading] = useState(true);\r\n    const [notaForEdit, setNotaForEdit] = useState(\"\")\r\n    // Add Nota Modal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const handleOk = () => { setIsModalVisible(false) };\r\n    const handleCancel = () => { setIsModalVisible(false) };\r\n    // End of Add Nota Modal\r\n    // Edit Nota Modal\r\n    const [isEditModalVisible, setIsEditModalVisible] = useState(false);\r\n    const handleEditOk = () => { setIsEditModalVisible(false) };\r\n    const handleEditCancel = () => { setIsEditModalVisible(false) };\r\n    const editarNota = async (n) => { await setNotaForEdit(n); setIsEditModalVisible(true) }\r\n    // End of Edit Nota Modal\r\n    // Edit Nota fields\r\n    const [editingEntradas, setEditingEntradas] = useState(false)\r\n    // const [editingDiagnostico, setEditingDiagnostico] = useState(false)\r\n\r\n    const [notasLen, setNotasLen] = useState(null)\r\n    const [counterPilot, setCounterPilot] = useState(0)\r\n\r\n    const id_paciente = props.paciente;\r\n\r\n    useEffect(() => {\r\n        // console.log('Paciente received to detailNota: ', id_paciente)\r\n        id_paciente ?\r\n            getNotasData()\r\n            :\r\n            finishGet()\r\n    }, [id_paciente])\r\n\r\n\r\n    const getNotasData = async () => {\r\n        await getData(`notas/${id_paciente}`).then(rs => {\r\n            console.log('NotasData: ', rs);\r\n            if (rs && rs.length === 0) {\r\n                createNota()\r\n            }\r\n\r\n            rs.forEach((nt, i) => {\r\n                nt.label = 'Nota' + (i + 1);\r\n            });\r\n\r\n            setNotaData(rs);\r\n            setnotaLoading(false)\r\n        })\r\n    }\r\n    // if patient not contains notas\r\n    const finishGet = () => { setNotaData([]); setnotaLoading(false); }\r\n\r\n    const createNota = async () => {\r\n        let newNotaBody = {\r\n            id_usuario: id_paciente,\r\n            id_medico: usuario._id,\r\n            edad: 1,\r\n            talla: 1,\r\n            imc: 1,\r\n            peso: 1,\r\n            temperatura: 1,\r\n            presion_arterial: \"---/---\",\r\n            frecuencia_cardiaca: 1,\r\n            frecuencia_respiratoria: 1,\r\n            estudios: [],\r\n            Observaciones: \"\",\r\n            recetas: []\r\n        }\r\n        const newNota = await fetch(API + 'notas/add', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newNotaBody),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                message.success(response.message || response.error);\r\n                // response.message && response.message === ''\r\n                return response;\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n        // Add new nota to received notas\r\n        props.prevExpNotas.push(newNota.id_nota)\r\n        //Update nota at expedient\r\n        fetch(API + 'expedientes/updateNotas/' + props.id_expediente, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \"notas\": props.prevExpNotas }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                // console.log('Update Exp:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n            .finally(() => {\r\n                getNotasData()\r\n            })\r\n    };\r\n\r\n\r\n\r\n    const updateNota = (originalNota, field, newString) => {\r\n        originalNota[field] = newString;\r\n        console.log(originalNota)\r\n        updateData(`notas/update/${originalNota._id}`, originalNota).then((rs) => { getNotasData() })\r\n    }\r\n    // const onEntryFinish = (nota, values) => {\r\n    //     console.log(values)\r\n    //     console.log('Before:', nota)\r\n    //     nota.entradas = [...nota.entradas, values];\r\n    //     console.log('After:', nota)\r\n    //     updateData(`notas/update/${nota._id}`, nota).then((rs) => {\r\n    //         getNotasData()\r\n    //     }).finally(() => setEditingEntradas(false))\r\n    // }\r\n\r\n    // const onEntryFinishFailed = (errorInfo) => {\r\n    //     console.log('Failed:', errorInfo);\r\n    // };\r\n\r\n    // // Upload File For Estudios\r\n    // const dragDropProps = {\r\n    //     name: 'file',\r\n    //     multiple: true,\r\n    //     action: API + 'notas/estudios/upload', // Production\r\n\r\n    //     onChange(info) {\r\n    //         const { status } = info.file;\r\n\r\n    //         if (status !== 'uploading') {\r\n    //             console.log(info.file, info.fileList);\r\n    //         }\r\n\r\n    //         if (status === 'done') {\r\n    //             message.success(`${info.file.name} file uploaded successfully.`);\r\n    //             console.log('New Files: ', info.file.response.file)\r\n    //             // setEstudiosFiles([...estudiosFiles, info.file.response.file])\r\n    //         } else if (status === 'error') {\r\n    //             message.error(`${info.file.name} file upload failed.`);\r\n    //         }\r\n    //     },\r\n\r\n    //     onDrop(e) {\r\n    //         console.log('Dropped files', e.dataTransfer.files);\r\n    //     },\r\n    // };\r\n\r\n    const items = notaData ? notaData.map((nota, i) => {\r\n        return {\r\n            label: `Nota ${i + 1}`,\r\n            key: nota._id,\r\n            children: <Row gutter={8} style={{ backgroundColor: 'white' }}>\r\n\r\n\r\n                {/* Mitad de la pantalla para Receta */}\r\n                <Col span={6} >\r\n                    <DetalleReceta recetas={nota.recetas} id_nota={nota._id} paciente={props.paciente} />\r\n\r\n                    {/* Debajo de la receta esta la ultima cita */}\r\n                    <LastCita paciente={id_paciente} />\r\n\r\n                    {/* Debajo de la ultima cita va hojas de enfermeria*/}\r\n                    <HojasEnfermeria hojas_enfermeria={nota.hojas_enfermeria} id_nota={nota._id} datosPaciente={props.datosPaciente} />\r\n\r\n                </Col>\r\n\r\n                {/* la otra mitad de la pantalla para NOTA*/}\r\n                <Col span={18}>\r\n                    {/* Detalle nota and soap will come into enfermero nota */}\r\n                    {/* <Soap />\r\n                    <Collapse bordered={false} style={{ backgroundColor: '#fff' }}>\r\n                        <Panel header={<Tooltip title=\"Haga Click para mostrar u ocultar\" placement=\"right\"><span>Detalles de la nota</span></Tooltip>} key=\"1\">\r\n                            <Card >\r\n                                <Card.Grid style={NotaGridStyle}>Edad: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"edad\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Talla:<Paragraph editable={{ onChange: (ns) => updateNota(nota, \"talla\", ns) }} >{nota.talla}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Peso: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"peso\", ns) }} >{nota.peso}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>IMC: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"imc\", ns) }} >{nota.imc}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Temperatura: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"temperatura\", ns) }} >{nota.temperatura}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Presion Arterial: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"presion_arterial\", ns) }} >{nota.presion_arterial}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Cardiaca : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_cardiaca\", ns) }} >{nota.frecuencia_cardiaca}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Respiratoria : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_respiratoria\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                            </Card>\r\n                        </Panel>\r\n                    </Collapse> */}\r\n\r\n                    {/* <Card title='Observaciones'>\r\n                        <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"Observaciones\", ns) }} >\r\n                            {nota.Observaciones}\r\n                        </Paragraph>\r\n                    </Card> */}\r\n\r\n                    <Card title='Diagnostico (cie10)' style={{marginBottom: 6}}>\r\n\r\n                        {\r\n                            nota.diagnostico ? <div>{nota.diagnostico}</div> : <Select\r\n                                showSearch\r\n                                placeholder='Selecciona un diagnostico'\r\n                                style={{ width: '100%' }}\r\n                                onChange={(newValue) => updateNota(nota, \"diagnostico\", newValue)}\r\n                            >\r\n                                {\r\n                                    Object.keys(diagnosticos).map((k) => {\r\n                                        return <OptGroup label={k} >\r\n                                            {Object.keys(diagnosticos[k]).map((sk) => {\r\n                                                return <Option value={diagnosticos[k][sk]}>{diagnosticos[k][sk]}</Option>\r\n                                            })}\r\n                                        </OptGroup>\r\n\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        }\r\n                    </Card>\r\n\r\n                    {/* <Card title='Entradas'>\r\n                        {\r\n                            editingEntradas ? <Form\r\n                                name=\"add_entry_form\"\r\n                                // labelCol={{ span: 8 }}\r\n                                // wrapperCol={{ span: 16 }}\r\n                                onFinish={(vals) => onEntryFinish(nota, vals)}\r\n                                onFinishFailed={onEntryFinishFailed}\r\n                                autoComplete=\"off\"\r\n                            >\r\n                                <Space>\r\n                                    <Form.Item\r\n                                        // label=\"Nueva entrada\"\r\n                                        name=\"descripcion\"\r\n                                        rules={[{ required: true, message: 'Ingresa la descripcion' }]}\r\n                                    >\r\n                                        <TextArea rows={2} placeholder=\"Ingresa los detalles\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                    // wrapperCol={{ offset: 8, span: 16 }}\r\n                                    >\r\n                                        <div className='fila'>\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' htmlType=\"submit\" icon={<SaveOutlined />} />\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' onClick={() => setEditingEntradas(false)} icon={<CloseOutlined />} />\r\n                                        </div>\r\n                                    </Form.Item>\r\n                                </Space>\r\n                            </Form> : <div className='fila'>\r\n                                <ul>\r\n                                    {\r\n                                        nota.entradas && nota.entradas.map((e) => <li key={e._id}>{e.createdAt?.substring(0, 10)} - {e.descripcion}</li>)\r\n                                    }\r\n                                </ul>\r\n                                <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" ghost onClick={() => { setEditingEntradas(true) }} size='small' icon={<PlusOutlined />} />\r\n                            </div>\r\n                        }\r\n\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Tratamiento'>\r\n                        <Select\r\n                            defaultValue=\"Tratamiento 1\"\r\n                            style={{ width: 120 }}\r\n                            // onChange={handleChange}\r\n                            options={[\r\n                                {\r\n                                    value: 'jack',\r\n                                    label: 'Tratamiento 1',\r\n                                },\r\n                                {\r\n                                    value: 'lucy',\r\n                                    label: 'Tratamiento 2',\r\n                                },\r\n                                {\r\n                                    value: 'Yiminghe',\r\n                                    label: 'Tratamiento 3',\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Estudios'>\r\n                        {nota.estudios.map((e) => {\r\n                            return <Card.Grid style={EstudioGridStyle}>\r\n                                <a href={`${API}notas/estudios/download/${e}`}><ExperimentOutlined />{e}<DownloadOutlined /> </a>\r\n                            </Card.Grid>\r\n                        })}\r\n\r\n                        <Dragger {...dragDropProps} style={{ padding: 6 }}>\r\n                            <p className=\"ant-upload-drag-icon\">\r\n                                <InboxOutlined />\r\n                            </p>\r\n                            <p className=\"ant-upload-text\">Arrastra los archivos de estudio aquí, o da click para buscar</p>\r\n                            <p className=\"ant-upload-hint\">\r\n                                Selecciona archivos en pdf o imagen que sean menores a 2 MB para poder subirlos\r\n                            </p>\r\n                        </Dragger>\r\n                    </Card> */}\r\n\r\n                    <NotasEvolucion _notas_evolucion={nota.notas_evolucion} id_nota={nota._id} />\r\n\r\n                    {/* <Button style={{ float: 'right' }} onClick={() => { editarNota(nota) }} size='small' type=\"primary\" icon={<EditOutlined />} className='btnIconCentered'>Editar Nota</Button> */}\r\n                </Col>\r\n            </Row>\r\n        }\r\n    }).reverse() : []\r\n\r\n    // return <div style={{backgroundColor: '#fff', padding: 16}}>\r\n    return <Card style={{ marginTop: 15 }}>\r\n\r\n        <Space>\r\n            <h5>Notas </h5>\r\n            {\r\n                isDoctor && <Button className='btnIconCentered' onClick={createNota} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n            }\r\n        </Space>\r\n\r\n        {\r\n            notaLoading ? <h5>Cargando Nota...</h5> : <Tabs items={items} />\r\n        }\r\n\r\n        <Modal title=\"Nueva Nota\" open={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota id_expediente={props.id_expediente} paciente={id_paciente} prevExpNotas={props.prevExpNotas} setIsModalVisible={setIsModalVisible} />\r\n        </Modal>\r\n\r\n        <Modal title=\"Editar Nota\" open={isEditModalVisible} onOk={handleEditOk} onCancel={handleEditCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota nota={notaForEdit} setIsModalVisible={setIsEditModalVisible} />\r\n        </Modal>\r\n\r\n\r\n\r\n    </Card>\r\n\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleHistoria.jsx",["1171"],"import React, { useState, useEffect } from 'react'\r\nimport { Card, Space, Button, Input, Form, message } from 'antd';\r\nimport { getData, API, usuario } from '../../resources';\r\nimport { FormOutlined } from '@ant-design/icons';\r\n\r\nconst isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\r\n\r\nexport default function DetalleHistoria({ historia, detalles_paciente }) {\r\n\r\n\r\n    const { TextArea } = Input;\r\n    const [historiaData, setHistoriaData] = useState(\"\")\r\n    const [notaLoading, setHistoriaLoading] = useState(true)\r\n    const [editing, setEditing] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // console.log(\"Detalle historia recvd pat: \", detalles_paciente)\r\n        historia ?\r\n            getHistoriaData()\r\n            :\r\n            finifhGet()\r\n    }, [historia])\r\n\r\n    const finifhGet = () => { setHistoriaData([]); setHistoriaLoading(false); }\r\n\r\n    const getHistoriaData = () => {\r\n        getData(`historia/${historia}`).then(rs => { setHistoriaData(rs); setHistoriaLoading(false) })\r\n    }\r\n\r\n    const gridStyle = {\r\n        width: '100%',\r\n        // height: '40',\r\n        // textAlign: 'center',\r\n        // display: 'inline-flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 15\r\n    };\r\n\r\n    const updateHistoria = (values) => {\r\n        setEditing(false)\r\n        fetch(API + 'historias/update/' + historiaData[0]._id, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log('Success:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .finally(() => {\r\n                getHistoriaData()\r\n                setEditing(false)\r\n            })\r\n        console.log('New Historia', values);\r\n    }\r\n\r\n    const DatosClinicos = () => {\r\n        return <div className='fila'>\r\n            <span className='desc'>Sexo:</span> {detalles_paciente.sexo}\r\n            <span className='desc'>Edad:</span> {detalles_paciente.edad}\r\n            <span className='desc'>Peso:</span> {detalles_paciente.peso}\r\n            <span className='desc'>Talla:</span> {detalles_paciente.talla}\r\n        </div>\r\n    }\r\n\r\n    const HistoriaDetails = () => {\r\n        return editing ?\r\n            <>\r\n                < Form name='historiaForm' initialValues={{ historial: historiaData[0].historial }\r\n                } onFinish={updateHistoria} >\r\n                    <Form.Item name='historial'>\r\n                        <TextArea rows={4} />\r\n                    </Form.Item>\r\n                    <Space>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Guardar</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={() => setEditing(false)}>Cancelar</Button>\r\n                        </Form.Item>\r\n                    </Space>\r\n                </Form >\r\n            </>\r\n            :\r\n            <div style={{ overflow: 'auto', height: 200 }}>\r\n                <span style={{ whiteSpace: 'pre-line', textAlign: 'left', wordWrap: 'normal', overflowY: 'scroll' }}>{historiaData[0].historial}</span>\r\n                {\r\n                    // Agregar el modal de historia\r\n                    isDoctor && <Button className='btnIconCentered' onClick={() => setEditing(true)} size='small' disabled={!historia} type=\"primary\" shape=\"circle\" icon={<FormOutlined className='sizedIcon' />} style={{ position: 'absolute', bottom: 18, right: 18 }} ghost />\r\n                }\r\n            </div>\r\n\r\n    }\r\n\r\n\r\n    return <Card style={gridStyle} >\r\n        <h5>Historia Clinica</h5>\r\n\r\n        <DatosClinicos />\r\n\r\n        {\r\n            notaLoading ? <h5>Cargando Historia...</h5> :\r\n                historiaData.length > 0 ?\r\n                    <HistoriaDetails />\r\n                    :\r\n                    <h6>No hay una historia asignada</h6>\r\n        }\r\n        <br />\r\n    </Card>\r\n}\r\n\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\expedienteForPrint.jsx",["1172"],"import React, { useEffect } from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport Logo from '../../assets/Logo.png'\r\nimport { usuario, IMAGE_API } from '../../resources';\r\n\r\nexport default function ExpedienteDocument({ pacienteData, expedienteData, historia, notas, recetas, citas }) {\r\n\r\n\r\n    const { historial = \"\" } = historia[0];\r\n    const lines = historial.split('\\n');\r\n\r\n    useEffect(() => {\r\n        // console.log('receta props', props)\r\n    }, [])\r\n\r\n    // Create styles\r\n    // Styles for a4\r\n    // const styles = StyleSheet.create({\r\n    //     page: {\r\n    //         flexDirection: 'column',\r\n    //         backgroundColor: 'white'\r\n    //     },\r\n    //     block: {\r\n    //         flexDirection: 'row'\r\n    //     },\r\n    //     section: {\r\n    //         margin: 10,\r\n    //         padding: 10,\r\n    //         flexGrow: 1\r\n    //     },\r\n    //     image: {\r\n    //         // marginVertical: 15,\r\n    //         // marginHorizontal: 10,\r\n    //         width: 132\r\n    //     },\r\n    //     footText: {\r\n    //         fontSize: 14\r\n    //     }\r\n    // });\r\n    // Styles for a5\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flexDirection: 'column',\r\n            backgroundColor: 'white',\r\n            margin: 15\r\n        },\r\n        block: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between'\r\n        },\r\n        sectionFull: {\r\n            margin: 10,\r\n            padding: 10,\r\n            flexGrow: 1\r\n        },\r\n        section: {\r\n            margin: 10,\r\n            padding: 10,\r\n        },\r\n        image: {\r\n            width: 64\r\n        },\r\n        desc: {\r\n            fontSize: 12\r\n        },\r\n        footText: {\r\n            fontSize: 14\r\n        },\r\n        prescription: {\r\n            fontSize: 16\r\n        }\r\n    });\r\n\r\n    const Divider = () => {\r\n        return <View style={{ color: 'black', width: '94%', backgroundColor: 'black', borderBottomColor: '#9bb4df', borderBottomWidth: 1, marginHorizontal: 10 }}></View>\r\n    }\r\n\r\n    // Create Document Component\r\n    function Receta() {\r\n        return <Document>\r\n            <Page size=\"A4\" orientation=\"vertical\" style={styles.page}>\r\n\r\n                <View style={styles.section}>\r\n                    <Text>EXPEDIENTE</Text>\r\n                </View>\r\n\r\n                <View style={styles.section}>\r\n                    <Text style={styles.footText}>Paciente: {pacienteData.name}</Text>\r\n                    {/* <Text style={styles.footText}>Fecha: {new Date().toLocaleString()}</Text> */}\r\n                </View>\r\n\r\n\r\n                <Divider />\r\n\r\n\r\n                <View style={styles.sectionFull}>\r\n\r\n\r\n                    <View style={styles.section}>\r\n                        <Text style={styles.footText}>Historia clinica</Text>\r\n                        {historial && lines.map((line, index) => (\r\n                            <Text key={index} style={styles.desc}>\r\n                                {line}\r\n                            </Text>\r\n                        ))}\r\n                    </View>\r\n\r\n                    <View style={styles.section}>\r\n                        <Text style={styles.footText}>Citas</Text>\r\n                        {\r\n                            citas.length > 0 ? citas.map((cita) => {\r\n                                return <View style={{marginBottom: 6}}>\r\n\r\n                                    <Text style={styles.desc}>Fecha y hora: {cita.fecha_hora}</Text>\r\n                                    <Text style={styles.desc}>Medico: {cita.medico.name}</Text>\r\n                                    <Text style={styles.desc}>Paciente: {cita.medico.name}</Text>\r\n                                    <Text style={styles.desc}>Servicio: {cita.servicio}</Text>\r\n                                    <Text style={styles.desc}>Comentarios: {cita.comentarios}</Text>\r\n                                </View>\r\n                            }) : <Text style={styles.desc}>Sin citas registradas</Text>\r\n                        }\r\n                    </View>\r\n\r\n                </View>\r\n\r\n\r\n                <Divider />\r\n\r\n                <View style={styles.block}>\r\n                    <View style={styles.section}>\r\n                        {/* <Text style={styles.footText}>José Rubén Romero #103, Bosque Camelinas</Text>\r\n                        <Text style={styles.footText}>Morelia, Mich. CP 58290</Text>\r\n                        <Text style={styles.footText}>Tel. (443) 3235088, Cel (443) 356 7822</Text> */}\r\n                        <Text style={styles.footText}>{usuario.email}</Text>\r\n                        <Text style={styles.footText}>{usuario.telefono}</Text>\r\n                    </View>\r\n                    <View style={styles.section}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text style={{ fontSize: 10, }}>www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n    }\r\n    return <div>\r\n        <PDFViewer height={600} width={820}>\r\n            <Receta />\r\n        </PDFViewer>\r\n    </div>\r\n\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\detalles.paciente.jsx",["1173","1174","1175","1176","1177","1178"],"import React from 'react'\r\nimport { Avatar, Card, Divider, Button, Row, Col } from 'antd';\r\nimport { FormOutlined, UserOutlined, MailOutlined, MobileOutlined } from '@ant-design/icons';\r\nimport DetallesFisioModal from './detalles.fisio.modal';\r\n\r\nexport default function DetallesPaciente({ paciente, setIsEditModalOpen }) {\r\n\r\n    const TYPE = \"fisio\";\r\n\r\n    return (<div style={{ marginTop: 16, paddingBottom: 4, display: 'flex', flexDirection: 'column', justifyContent: 'center', backgroundColor: 'white', width: '25%', borderRadius: 8 }}>\r\n\r\n        <div style={{ textAlign: 'center', marginTop: 8 }}>\r\n            {\r\n                paciente.avatar && paciente.avatar.length > 9 ?\r\n                    <img width={82} src={'https://api.recreamed.com/images/' + paciente.avatar} alt='ProfilePic' style={{ alignSelf: 'center' }} /> :\r\n                    <Avatar size={82} icon={<UserOutlined />} className='btnIconCentered' style={{ alignSelf: 'center' }} />\r\n            }\r\n            <div style={{ height: 8 }}></div>\r\n            <p className='nombre'><UserOutlined style={{ marginRight: 10 }} /> {paciente.name}</p>\r\n            <p className='datos'><MailOutlined style={{ marginRight: 10 }} /> {paciente.email}</p>\r\n            <p className='datos'><MobileOutlined style={{ marginRight: 10 }} /> {paciente.telefono}</p>\r\n            {/* {\r\n                TYPE === 'fisio' && <DetallesFisioModal userData={paciente} />\r\n            } */}\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row-reverse', paddingRight: 16 }}>\r\n                <Button className='btnIconCentered' onClick={() => setIsEditModalOpen(true)} size='small' type=\"primary\" shape=\"circle\" icon={<FormOutlined className='sizedIcon' />} ghost />\r\n            </div>\r\n        </div>\r\n\r\n    </div>)\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresionMenu.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\register.patient.jsx",["1179","1180","1181"],"import React, { useState, useRef } from 'react'\r\nimport { Form, Input, Button, message, Space, Divider, Upload, Switch, Modal, DatePicker } from 'antd'\r\nimport { InputNumber, Select } from 'antd';\r\nimport { S_API, API, usuario, estados } from '../../resources'\r\nimport { UploadOutlined, PlusOutlined, MinusCircleOutlined } from '@ant-design/icons'\r\nimport { useEffect } from 'react';\r\nimport RegisterFisio from './register.patent.fisio';\r\n// const { Dragger } = Upload;\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nfunction RegisterForm(props) {\r\n  const myRef = useRef();\r\n  const [form] = Form.useForm();\r\n  const [avatar, setAvatar] = useState(props.paciente ? props.paciente.avatar : 'noimg.jpg')\r\n\r\n  useEffect(() => {\r\n    console.log('Received patient ', props.paciente)\r\n    if (myRef && myRef.current) {\r\n      const { input } = myRef.current\r\n      input.focus()\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n  async function addHistoria() {\r\n    return await fetch(API + 'historias/add', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        historial: \"Historia clinica al \" + new Date()\r\n      })\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Story Created: ', response);\r\n        return response\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  }\r\n\r\n  const createPAtientData = async (usr) => {\r\n    const historia = await addHistoria();\r\n    console.log('historia on Register: ', historia);\r\n    const postBody = {\r\n      usuario: usr,\r\n      historia: historia.id_historia,\r\n      notas: [],\r\n      recetas: []\r\n    }\r\n    console.log('postBodyForExpedient: ', postBody);\r\n    await fetch(API + 'expedientes/add', {\r\n      method: 'POST',\r\n      body: JSON.stringify(postBody),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        message.success(response.message || response.error);\r\n        if (response.message && response.message === 'Expediente creado correctamente') {\r\n          props.setAdding(false)\r\n        }\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  }\r\n\r\n  const onFinish = async (values) => {\r\n\r\n    // Register patient\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Paciente';\r\n    values.password = '' + values.telefono;\r\n    values.universidades = [];\r\n    values.certificacion = '';\r\n    values.cedula = '';\r\n    values.horarios = [];\r\n    values.medicos_asignados = props.paciente ? props.paciente.medicos_asignados : [usuario._id];\r\n    // values.responsable = (props.paciente && props.paciente.responsable) ? props.paciente.responsable : { nombre: values.res_name, telefono: values.res_phone }\r\n    values.responsable = { nombre: values.res_name, telefono: values.res_phone }\r\n\r\n    delete values.prefix;\r\n    delete values.res_name;\r\n    delete values.res_phone;\r\n\r\n    const url = props.paciente ? API + 'users/updateUser/' + props.paciente._id : S_API + 'register';\r\n\r\n    console.log('before send', values)\r\n    console.log('url: ', url);\r\n    await fetch(url, {\r\n      method: props.paciente ? 'PUT' : 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Create User Response:', response);\r\n        message.success(response.message || response.error);\r\n        props.paciente ? console.log('Editing, not creating patient') : createPAtientData(response.user_id);\r\n        response.message === 'Usuario creado correctamente' ?\r\n          props.setAdding(false) : console.log(response);\r\n        response.message === 'Usuario actualizado correctamente' ?\r\n          finishUpdate() : console.log(response);\r\n\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const finishUpdate = () => {\r\n    props.setAdding(false); props.getPacientesData()\r\n  }\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    // onDrop(e) {\r\n    //   console.log('Dropped files', e.dataTransfer.files);\r\n    // },\r\n  };\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', overflowY: 'scroll' }} >\r\n      {\r\n        props.paciente ? <h4>Editar paciente</h4> : <h4>Registrar Paciente</h4>\r\n      }\r\n\r\n      <br />\r\n\r\n\r\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n        <Upload {...dragDropProps}>\r\n          <Button type=\"dashed\" icon={<UploadOutlined style={{ fontSize: 24, color: '#0d6efd' }} />} style={{ width: 400, height: 80 }} block>Selecciona la foto de perfil</Button>\r\n        </Upload>\r\n      </div>\r\n      \r\n      <br />\r\n     \r\n      <Form\r\n        // {...formItemLayout}\r\n        labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n        form={form}\r\n        name=\"register_patient_medic\"\r\n        onFinish={onFinish}\r\n        onFinishFailed={onFinishFailed}\r\n        initialValues={props.paciente}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Nombre\"\r\n          rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}\r\n        >\r\n          <Input ref={myRef} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Correo\"\r\n          rules={[{ type: 'email', message: 'Ingresa un correo electronico vaido!' }, { required: true, message: 'Ingresa un correo electronico' }]}>\r\n          <Input />\r\n        </Form.Item>\r\n\r\n\r\n        <Form.Item\r\n          name=\"telefono\"\r\n          label=\"Telefono\"\r\n          rules={[{ required: true, message: 'Ingresa tu numero de telefono' }]}\r\n        >\r\n          <InputNumber\r\n            // addonBefore={prefixSelector}\r\n            style={{ width: '100%' }}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Divider>Responsable (opcional) </Divider>\r\n        <Form.Item name=\"res_name\" label=\"Nombre Responsable\" >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item name=\"res_phone\" label=\"Telefono Responsable\">\r\n          <Input />\r\n        </Form.Item>\r\n        <Divider />\r\n\r\n        <Form.Item\r\n          name=\"calle\"\r\n          label=\"Calle\"\r\n          rules={[{ required: false, message: 'Ingresa calle', whitespace: true }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"numexterior\"\r\n          label=\"Num Exterior\"\r\n          rules={[{ required: false, message: 'Ingresa numero exterior' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"numinterior\"\r\n          label=\"Num Interior\"\r\n          rules={[{ required: false, message: 'Ingresa numinterior' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Colonia\"\r\n          name=\"colonia\"\r\n          rules={[{ required: false, message: 'Ingresa ' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"estado\"\r\n          label=\"Estado\"\r\n          rules={[{ required: false, message: 'Apellido materno', },]}>\r\n          <Select placeholder=\"Elije tu estado\" showSearch>\r\n            {estados.map(e => <Option value={e}>{e}</Option>)}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"municipio\"\r\n          label=\"Municipio\"\r\n          rules={[{ required: false, message: 'Ingresa tu municipio' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"codigopostal\"\r\n          label=\"Codigo Postal\"\r\n          rules={[{ required: false, message: 'Ingresa codigopostal', },]}>\r\n          <InputNumber style={{ width: '100%', }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"sexo\" label=\"sexo\" rules={[{ required: false, message: 'Selecciona una opcion' }]}>\r\n          <Select placeholder=\"Elije el sexo\" >\r\n            <Option value=\"H\">H</Option>\r\n            <Option value=\"M\">M</Option>\r\n            <Option value=\"Otro\">Otro</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"edad\" label=\"Edad\" rules={[{ required: false, message: 'Ingresa edad' }]} >\r\n          <InputNumber min={1} max={120} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"diagnostico\" label=\"Diagnostico\" rules={[{ required: false, message: 'Ingresa el diagnostico' }]} >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"peso\" label=\"Peso\" rules={[{ required: false, message: 'Ingresa el peso' }]} >\r\n          <InputNumber min={1} max={200} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"talla\" label=\"Talla\" rules={[{ required: false, message: 'Ingresa la talla' }]} >\r\n          <InputNumber min={1} max={200} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"ocupacion\" label=\"Ocupacion\" rules={[{ required: false, message: 'Ingresa ocupacion' }]} >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"estado_civil\" label=\"Estado Civil\" rules={[{ required: false, message: 'Ingresa estado civil' }]} >\r\n          <Select placeholder=\"Elije el estado civil\" >\r\n            <Option value=\"Soltero\">Soltero</Option>\r\n            <Option value=\"Casado\">Casado</Option>\r\n            <Option value=\"Divorciado\">Divorciado</Option>\r\n            <Option value=\"Separación en proceso judicial\">Separación en proceso judicial</Option>\r\n            <Option value=\"Viudo\">Viudo</Option>\r\n            <Option value=\"Concubinato\">Concubinato</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"escolaridad\" label=\"Escolaridad\" rules={[{ required: false, message: 'Ingresa escolaridad' }]} >\r\n          <Select placeholder=\"Elije escolaridad\" >\r\n            <Option value=\"Ninguno\">Ninguno</Option>\r\n            <Option value=\"Preescolar\">Preescolar</Option>\r\n            <Option value=\"Primaria\">Primaria</Option>\r\n            <Option value=\"Secundaria\">Secundaria</Option>\r\n            <Option value=\"Medio Superior\">Medio Superior</Option>\r\n            <Option value=\"Superior\">Superior</Option>\r\n            <Option value=\"Posgrado\">Posgrado</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"lugar_de_nacimiento\" label=\"Lugar De Nacimiento\" rules={[{ required: false, message: 'Ingresa el lugar de nacimiento' }]} >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"fecha_nacimiento\" label=\"Fecha De Nacimiento\" rules={[{ required: false, message: 'Ingresa la fecha de nacimiento' }]} >\r\n          <DatePicker />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"ciudad\" label=\"Ciudad de residencia\" rules={[{ required: false, message: 'Ingresa ciudad' }]} >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"fuma\" label=\"Fuma\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n          <Switch defaultChecked={false} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"alcohol\" label=\"Alcohol\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n          <Switch defaultChecked={false} />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"drogas\" label=\"Drogas\" rules={[{ required: false, message: 'Selecciona una opcion' }]} >\r\n          <Select placeholder=\"Elije una opcion\" >\r\n            <Option value=\"Antes\">Antes</Option>\r\n            <Option value=\"Ahora\">Ahora</Option>\r\n            <Option value=\"Nunca\">Nunca</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"cuales_drogas\" label=\"Cuales Drogas\" rules={[{ required: false, message: 'Selecciona una opcion' }]} >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"enfermedades_familiares\" label=\"Enfermedades Familiares\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n          <Form.List name=\"enfermedades_familiares\" >\r\n            {(fields, { add, remove }, { errors }) => (\r\n              <>\r\n                {fields.map((field, index) => (\r\n                  <Form.Item label='' required={false} key={field.key}>\r\n                    <Form.Item {...field} noStyle\r\n                      validateTrigger={['onChange', 'onBlur']}\r\n                      rules={[{ required: false, whitespace: true, message: \"Ingresa la enfermedad o elimina este campo\" }]}\r\n                    >\r\n                      <Input placeholder=\"Ingresa enfermedad\" style={{ width: fields.length > 1 ? '93%' : '100%' }} />\r\n                    </Form.Item>\r\n                    {fields.length > 1 ? (\r\n                      <MinusCircleOutlined\r\n                        className=\"dynamic-delete-button\"\r\n                        onClick={() => remove(field.name)}\r\n                      />\r\n                    ) : null}\r\n                  </Form.Item>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} icon={<PlusOutlined />}>\r\n                    Agregar Enfermedad  Familiar\r\n                  </Button>\r\n\r\n                  <Form.ErrorList errors={errors} />\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"enfermedades_medicas\" label=\"Enfermedades Medicas\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n          <Form.List name=\"enfermedades_medicas\">\r\n            {(fields, { add, remove }, { errors }) => (\r\n              <>\r\n                {fields.map((field, index) => (\r\n                  <Form.Item label='' required={false} key={field.key}>\r\n                    <Form.Item {...field} noStyle\r\n                      validateTrigger={['onChange', 'onBlur']}\r\n                      rules={[{ required: false, whitespace: true, message: \"Ingresa la enfermedad o elimina este campo\" }]}\r\n                    >\r\n                      <Input placeholder=\"Ingresa enfermedad\" style={{ width: fields.length > 1 ? '93%' : '100%' }} />\r\n                    </Form.Item>\r\n                    {fields.length > 1 ? (\r\n                      <MinusCircleOutlined\r\n                        className=\"dynamic-delete-button\"\r\n                        onClick={() => remove(field.name)}\r\n                      />\r\n                    ) : null}\r\n                  </Form.Item>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} icon={<PlusOutlined />}>\r\n                    Agregar Enfermedad Medica\r\n                  </Button>\r\n\r\n                  <Form.ErrorList errors={errors} />\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"tratamiento_actual\" label=\"Tratamiento actual\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n          <Form.List name=\"tratamiento_actual\" >\r\n            {(fields, { add, remove }, { errors }) => (\r\n              <>\r\n                {fields.map((field, index) => (\r\n                  <Form.Item\r\n                    // label={`Tratamiento ${index + 1}`} \r\n                    label=''\r\n                    required={false} key={field.key}>\r\n                    <Form.Item {...field} noStyle\r\n                      validateTrigger={['onChange', 'onBlur']}\r\n                      rules={[{ required: false, whitespace: true, message: \"Ingresa la enfermedad o elimina este campo\" }]}\r\n                    >\r\n                      <Input placeholder=\"Ingresa enfermedad\" style={{ width: fields.length > 1 ? '93%' : '100%' }} />\r\n                    </Form.Item>\r\n                    {fields.length > 1 ? (\r\n                      <MinusCircleOutlined\r\n                        className=\"dynamic-delete-button\"\r\n                        onClick={() => remove(field.name)}\r\n                      />\r\n                    ) : null}\r\n                  </Form.Item>\r\n                ))}\r\n                <Form.Item>\r\n                  <Button type=\"dashed\" onClick={() => add()} icon={<PlusOutlined />}>\r\n                    Agregar Tratamiento\r\n                  </Button>\r\n\r\n                  <Form.ErrorList errors={errors} />\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n          </Form.List>\r\n        </Form.Item>\r\n\r\n        {/* <Form.Item wrapperCol={{\r\n          offset: 8,\r\n          span: 16,\r\n        }}>\r\n          <Space>\r\n            <Button onClick={() => props.setAdding(false)}>Cancelar</Button>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Registrar\r\n            </Button>\r\n          </Space>\r\n\r\n        </Form.Item> */}\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function Register({ paciente, setIsModalOpen, isModalOpen, getPacientesData }) {\r\n\r\n\r\n  const handleOk = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return <Modal width={800}\r\n    // title={paciente ? 'Editar Paciente' : 'Registrar Paciente'}\r\n    open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n    footer={[\r\n      <Button onClick={() => setIsModalOpen(false)}>Cancelar</Button>,\r\n      <Button type=\"primary\" htmlType=\"submit\" form='register_patient_medic'>\r\n        Guardar\r\n      </Button>\r\n    ]}\r\n  >\r\n    {/* ISFisio? */}\r\n    <RegisterForm paciente={paciente} setAdding={setIsModalOpen} getPacientesData={getPacientesData} />\r\n    {/* <RegisterFisio /> */}\r\n  </Modal>\r\n\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\postTraumaticoMenu.jsx",["1182"],"import React from 'react'\r\nimport { Tabs } from 'antd';\r\nimport PostTraumaticoResults from './post_traumatico/p_t_results';\r\nimport PostTraumaticoClinicoResults from './p_t_clinico/p_t_clinico_results';\r\nimport PostTraumaticoMexicanaResults from './p_t_mexicana/p_t_mexicana_results';\r\n\r\nexport default function PostTraumaticoMenu() {\r\n  const items = [\r\n    { label: 'EPT 1', key: 'item-1', children: <PostTraumaticoResults /> },\r\n    // { label: 'EPT 2', key: 'item-2', children: <PostTraumaticoClinicoResults/> },\r\n    { label: 'EPT 3', key: 'item-3', children: <PostTraumaticoMexicanaResults /> },\r\n  ]\r\n  return (\r\n    <div>\r\n      <h4 className='spacedTitle'>Resultados de Escalas de Estrés Post Traumatico</h4>\r\n      <Tabs items={items} type=\"card\" />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaResults.jsx",["1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194"],"import React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { Space, Table, Tag, Progress, Button, Modal } from 'antd'\r\nimport { Form, Select } from 'antd';\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../resources';\r\nimport LoadingIndicator from '../loadingIndicator'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink';\r\nimport Loading from '../../loading';\r\nimport getAllEscalas from '../getEscalas';\r\nimport KetaminaDetails from './ketaminaDetails';\r\nconst { Option } = Select;\r\n\r\nexport default function KetaminaResults() {\r\n\r\n  const [ketaminaData, setKetaminaData] = useState(null);\r\n  const [medicosData, setMedicosData] = useState([])\r\n  const [countersData, setCountersData] = useState([])\r\n  const [loadingCounters, setLoadingCounters] = useState(true)\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // Modal for details\r\n  const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n  const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n  const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n  const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // usuario.rol === 'Administrador' ? getDoctorsData() : getEncuestasData(usuario._id)\r\n\r\n    // New Form\r\n    // If session is recept/admin get escalas of all medicos of my hospital\r\n    // Else if session is medico get escalas for me\r\n    if (usuario.rol === 'Recepcion' || usuario.rol === 'Administrador') getAllEscalas('ketamina', setKetaminaData, setLoading)\r\n    else getEncuestasData(usuario._id)\r\n\r\n    // getEcuestasDataByHospital()\r\n  }, [])\r\n\r\n  // Modal For Create Link\r\n  const showModal = () => { setIsModalOpen(true) };\r\n  const handleOk = () => { setIsModalOpen(false) };\r\n  const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n  const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador\r\n    sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n      setMedicosData(rs)\r\n    })\r\n  }\r\n\r\n\r\n\r\n  // If session is medic\r\n  const getEncuestasData = (medico) => {\r\n    getData(`encuestas/ketamina/medico/${medico}`).then((rs) => {\r\n      console.log('Encuestas ', rs);\r\n      // getCounters(rs, medico);\r\n      setKetaminaData(rs)\r\n    }).finally(() => setLoading(false))\r\n  }\r\n\r\n  // If session is admin/recept\r\n  const getEcuestasDataByHospital = async () => {\r\n    let allEncs = [];\r\n    // 1  get medicos of my hospital\r\n    const myDoctors = await sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales })\r\n    // 2 get escalas of each medico\r\n    myDoctors.forEach(async (doc) => {\r\n      await getData(`encuestas/ketamina/medico/${doc._id}`).then((rs) => {\r\n        allEncs = [...allEncs, rs]\r\n      })\r\n    });\r\n    console.log('All Encuestas: ', allEncs)\r\n  }\r\n\r\n\r\n  // const getCounters = (data, medico) => {\r\n  //   const allEncuestas = [...data];\r\n  //   const results = []\r\n  //   getData(`mispacientes/${medico}`).then(rs => {\r\n  //     console.log('getCounters ketam data: ', data)\r\n  //     rs.forEach(pac => {\r\n  //       const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id) // Usuario can be deleted\r\n  //       const latest = aprs.at(-1)\r\n  //       results.push({\r\n  //         'paciente': pac.name,\r\n  //         'total': aprs.length,\r\n  //         'semana': latest?.createdAt.substring(0, 10)\r\n  //       })\r\n  //     });\r\n  //     console.log(results)\r\n  //   }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n  // }\r\n\r\n  const counterColumns = [\r\n    {\r\n      title: 'Paciente',\r\n      key: 'paciente',\r\n      dataIndex: 'paciente',\r\n    },\r\n    {\r\n      title: 'Fecha ultima encuesta',\r\n      key: 'semana',\r\n      dataIndex: 'semana',\r\n    },\r\n    {\r\n      title: 'Total encuestas',\r\n      key: 'total',\r\n      dataIndex: 'total'\r\n    }\r\n  ];\r\n  const columns = [\r\n\r\n    {\r\n      title: 'Usuario',\r\n      key: 'usuario',\r\n      dataIndex: 'usuario',\r\n      render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario eliminado\"}</>),\r\n      // sorter: true,\r\n    },\r\n    {\r\n      title: 'Fecha',\r\n      key: 'fecha',\r\n      dataIndex: 'createdAt',\r\n      render: (fecha) => (<>{fecha.substring(0, 10)}</>),\r\n      width: '9%'\r\n    },\r\n    {\r\n      title: '¿Parece que las cosas se mueven en cámara lenta ?',\r\n      key: 'desrealizacion_0',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.desrealizacion_0}</>\r\n      ),\r\n    },\r\n    {\r\n      title: '¿Te parecen irreales las cosas, como si estuvieras en un sueño?',\r\n      key: 'desrealizacion_1',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.desrealizacion_1}</>\r\n      ),\r\n    },\r\n    {\r\n      title: '¿Te sientes desconectado de tu propio cuerpo?',\r\n      key: 'despersonalizacion_0',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.despersonalizacion_0}</>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Sientes que ha cambiado el sentido de tu propio cuerpo?: por ejemplo, tu cuerpo se siente inusualmente largo o inusualmente pequeño?',\r\n      key: 'despersonalizacion_1',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.despersonalizacion_1}</>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Te has distraído, o has perdido el rastro de alguna manera de lo que esta pasando durante esta experiencia?',\r\n      key: 'amnesia_0',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.amnesia_0}</>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Tiene lagunas (vacios) en su memoria?',\r\n      key: 'amnesia_1',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <>{respuestas_ketamina.amnesia_1}</>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Gusto por la ketamina',\r\n      key: 'ketamina',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <Space direction='vertical'>\r\n          <>Gusto por la ketamina: <Progress percent={respuestas_ketamina.ketamina * 10} /></>\r\n          <>Anhelo/Apetito de ketamina: <Progress percent={respuestas_ketamina.ketaminaiv * 10} /></>\r\n          <>Deseo de Ketamina IV: <Progress percent={respuestas_ketamina.ketaminaivb * 10} /></>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Efectos',\r\n      key: 'Efectos',\r\n      dataIndex: 'respuestas_ketamina',\r\n      render: (_, { respuestas_ketamina }) => (\r\n        <div>\r\n          {respuestas_ketamina.Aumento_de_la_Presión_Arterial && <Tag color=\"red\">Aumento de la presion arterial</Tag>}\r\n          {respuestas_ketamina.Debilidad_o_Mareos_ligeros && <Tag color=\"red\">Debilidad o Mareos ligeros</Tag>}\r\n          {respuestas_ketamina.Dolor_de_cabeza && <Tag color=\"red\">Dolor de cabeza</Tag>}\r\n          {respuestas_ketamina.Mareos && <Tag color=\"red\">Mareos</Tag>}\r\n          {respuestas_ketamina.Nauseas && <Tag color=\"red\">Nauseas</Tag>}\r\n          {respuestas_ketamina.Sentimientos_de_Ansiedad && <Tag color=\"red\">Sentimientos de Ansiedad</Tag>}\r\n        </div>\r\n      ),\r\n    },\r\n\r\n  ];\r\n\r\n  const detailsColumns = [\r\n    {\r\n      title: 'Usuario',\r\n      key: 'usuario',\r\n      dataIndex: 'usuario',\r\n      render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n      sorter: true\r\n    },\r\n    {\r\n      title: 'Acciones',\r\n      key: 'actions',\r\n      dataIndex: 'actions',\r\n      render: (_, { respuestas_ketamina }) => (<>\r\n        <Button onClick={() => { setEscalaForDetails(respuestas_ketamina); showDetailsModal() }}>Ver detalles</Button>\r\n      </>),\r\n    },\r\n  ]\r\n\r\n\r\n  // if ((usuario.rol === 'Recepcion' || usuario.rol === 'Administracion') && !ketaminaData) return <h5>Seleccione un medico para ver los resultados de sus encuestas</h5>\r\n\r\n  if (loading) return <Loading />\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <h4>Resultados de listas de verificacion para efectos secundarios</h4>\r\n      <br />\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Generar Escala\r\n      </Button>\r\n      <br />\r\n\r\n      {/* {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion') && <Form.Item label=\"Selecciona un Medico\" name=\"usuario\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n          style={{ alignItems: 'center', paddingTop: 20 }}>\r\n          <Select\r\n            style={{ width: 260, }}\r\n            onChange={getEncuestasData}\r\n            placeholder='Selecciona un medico'\r\n          >\r\n            {\r\n              medicosData.map((p) => {\r\n                return <Option key={p._id} value={p._id}>{p.name}</Option>\r\n              })\r\n            }\r\n          </Select>\r\n        </Form.Item>\r\n      } */}\r\n      <br />\r\n\r\n      {/* <Table dataSource={countersData} columns={counterColumns} loading={{ indicator: <LoadingIndicator />, spinning: loadingCounters }} bordered /> */}\r\n      <br />\r\n      <h4>Detalles de encuestas</h4>\r\n      <br />\r\n\r\n      {/* <Table dataSource={ketaminaData} columns={columns} scroll={{ x: 1300 }} bordered /> */}\r\n\r\n      <Table dataSource={ketaminaData} columns={detailsColumns} scroll={{ x: 1300 }} bordered />\r\n\r\n\r\n      <Modal title=\"Generar Escala de Ketamina\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n        footer={[\r\n          <Button onClick={handleCancel}>Cerrar</Button>\r\n        ]}\r\n      >\r\n        {/* <KetaminaCreateLink /> */}\r\n        <EscalasCreateGeneralLink tipo=\"ketamina\" />\r\n      </Modal>\r\n\r\n      <KetaminaDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorResults.jsx",["1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208"],"import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { usuario, getData, sendDataBody, ids_hospitales } from '../../resources'\r\nimport { Form, Select, Space, Button, Table, Modal } from 'antd';\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink';\r\nimport getAllEscalas from '../getEscalas';\r\nimport DolorDetails from './dolorDetails';\r\nconst { Option } = Select;\r\n\r\nexport default function DolorResults() {\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [medico, setMedico] = useState(null)\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loadingCounters, setLoadingCounters] = useState(true)\r\n    const [loading, setLoading] = useState(true)\r\n    // For Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('dolor', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            setMedicosData(rs)\r\n        })\r\n    }\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/dolor/medico/${medico}`).then((rs) => {\r\n            getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n    }\r\n\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente',\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total Escalas Respondidas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n    const columns = [\r\n\r\n        {\r\n            title: 'Usuario',\r\n            dataIndex: 'usuario',\r\n            key: 'usuario',\r\n            render: (_, { usuario }) => <p>{usuario ? usuario.name : \"Usuario eliminado\"}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 1',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[1]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 2',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[2]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 3',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[3]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 4',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[4]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 5',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[5]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 6',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[6]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 7',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[7]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 8',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[8]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 9',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[9]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 10',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[10]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 11',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[11]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 12',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[12]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 13 A-G',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor['A13']}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 14',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[14]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 15',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[15]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 16',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[16]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 17',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[17]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 18',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[18]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 19',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[19]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 20',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[20]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 21',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[21]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 22',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[22]}</p>\r\n        },\r\n        // {\r\n        //     title: 'Address',\r\n        //     dataIndex: 'address',\r\n        //     key: 'address',\r\n        // },\r\n        // {\r\n        //     title: 'Tags',\r\n        //     key: 'tags',\r\n        //     dataIndex: 'tags',\r\n        //     render: (_, { tags }) => (\r\n        //         <>\r\n        //             {tags.map((tag) => {\r\n        //                 let color = tag.length > 5 ? 'geekblue' : 'green';\r\n        //                 if (tag === 'loser') {\r\n        //                     color = 'volcano';\r\n        //                 }\r\n        //                 return (\r\n        //                     <Tag color={color} key={tag}>\r\n        //                         {tag.toUpperCase()}\r\n        //                     </Tag>\r\n        //                 );\r\n        //             })}\r\n        //         </>\r\n        //     ),\r\n        // },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <a>Invite {record.name}</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { respuestas_dolor }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(respuestas_dolor); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas de dolor</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta de Dolor\r\n            </Button>\r\n\r\n            <br />\r\n            {/* <Table dataSource={countersData} columns={counterColumns} bordered /> */}\r\n            <br />\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            {/* <Table columns={columns} dataSource={encuestasData} scroll={{ x: '200vw' }} bordered /> */}\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta de dolor\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='dolor' />\r\n            </Modal>\r\n\r\n            <DolorDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionResults.jsx",["1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224"],"import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { usuario, getData, sendDataBody, ids_hospitales } from '../../resources'\r\nimport { Form, Select, Space, Button, Table, Modal } from 'antd';\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink';\r\nimport getAllEscalas from '../getEscalas';\r\nimport DolorDetails from './satisfaccionDetails';\r\nimport SatisfacconStats from './satisfaccion_stats';\r\nconst { Option } = Select;\r\n\r\nexport default function SatisfaccionResults() {\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [medico, setMedico] = useState(null)\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loadingCounters, setLoadingCounters] = useState(true)\r\n    const [loading, setLoading] = useState(true)\r\n    // For Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('satisfaccion', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/satisfaccion`).then((rs) => {\r\n            getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n    }\r\n\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente',\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total Escalas Respondidas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n    const columns = [\r\n\r\n        {\r\n            title: 'Usuario',\r\n            dataIndex: 'usuario',\r\n            key: 'usuario',\r\n            render: (_, { usuario }) => <p>{usuario ? usuario.name : \"Usuario eliminado\"}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 1',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[1]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 2',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[2]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 3',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[3]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 4',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[4]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 5',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[5]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 6',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[6]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 7',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[7]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 8',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[8]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 9',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[9]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 10',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[10]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 11',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[11]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 12',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[12]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 13 A-G',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor['A13']}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 14',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[14]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 15',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[15]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 16',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[16]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 17',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[17]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 18',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[18]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 19',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[19]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 20',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[20]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 21',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[21]}</p>\r\n        },\r\n        {\r\n            title: 'Pretgunta 22',\r\n            dataIndex: 'respuestas_dolor',\r\n            key: 'usuario',\r\n            render: (_, { respuestas_dolor }) => <p>{respuestas_dolor[22]}</p>\r\n        },\r\n        // {\r\n        //     title: 'Address',\r\n        //     dataIndex: 'address',\r\n        //     key: 'address',\r\n        // },\r\n        // {\r\n        //     title: 'Tags',\r\n        //     key: 'tags',\r\n        //     dataIndex: 'tags',\r\n        //     render: (_, { tags }) => (\r\n        //         <>\r\n        //             {tags.map((tag) => {\r\n        //                 let color = tag.length > 5 ? 'geekblue' : 'green';\r\n        //                 if (tag === 'loser') {\r\n        //                     color = 'volcano';\r\n        //                 }\r\n        //                 return (\r\n        //                     <Tag color={color} key={tag}>\r\n        //                         {tag.toUpperCase()}\r\n        //                     </Tag>\r\n        //                 );\r\n        //             })}\r\n        //         </>\r\n        //     ),\r\n        // },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <a>Invite {record.name}</a>\r\n                    <a>Delete</a>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { encuesta_satisfaccion }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(encuesta_satisfaccion); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas de satisfaccion</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta de Satisfaccion\r\n            </Button>\r\n\r\n            <br />\r\n            {/* <Table dataSource={countersData} columns={counterColumns} bordered /> */}\r\n            <br />\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            {/* <Table columns={columns} dataSource={encuestasData} scroll={{ x: '200vw' }} bordered /> */}\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <SatisfacconStats />\r\n            \r\n            <Modal title=\"Crear Encuesta de satisfaccion\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='satisfaccion' />\r\n            </Modal>\r\n\r\n            <DolorDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\dash.enfermeros.main.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\create.corte.jsx",["1225","1226","1227","1228"],"import React from 'react'\r\nimport { Button, Modal, Form, Input, DatePicker } from 'antd';\r\nimport dayjs from 'dayjs';\r\n\r\nimport { getData, sendDataBody, usuario, ids_hospitales } from '../../resources'\r\n\r\n\r\nexport default function CreateCorte({ isModalOpen, handleOk, handleCancel, onFinish }) {\r\n    // const onFinish = (values) => {\r\n    //     const newCorte = {\r\n    //         // medico: medico,\r\n    //         medico: usuario._id,\r\n    //         fecha_inicio: cortesData.length === 0 ? new Date() : cortesData.at(0).fecha_cierre,\r\n    //         fecha_cierre: new Date(),\r\n    //         comentario: ''\r\n    //     }\r\n    //     console.log('ready to send ', newCorte)\r\n    //     sendDataBody('cortes/add', newCorte).then((rs) => {\r\n    //         console.log(rs);\r\n    //         getCortesData(medico)\r\n    //     })\r\n    // };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    return <Modal title=\"Generar Corte\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n        footer={[\r\n            <Button onClick={handleCancel}>\r\n                Cancelar\r\n            </Button>,\r\n            <Button type=\"primary\" htmlType=\"submit\" form='create_corte_medic'>\r\n                Guardar\r\n            </Button>\r\n        ]}\r\n    >\r\n        <Form\r\n            name=\"create_corte_medic\"\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n            style={{ maxWidth: 600 }}\r\n            initialValues={{ fecha_cierre: dayjs(new Date()) }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n        >\r\n            <Form.Item\r\n                label=\"Comentario\"\r\n                name=\"comentario\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            {/* <Form.Item\r\n                label=\"Fecha Inicio\"\r\n                name=\"username\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                ]}\r\n            >\r\n                <DatePicker />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item\r\n                label=\"Fecha Cierre\"\r\n                name=\"fecha_cierre\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your username!',\r\n                    },\r\n                ]}\r\n            >\r\n                <DatePicker defaultValue={dayjs()} />\r\n            </Form.Item>\r\n\r\n        </Form>\r\n    </Modal>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\register.enfermero.jsx",["1229","1230","1231","1232"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Divider, Select } from 'antd';\r\nimport { S_API, getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function Register(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.medico ? props.medico.avatar : 'https://')\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.medico);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  }, [])\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Enfermero';\r\n    delete values.confirm;\r\n    delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario creado correctamente' ?\r\n          window.location.href = 'enfermeros' : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.medico._id, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setIsModalVisible(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      {\r\n        props.medico ?\r\n          <></> : <h1>Registrar enfermero</h1>\r\n      }\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={props.medico ? onFinishEdit : onFinish}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.medico}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {\r\n              props.medico ? <></> : <>\r\n                <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n              </>\r\n            }\r\n\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={11}>\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: false, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Universidades\" rules={[{ required: true, message: 'Ingresa al menos una universidad', },]}>\r\n              <Form.List name=\"universidades\" label=\"universidades list\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'universidad']}\r\n                          rules={[{ required: true, message: 'Ingresa la universidad' }]}\r\n                        >\r\n                          <Input placeholder=\"Universidad\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'carrera']}\r\n                          rules={[{ required: true, message: 'Ingresa la carrera' }]}\r\n                        >\r\n                          <Input placeholder=\"Carrera\" />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'cedula']}\r\n                          rules={[{ required: false, message: 'Ingresa la cedula' }]}\r\n                        >\r\n                          <Input placeholder=\"Cedula\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Universidad\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"especialidad\" label=\"Especialidad\" rules={[{ required: false, message: 'Ingresa especialidad' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailFormItemLayout}>\r\n              {\r\n                props.setIsModalVisible && <Button onClick={() => props.setIsModalVisible(false)} style={{ marginRight: 6 }}>\r\n                  Cancelar\r\n                </Button>\r\n              }\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\cortes\\details.corte.jsx",["1233","1234"],"import { useEffect, useState } from \"react\";\r\nimport { Button, Modal, Typography, Table } from 'antd'\r\nimport * as FileSaver from 'file-saver';\r\nimport XLSX from \"sheetjs-style\";\r\n\r\nimport { sendDataBody, getData, usuario, deleteData } from '../../resources'\r\nimport CorteDocument from \"../../doctorViews/cortes/corteForPrint\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function Detalles(props) {\r\n    console.log('Corte for details ', props.corte)\r\n\r\n    const [isPrinting, setIsPrinting] = useState(false)\r\n\r\n    const [pacientesData, setPacientesData] = useState([])\r\n\r\n    const [totales, setTotales] = useState({})\r\n    const handleOk = () => { props.setIsModalOpen(false) };\r\n\r\n    useEffect(() => { return getPacientesData() }, [])\r\n\r\n    // Here creates the main data\r\n    useEffect(() => {\r\n        sendDataBody(`balances/ingresos/corte`, props.corte).then(rs => {\r\n            console.log(rs)\r\n            let totalIngresos = 0;\r\n            let totalPendiente = 0;\r\n            let totalCobros = rs.length;\r\n            let totalPagados = 0;\r\n            let totalPendientes = 0;\r\n            let _listOfDeudors = [];\r\n            let _listOfPagados = [];\r\n            rs.forEach(c => {\r\n                if ((c && c.estado === 'pagado') || c.monto === c.abono) {\r\n                    totalIngresos += c.monto;\r\n                    totalPagados++\r\n                    _listOfPagados.push(c)\r\n                } else {\r\n                    totalPendiente += c.monto;\r\n                    totalPendientes++;\r\n                    _listOfDeudors.push(c)\r\n                }\r\n            });\r\n            const totales = {\r\n                ingresosTotales: totalIngresos,\r\n                deudasTotales: totalPendiente,\r\n                cobrosTotales: totalCobros,\r\n                pagados: totalPagados,\r\n                pendientes: totalPendientes,\r\n                listOfDeudors: _listOfDeudors,\r\n                listOfPagados: _listOfPagados\r\n            }\r\n            setTotales(totales)\r\n        })\r\n\r\n\r\n    }, [props.corte])\r\n\r\n\r\n\r\n    // Give me the patients to match names\r\n    const getPacientesData = () => { getData(`mispacientes/${usuario._id}`).then((rs) => { setPacientesData(rs); }) }\r\n    const MatchPatient = ({ paciente }) => {\r\n        const patient = pacientesData.find((p) => paciente === p._id)\r\n        return <div>{patient ? patient.name : <Text disabled>Paciente eliminado o no existente</Text>} <p style={{ fontSize: 10 }}>Tomado de la cita</p></div>\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'cita.paciente',\r\n            dataIndex: 'cita',\r\n            // render: (_, record) => {\r\n            //     if (record.cita) return <MatchPatient paciente={record.cita.usuario} />\r\n            //     else if (record.paciente) return <>{record.paciente.name}</>\r\n            //     else return <Text type=\"secondary\"> Sin Paciente</Text>\r\n            // },\r\n            render: (_, record) => {\r\n                if (record.cita) return <>{record.cita.usuario.name}</>\r\n                else if (record.paciente) return <>{record.paciente.name}</>\r\n                else return <Text type=\"secondary\"> Sin Paciente</Text>\r\n            },\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => <>${monto}</>\r\n        },\r\n        {\r\n            title: 'Fecha y Hora',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha_hora',\r\n            render: (_, { fecha_hora }) => { return <>{new Date(fecha_hora).toLocaleString()}</> }\r\n        },\r\n\r\n    ]; const filetype = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtextension = '.xlsx';\r\n\r\n    const exportToExcel = async () => {\r\n\r\n        const ws = XLSX.utils.json_to_sheet([totales]);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], { type: filetype })\r\n        FileSaver.saveAs(data, 'corte' + new Date().toLocaleDateString() + fileExtextension)\r\n    }\r\n\r\n    return <Modal title=\"Detalles del corte\" open={props.isModalOpen} onCancel={handleOk} width={600} destroyOnClose\r\n        footer={[\r\n            <Button onClick={() => setIsPrinting(!isPrinting)}>{isPrinting ? \"Cancelar Impresion\" : \"Imprimir PDF\"}</Button>,\r\n            <Button onClick={() => exportToExcel()}>Exportar a excel</Button>,\r\n            <Button onClick={handleOk}>Cerrar</Button>\r\n        ]}\r\n    >\r\n        {\r\n            isPrinting ?\r\n                // Called from Medico views\r\n                <CorteDocument totales={totales} logo=\"https://api.recreamed.com/images/bd71d914-1f11-4bea-81e5-81b55e11a4e1.jpg\" company='Hospital: ' seller='Médico: ' buyer='Paciente: ' /> :\r\n                <>\r\n                    <h5>Total ingresos: <span style={{ color: '#3277a8' }}>${totales.ingresosTotales}</span></h5>\r\n                    {\r\n                        totales.listOfPagados && totales.listOfPagados.length > 0 && <Table dataSource={totales.listOfPagados} columns={columns} bordered={false} size='small' />\r\n                    }\r\n\r\n                    <h5>Pendientes</h5>\r\n                    <h5>Total: <span style={{ color: '#eb3d43' }}>${totales.deudasTotales}</span></h5>\r\n\r\n                    {\r\n                        totales.listOfDeudors && totales.listOfDeudors.length > 0 && <Table dataSource={totales.listOfDeudors} columns={columns} bordered={false} size='small' />\r\n                    }\r\n                </>\r\n        }\r\n\r\n    </ Modal>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\dash.receptionists.main.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\horarios.receptionists.jsx",["1235","1236","1237","1238","1239"],"import React, { useEffect, useState } from 'react'\r\nimport { Tabs, Select } from 'antd'\r\nimport { myHospitals } from '../../resources'\r\nimport { Table, Avatar } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { getData } from '../../resources'\r\nimport Loading from '../../loading'\r\n\r\nexport default function Horarios() {\r\n\r\n    // Create items for TABS\r\n    myHospitals.forEach(h => {\r\n        h.label = h.nombre;\r\n        h.key = h._id;\r\n        h.children = <HospitalTab hospital={h.nombre} id_hospital={h._id} />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Recepcionistas de los diferentes hospitales</h4>\r\n            <Tabs defaultActiveKey=\"1\" items={myHospitals} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction HospitalTab(props) {\r\n    const [receptorsrData, setReceptorsData] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // To show Schedules\r\n    const [receptionist, setReceptionist] = useState(null)\r\n    const [shedule, setShedule] = useState([])\r\n    const [loadinSchedules, setLoadinSchedules] = useState(true)\r\n\r\n    const scheduleColumns = [\r\n        // {\r\n        //     title: 'Usuario',\r\n        //     dataIndex: 'usuario',\r\n        //     key: 'usuario',\r\n        //     render: (_, { usuario }) => { return <div>{usuario.name}</div> }\r\n        // },\r\n        {\r\n            title: 'Fecha',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n            render: (_, { createdAt }) => { return <div>{new Date(createdAt).toLocaleDateString()}</div> }\r\n        },\r\n        {\r\n            title: 'Hora de Entrada',\r\n            dataIndex: 'fecha_hora_entrada',\r\n            key: 'fecha_hora_entrada',\r\n            render: (_, { fecha_hora_entrada }) => { return <div>{new Date(fecha_hora_entrada).toLocaleTimeString()}</div> }\r\n        },\r\n        {\r\n            title: 'Hora de Salida',\r\n            dataIndex: 'fecha_hora_salida',\r\n            key: 'fecha_hora_salida',\r\n            render: (_, { fecha_hora_salida }) => { return <div>{new Date(fecha_hora_salida).toLocaleTimeString()}</div> }\r\n        }\r\n    ]\r\n\r\n    // Before all, get DoctorsData\r\n    useEffect(() => { getReceptorsData() }, [])\r\n    const getReceptorsData = () => {\r\n        getData('users_by_rol/Recepcion').then((rs) => { setReceptorsData(rs) }).finally(() => setLoading(false))\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Avatar',\r\n            dataIndex: 'avatar',\r\n            key: 'avatar',\r\n            render: (_, { avatar }) => {\r\n                return avatar.length > 9 ?\r\n                    <img width={64} src={'https://api.recreamed.com/images/' + avatar} alt='ProfilePic' /> :\r\n                    <Avatar size={64} icon={<UserOutlined />} className='btnIconCentered' />\r\n            }\r\n        },\r\n        {\r\n            title: 'Nombre',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Correo',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n        },\r\n        {\r\n            title: 'Telefono',\r\n            dataIndex: 'telefono',\r\n            key: 'telefono',\r\n        },\r\n    ];\r\n    const myReceptors = (id_hospital) => {\r\n        let doctorsFound = [];\r\n        receptorsrData.forEach(receptor => {\r\n            receptor.horarios.forEach(horario => {\r\n                if (!doctorsFound.includes(receptor) && horario.sucursal._id === id_hospital) {\r\n                    receptor.label = receptor.name; receptor.value = receptor._id;\r\n                    doctorsFound.push(receptor);\r\n                }\r\n            });\r\n        });\r\n        // console.log(`Founds for ${id_hospital}: `, doctorsFound)\r\n        return doctorsFound;\r\n    }\r\n    const filteredReceptors = myReceptors(props.id_hospital); // Get medicos data before render TAble\r\n    // Filter doctors of each hospital\r\n\r\n    // For Select receptor\r\n    const handleChange = async (value) => {\r\n        console.log(`selected ${value}`);\r\n        const horarios = await getData(`asistencias/${value}`)\r\n        console.log(horarios)\r\n        setShedule(horarios)\r\n        setReceptionist(value)\r\n    };\r\n\r\n    const getSchedules = () => {\r\n    }\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return <div>\r\n        <h6>Recepcionistas del hospital {props.hospital}</h6>\r\n        {/* <Table dataSource={doctoresData} columns={columns} /> */}\r\n        {/* {receptionist || \"Not Selected\"} */}\r\n        <Select\r\n            // defaultValue=\"lucy\"\r\n            style={{ width: 260 }}\r\n            onChange={handleChange}\r\n            options={filteredReceptors}\r\n        />\r\n        <Table columns={scheduleColumns} dataSource={shedule} />\r\n    </div>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\register.receptionist.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ingresos.hospital.jsx",["1240","1241","1242","1243"],"import React, { useState, useEffect } from 'react'\r\nimport { Table, Button, Tag, Modal } from 'antd'\r\nimport CreateBalanceHosptal from './create-ingreso-hosptal';\r\nimport { getData } from '../../resources';\r\nimport Loading from '../../loading';\r\n\r\nexport default function IngersosHosptal({ ids_hospitales }) {\r\n\r\n    const [ingresosData, setIngresosData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [isIngresoModalOpen, setIsIngresoModalOpen] = useState(false); // Modal For Add/Edit Inreso\r\n    const [isGastooModalOpen, setIsGastoModalOpen] = useState(false); // Modal For Add/Edit Gasto\r\n  \r\n    useEffect(() => {\r\n        getIngresos()\r\n    }, [])\r\n\r\n    const getIngresos = () => {\r\n        getData(`balances/hospital/${ids_hospitales[0]}`).then((rs) => {\r\n            setIngresosData(rs)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Concepto',\r\n            dataIndex: 'concepto',\r\n            key: 'concepto',\r\n        },\r\n        {\r\n            title: 'Tipo',\r\n            dataIndex: 'tipo',\r\n            key: 'tipo',\r\n            render: (_, { tipo }) => {\r\n                let color = (tipo && tipo === 'ingreso') ? 'geekblue' : 'volcano';\r\n                return tipo ? <Tag color={color} >{tipo.toUpperCase()}</Tag> : <Tag color={color}>Indefinido</Tag>\r\n            },\r\n        },\r\n        {\r\n            title: 'Fecha',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha_hora',\r\n            render: (_, { fecha_hora }) => { return <>{new Date(fecha_hora).toLocaleString()}</> },\r\n            defaultSortOrder: 'descend',\r\n            // sorter: (a, b) => a.fecha_hora > b.fecha_hora,\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => { return <>${monto}</> }\r\n        },\r\n        {\r\n            title: 'Abono',\r\n            dataIndex: 'abono',\r\n            key: 'abono',\r\n            render: (_, { abono }) => { return abono && <>${abono}</> }\r\n        },\r\n        {\r\n            title: 'Adeudo',\r\n            dataIndex: 'adeudo',\r\n            key: 'adeudo',\r\n            render: (_, record) => { return <>${record.monto - record.abono}</> }\r\n\r\n        },\r\n        {\r\n            title: 'Forma de pago',\r\n            key: 'forma_de_pago',\r\n            dataIndex: 'forma_de_pago',\r\n            render: (_, { forma_de_pago }) => {\r\n                let color = forma_de_pago === 'efectivo' ? 'geekblue' : 'green';\r\n                return <Tag color={color} >{forma_de_pago.toUpperCase()}</Tag>\r\n            },\r\n        },\r\n\r\n        // {\r\n        //     title: 'Factura',\r\n        //     key: 'Factura',\r\n        //     dataIndex: 'factura',\r\n        //     render: (_, { factura }) => { return factura && <CheckCircleTwoTone /> }\r\n\r\n        // },\r\n        {\r\n            title: 'Estado',\r\n            key: 'Estado',\r\n            dataIndex: 'estado',\r\n            // render: (_, { estado }) => {\r\n            //     let color = estado === 'pagado' ? 'green' : 'geekblue';\r\n            //     if (estado === 'pendiente' || estado === 'sin pagar') color = 'volcano';\r\n            //     return <Tag color={color}> {estado.toUpperCase()} </Tag>\r\n            // }\r\n            render: (_, { abono, monto }) => {\r\n                const pagado = abono === monto;\r\n                let color = pagado ? 'green' : 'volcano';\r\n                return <Tag color={color}> {pagado ? 'PAGADO' : 'PENDIENTE'} </Tag>\r\n            }\r\n\r\n        },\r\n        // {\r\n        //     title: 'Acciones',\r\n        //     key: 'Editar',\r\n        //     render: (_, record) => <div style={{ display: 'flex', gap: 2, flexDirection: 'column' }}>\r\n        //         {/* <Button onClick={() => { deleteData(`balances/remove/${record._id}`).then(()=>getIngresos()) }}>Eliminar</Button> */}\r\n        //         <Button size='small' onClick={() => handleEditIngreso(record)}>Editar Monto</Button>\r\n        //         <Button size='small' onClick={() => { setIngresoForPrint([record]); showTicketModal() }}>Imprimir Nota</Button>\r\n        //     </div>\r\n        // },\r\n    ];\r\n\r\n    // if (loading) return <Loading />\r\n\r\n    return <div>\r\n\r\n        <div style={{ display: 'flex', flexDirection: 'row', gap: 12, alignItems: 'center' }}>\r\n            <h4>Ingresos del hospital</h4>\r\n            {/* {JSON.stringify(ids_hospitales)} For view another hospitals , create a select with ids_hospitales as options and a state for hospital selected and pass ir as a param into createBalance*/}\r\n            <Button ghost size='small' onClick={() => setIsIngresoModalOpen(true)} type='primary'  >Agregar Nuevo Ingreso del Hospital</Button>\r\n            <Button ghost size='small' onClick={() => setIsGastoModalOpen(true)} type='primary'  >Agregar Nuevo Gasto del Hospital</Button>\r\n        </div>\r\n\r\n        <Table dataSource={ingresosData} columns={columns} size='small' />;\r\n\r\n        {/* Ingreso of Hospital*/}\r\n        <CreateBalanceHosptal tipo='ingreso' setIsModalOpen={setIsIngresoModalOpen} isModalOpen={isIngresoModalOpen} getIngresos={getIngresos} id_hospital={ids_hospitales[0]} />\r\n        {/* Gasto of Hospital*/}\r\n        <CreateBalanceHosptal tipo='egreso' setIsModalOpen={setIsGastoModalOpen} isModalOpen={isGastooModalOpen} getIngresos={getIngresos} id_hospital={ids_hospitales[0]} />\r\n\r\n    </div>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\create-ingreso.jsx",["1244","1245"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, Form, Input, Select, message, DatePicker, InputNumber } from 'antd';\r\nimport { getData, sendDataBody, updateData } from '../../resources';\r\n// ADMIN CREATE INGRESO\r\nexport default function CreateBalance(props) {\r\n\r\n    const isCreating = !props.balanceForEdit || Object.keys(props.balanceForEdit).length === 0;\r\n    const [pacientesData, setPacientesData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const handleOk = () => { props.setIsModalOpen(false) };\r\n    const handleCancel = () => { props.setIsModalOpen(false); props.setBalanceForEdit(null) };\r\n\r\n    useEffect(() => {\r\n        console.log('receivd for edit', props)\r\n        if (props.balanceForEdit && props.balanceForEdit.medico) {\r\n            getPacientesData(props.balanceForEdit.medico)\r\n        }\r\n\r\n    }, [props.balanceForEdit])\r\n\r\n\r\n    // Start of filtering patients to show in select\r\n    const getPacientesData = (medico) => {\r\n        // if (props.balanceForEdi) {\r\n        getData(`mispacientes/${medico}`).then((rs) => {\r\n            if (rs) {\r\n                rs.forEach(patient => {\r\n                    patient.value = patient._id; patient.label = patient.name;\r\n                });\r\n                console.log('Pacientes: ', rs)\r\n                setPacientesData(rs)\r\n            }\r\n        }).finally(() => { setLoading(false) })\r\n        // }\r\n    }\r\n    // End of filtering patients to show in select\r\n\r\n    // Form methods\r\n    const onFinish = (values) => {\r\n\r\n        values.tipo = props.tipo;\r\n        console.log('Ready to send:', values);\r\n        console.log('For Edit: ', props.balanceForEdit);\r\n        if (isCreating) {\r\n            sendDataBody(`balances/add`, values).then((rs) => { console.log(rs); message.success(rs.message || rs.error) }).finally(() => { props.getIngresos(); props.setIsModalOpen(false) })\r\n        } else {\r\n            updateData(`/balances/update/${props.balanceForEdit._id}`, values).then((rs) => {\r\n                props.getIngresos(); props.setBalanceForEdit({}); props.setIsModalOpen(false);\r\n            })\r\n        }\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => { console.log('Failed:', errorInfo) };\r\n\r\n    const handleDoctorChange = (value) => { getPacientesData(value) };\r\n\r\n    return (\r\n        <Modal title={isCreating ? `Agregar ${props.tipo}` : `Editar ${props.tipo}`} open={props.isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='edit_balance'>\r\n                    Guardar\r\n                </Button>,\r\n                <Button onClick={handleCancel}>\r\n                    Cancelar\r\n                </Button>\r\n            ]}>\r\n            <Form\r\n                name=\"edit_balance\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={props.balanceForEdit}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item label=\"Monto\" name=\"monto\" rules={[{ required: true, message: 'Ingresa el monto' }]} >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"abono\" name=\"abono\" rules={[{ required: true, message: 'Ingresa el abobo' }]} >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Forma de Pago\" name=\"forma_de_pago\" >\r\n                    <Select\r\n                        // onChange={handleDoctorChange}\r\n                        options={[\r\n                            {\r\n                                value: 'efectivo',\r\n                                label: 'Efectivo',\r\n                            },\r\n                            {\r\n                                value: 'tarjeta',\r\n                                label: 'Tarjeta',\r\n                            },\r\n                            {\r\n                                value: 'transferencia',\r\n                                label: 'Transferencia',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n                {isCreating && <div><Form.Item\r\n                    label=\"Estado\"\r\n                    name=\"estado\"\r\n                    rules={[{ required: true, message: 'Ingresa el monto' }]}\r\n                >\r\n                    <Select options={[\r\n                        {\r\n                            value: 'pendiente',\r\n                            label: 'Pendiente',\r\n                        },\r\n                        {\r\n                            value: 'pagado',\r\n                            label: 'Pagado',\r\n                        },\r\n                        {\r\n                            value: 'pago parcial',\r\n                            label: 'Pago parcial',\r\n                        },\r\n                    ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n                    <Form.Item label=\"Medico\" name=\"medico\" >\r\n                        <Select options={props.medicosData} onChange={handleDoctorChange} />\r\n                    </Form.Item>\r\n\r\n\r\n                    {\r\n                        // Para el caso que sea un ingreso sin cita\r\n                        (!props.balanceForEdit || Object.keys(props.balanceForEdit).length === 0) && <div>\r\n                            <Form.Item\r\n                                label=\"Concepto\"\r\n                                name=\"concepto\"\r\n                                rules={[{ required: true, message: 'Ingresa el concepto' }]}\r\n                            >\r\n                                <Input />\r\n                            </Form.Item>\r\n\r\n                            {\r\n                                props.tipo === 'ingreso' && <Form.Item\r\n                                    label=\"Paciente\"\r\n                                    name=\"paciente\"\r\n                                >\r\n                                    <Select\r\n                                        options={pacientesData}\r\n                                    />\r\n                                </Form.Item>\r\n                            }\r\n\r\n                        </div>\r\n                    }\r\n\r\n                    <Form.Item\r\n                        label=\"Fecha y Hora\"\r\n                        name=\"fecha_hora\"\r\n                        rules={[{ required: true, message: 'Selecciona Fecha y Hora' }]}\r\n                    >\r\n                        <DatePicker showTime format=\"DD-MM-YYYY HH:mm\" />\r\n                    </Form.Item> </div>}\r\n\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\ticket-for-print.jsx",["1246"],"import React, { useEffect, useState } from 'react';\r\nimport { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport { getData } from '../../resources';\r\nimport Logo from '../../assets/Logo.png'\r\n\r\n// Estilo para el ticket\r\nconst styles = StyleSheet.create({\r\n    titleContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n    },\r\n    reportTitle: {\r\n        fontSize: 18,\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica-Bold',\r\n        textTransform: 'uppercase',\r\n    },\r\n    subtitle: {\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica',\r\n        marginBottom: 20,\r\n    },\r\n    text: {\r\n        margin: 10,\r\n        fontSize: 12,\r\n        textAlign: 'justify',\r\n        fontFamily: 'Helvetica',\r\n    },\r\n    sellerBuyerInfo: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 10,\r\n    },\r\n    infoTitle: {\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 12,\r\n    },\r\n    infoText: {\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 12,\r\n    },\r\n    table: {\r\n        display: 'table',\r\n        width: 'auto',\r\n        marginTop: 10,\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n    },\r\n    tableRow: {\r\n        margin: 'auto',\r\n        flexDirection: 'row',\r\n    },\r\n    tableColHeader: {\r\n        width: '25%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n        backgroundColor: '#f0f0f0',\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 12,\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    tableCol: {\r\n        width: '25%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 10,\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    tableCellHeader: {\r\n        margin: 'auto',\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        flexDirection: 'row',\r\n    },\r\n    total: {\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 14,\r\n        marginTop: 30,\r\n        textAlign: 'right',\r\n        paddingRight: 50,\r\n    },\r\n\r\n    page: {\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 12,\r\n        padding: 40,\r\n        flex: 1\r\n    },\r\n    header: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        borderBottom: '1pt solid #000',\r\n        paddingBottom: 10,\r\n        marginBottom: 10,\r\n    },\r\n    logo: {\r\n        width: 80,\r\n        height: 'auto',\r\n        marginRight: 10,\r\n    },\r\n    image: {\r\n        width: 80,\r\n        paddingLeft: 16\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    company: {\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n        marginLeft: 10,\r\n    }\r\n\r\n});\r\n\r\n// Componente del ticket\r\nexport default function Ticket({ ingresos, logo, hospital, idHospital, seller, buyer }) {\r\n\r\n    const [hospitalData, setHospitalData] = useState(null)\r\n    console.log('Received for print ', ingresos)\r\n\r\n    const { usuario: { name: userName } = {} } = ingresos[0]\r\n    const { cita: { usuario: { name: citaName } = {} } = {} } = ingresos[0]\r\n\r\n    useEffect(() => {\r\n        const getHospitalData = () => {\r\n            getData(`sucursales/${idHospital}`).then((rs) => {\r\n                setHospitalData(rs[0])\r\n            })\r\n        }\r\n        getHospitalData()\r\n\r\n    }, [])\r\n\r\n\r\n    return <PDFViewer height={500} width={550}>\r\n        <Document>\r\n            <Page size=\"A4\" style={styles.page}>\r\n                <View>\r\n                    <View style={styles.header}>\r\n                        <Image style={styles.logo} src={logo} />\r\n                        <View>\r\n                            <Text style={styles.title}>Nota de Venta</Text>\r\n                            <Text style={styles.company}>{hospital} </Text>\r\n                            <Text style={styles.company}>{new Date(ingresos[0].fecha_hora).toLocaleString()} </Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.sellerBuyerInfo}>\r\n                        <View>\r\n                            <Text style={styles.infoTitle}>Medico:</Text>\r\n                            <Text style={styles.infoText}>{ingresos[0].doctor.name}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={styles.infoTitle}>Paciente:</Text>\r\n                            {userName && <Text style={styles.infoText}>{userName}</Text>}\r\n                            {citaName && <Text style={styles.infoText}>{citaName}</Text>}\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <Text style={styles.tableColHeader}>Concepto</Text>\r\n                            <Text style={styles.tableColHeader}>Cantidad</Text>\r\n                            <Text style={styles.tableColHeader}>Precio Unitario</Text>\r\n                            <Text style={styles.tableColHeader}>Subtotal</Text>\r\n                        </View>\r\n                        {ingresos.map((item) => (\r\n                            <View style={styles.tableRow} key={item.id}>\r\n                                {/* <Text style={styles.tableCol}>{item.concepto}</Text> */}\r\n                                <Text style={styles.tableCol}>{item.concepto.split([\"-\"])[0]}</Text>\r\n                                <Text style={styles.tableCol}>1</Text>\r\n                                <Text style={styles.tableCol}>${item.monto.toFixed(2)}</Text>\r\n                                <Text style={styles.tableCol}>\r\n                                    {/* ${(item.monto * item.quantity).toFixed(2)} */}\r\n                                    ${item.monto.toFixed(2)}\r\n                                </Text>\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                    <Text style={styles.total}>\r\n                        Total: ${ingresos.reduce((acc, item) => acc + item.monto * 1, 0).toFixed(2)}\r\n                    </Text>\r\n\r\n                </View>\r\n                <View style={{ flex: 1 }}></View>\r\n\r\n                <View style={{ borderTop: '1pt solid #000', paddingTop: 4, flexDirection: 'row', justifyContent: 'space-between' }}>\r\n                    {\r\n                        hospitalData && <View>\r\n                            <Text>{hospitalData.nombre} </Text>\r\n                            <Text>{hospitalData.calle} N.{hospitalData.num_exterior}</Text>\r\n                            <Text>Colonia {hospitalData.colonia}, {hospitalData.ciudad_municipio}, {hospitalData.estado}</Text>\r\n                            <Text>Telefono: {hospitalData.telefono}, Correo: {hospitalData.email}</Text>\r\n                            <Text>{hospitalData.sitio_web}</Text>\r\n                        </View>\r\n\r\n                    }\r\n\r\n                    <View style={{ textAlign: 'center' }}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text style={{ fontSize: 10, }}>www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n\r\n    </PDFViewer>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\dash.doctors.main.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\register.doctor.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\dash.patients.main.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\hospital-tab.citas.jsx",["1247","1248","1249","1250","1251","1252","1253","1254"],"import React, { useState, useEffect } from 'react';\r\nimport { API, deleteData, sendDataBody } from '../../resources';\r\nimport { Calendar, dayjsLocalizer } from 'react-big-calendar';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Modal, Popconfirm, Button, Select } from 'antd'\r\nimport dayjs from 'dayjs';\r\nimport CreateCita, { CreateCitaForm } from './create-cita-for-medic';\r\nimport Loading from '../../loading';\r\nimport DetailsCita from './details-cita';\r\n\r\nconst localizer = dayjsLocalizer(dayjs)\r\n\r\n// admin and receipt shares hospital-tab.citas and create-cita-for-medic and details.cita\r\n// ONLY RECEIPT CANT DELETE, SO, FIRST EDIT RECEIPTIONIST\r\n\r\nconst HospitalTab = ({ id_hospital, hospital }) => {\r\n\r\n    const [citaForEdit, setCitaForEdit] = useState({})\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) }\r\n  \r\n  \r\n    // Tools for createCita Modal\r\n    const [fecha_hora, setFecha_hora] = useState('')\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\r\n    // for pass to create cita model\r\n    const [pacientesData, setPacientesData] = useState([])\r\n\r\n    const [serviceList, setServiceList] = useState(null);\r\n\r\n    const [citasData, setCitasData] = useState(null)\r\n\r\n    const [loadedSuccessfully, setLoadedSuccessfully] = useState(false);\r\n\r\n    const [initialDates, setInitialDates] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(API + `users/hospital/${id_hospital}`)\r\n            .then(response => response.json())\r\n            .then(medicosResponse => {\r\n                console.log('medicos response: ', medicosResponse)\r\n                let allServices = [];\r\n                const idmeds = medicosResponse.map(doc => {\r\n                    allServices = allServices.concat(doc.configuracion.tratamientos_ofrecidos) // Extract tratamientos ofrecdos to create an unique list\r\n                    return doc._id\r\n                })\r\n                console.log('Services: ', allServices)\r\n                setServiceList(allServices)\r\n\r\n                // Llamada al segundo API\r\n                return fetch(API + 'pacientes/medicos', {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({ medicos: idmeds })\r\n                });\r\n            })\r\n            .then(response => response.json())\r\n            .then(pacientesResponse => {\r\n                console.log('Pacientes response: ', pacientesResponse)\r\n                pacientesResponse.forEach(paciente => {\r\n                    paciente.label = paciente.name; paciente.value = paciente._id;\r\n                })\r\n                setPacientesData(pacientesResponse);\r\n            })\r\n            .catch(error => {\r\n                // Manejar errores\r\n                console.error('Error:', error);\r\n            });\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        // Verificar si ambos sets de datos están disponibles y tienen contenido\r\n        if (serviceList !== null && serviceList.length > 0 && pacientesData !== null) {\r\n\r\n            const fechaActual = new Date();\r\n\r\n            // Calcular la fecha de hace una semana\r\n            const fechaHaceUnaSemana = new Date();\r\n            fechaHaceUnaSemana.setDate(fechaActual.getDate() - 7);\r\n\r\n            // Calcular la fecha dentro de una semana\r\n            const fechaDentroDeUnaSemana = new Date();\r\n            fechaDentroDeUnaSemana.setDate(fechaActual.getDate() + 31);\r\n            setInitialDates({ start_date: fechaHaceUnaSemana, end_date: fechaDentroDeUnaSemana }) // Nos servirá más adelante al crear citas\r\n            getCitasData(fechaHaceUnaSemana, fechaDentroDeUnaSemana)\r\n            // setLoadedSuccessfully(true);\r\n        }\r\n    }, [serviceList, pacientesData]);\r\n\r\n    const getCitasData = async (_start_date = initialDates.start_date, _end_date = initialDates.end_date) => {\r\n        const body = { start_date: _start_date, end_date: _end_date }\r\n\r\n        await sendDataBody(`citas/sucursal/${id_hospital}`, body).then((rs) => {\r\n            // console.log('resp ', rs)\r\n            rs.forEach((cita) => {\r\n                const servicio = cita.id_servicio; // Colorze cita\r\n                const servicioInfo = serviceList.find(servicioItem => servicioItem._id === servicio);\r\n                if (servicioInfo) {\r\n                    cita.color = servicioInfo.color;\r\n                }\r\n\r\n                cita.start = new Date(Date.parse(cita.fecha_hora));\r\n                const endDate = new Date(Date.parse(cita.fecha_hora));\r\n                endDate.setTime(endDate.getTime() + 1 * (cita.duracion ?? 60) * 60 * 1000)\r\n                cita.end = new Date(Date.parse(endDate));\r\n                cita.title = cita.usuario?.name;\r\n                cita.key = cita._id;\r\n            });\r\n            setCitasData(rs)\r\n            console.log('Citas data at end ', citasData)\r\n            setLoadedSuccessfully(true);\r\n\r\n            // setLoading(false)\r\n        })\r\n    }\r\n\r\n    // Select cita to show details and show confirm button\r\n    const selectEvent = (e) => {\r\n        console.log('For eedit', e)\r\n        if (!e.doctor) e.doctor = e.medico; // For details\r\n        if (!e.paciente) e.paciente = e.usuario; // For details\r\n        if (e.medico && e.medico._id) e.medico = e.medico._id;  // For edit\r\n        if (e.usuario && e.usuario._id) e.usuario = e.usuario._id;  // For edit\r\n        e.fecha_hora = dayjs(e.fecha_hora) //For edit \r\n        setCitaForEdit(e)\r\n        if (citaForEdit) showModal()\r\n    }\r\n\r\n\r\n    const handleSlotSelection = ({ start, end, action }) => {\r\n        setFecha_hora(dayjs(start))\r\n        setIsCreateModalOpen(true)\r\n        return { style: { backgroundColor: 'red' } };\r\n    };\r\n\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n\r\n        var style = {\r\n            backgroundColor: event.color,\r\n            borderRadius: '4px',\r\n            opacity: 0.8,\r\n            color: 'white',\r\n            border: '0px',\r\n            display: 'block'\r\n        };\r\n        return {\r\n            style: style\r\n        };\r\n    }\r\n\r\n    if (serviceList === null || pacientesData === null) {\r\n        // Muestra un mensaje de carga mientras se obtienen los datos\r\n        return <Loading />\r\n    }\r\n\r\n    if (loadedSuccessfully) {\r\n        // Mostrar el alert solo si los datos cargaron correctamente\r\n        return (\r\n            <div>\r\n\r\n                <Calendar\r\n                    scrollToTime={new Date(Date.now())}\r\n                    selectable='true'\r\n                    localizer={localizer}\r\n                    events={citasData}\r\n                    eventPropGetter={eventStyleGetter}\r\n                    startAccessor=\"start\"\r\n                    endAccessor=\"end\"\r\n                    style={{ height: 500 }}\r\n                    messages={{\r\n                        next: \"Sig\",\r\n                        previous: \"Ant\",\r\n                        today: \"Hoy\",\r\n                        month: \"Mes\",\r\n                        week: \"Semana\",\r\n                        day: \"Día\"\r\n                    }}\r\n                    defaultView=\"week\"\r\n                    onDoubleClickEvent={(e) => console.log(e)}\r\n                    onSelectEvent={selectEvent}\r\n                    onSelecting={(e) => console.log(e)}\r\n                    // onSelectSlot={handleSlotSelection}\r\n                    onSelectSlot={handleSlotSelection}\r\n                    onRangeChange={(range) => {\r\n\r\n                        console.log('Start ', range)\r\n                        console.log('End ', range.end)\r\n\r\n                    }}\r\n                />\r\n                \r\n                <DetailsCita citaForEdit={citaForEdit} getCitasData={getCitasData} id_hospital={id_hospital} isModalOpen={isModalOpen} pacientesData={pacientesData} setIsModalOpen={setIsModalOpen} />\r\n\r\n                <CreateCita setIsModalOpen={setIsCreateModalOpen} isOpenModal={isCreateModalOpen} hospital={id_hospital} fecha_hora={fecha_hora} getCitasData={getCitasData} pacientesData={pacientesData} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Si los datos no cargaron correctamente, muestra un mensaje de error\r\n    return <p>Citas no cargadas correctamente</p>;\r\n}\r\n\r\nexport default HospitalTab;","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\perfil\\perfil.edit.jsx",["1255"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Select } from 'antd';\r\nimport { getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function PerfilEdit(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.perfil.avatar)\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.perfil);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  },[])\r\n\r\n\r\n\r\n  // const onFinish = (values) => {\r\n  //   values.avatar = avatar;\r\n  //   values.estatus = '1';\r\n  //   values.rol = 'Medico';\r\n  //   delete values.confirm;\r\n  //   delete values.prefix;\r\n\r\n  //   console.log('ready to send', values)\r\n  //   fetch(S_API + 'register', {\r\n  //     method: 'POST',\r\n  //     body: JSON.stringify(values),\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json'\r\n  //     }\r\n  //   }).then(res => res.json())\r\n  //     .then(response => {\r\n  //       console.log('Success:', response);\r\n  //       response.message && response.message === 'Usuario creado correctamente' ?\r\n  //         window.location.href = 'doctores' : message.error(response.error);\r\n  //     })\r\n  //     .catch(error => console.error('Error:', error))\r\n  // };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.perfil._id, {\r\n      method: 'PUt',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setEditing(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>Editar perfil</h4>\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinishEdit}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.perfil}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('password') === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item label=\"horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: true, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={12}>\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"universidad\" label=\"Universidad\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\register.user.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\side.receptionists.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\side.doctors.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\side.hospitals.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\side.admins.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\dash.patients.jsx",["1256","1257"],"import React, { useState, useEffect } from 'react'\r\nimport { Table, Space, Button, Card, Modal, Popconfirm, Avatar } from 'antd'\r\nimport { API, deleteData } from '../../resources';\r\nimport Loading from '../../loading';\r\nimport Register from './register.patient'\r\nimport { UserOutlined } from '@ant-design/icons'\r\n\r\nexport default function Dash() {\r\n\r\n  const [usuario, setUsuario] = useState({});\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\r\n  const [isLoading, setILoading] = useState(true);\r\n  const [pacientesData, setPacientesData] = useState([]);\r\n  const [patientForEdit, setPatientForEdit] = useState(null)\r\n  const showModal = () => { setIsModalVisible(true); };\r\n  const handleOk = () => { setIsModalVisible(false); };\r\n  const handleCancel = () => { setIsModalVisible(false); };\r\n  const handleOkEdit = () => { setIsEditModalVisible(false); };\r\n  const handleCancelEdit = () => { setIsEditModalVisible(false); };\r\n\r\n  useEffect(() => {\r\n    getPacientesData()\r\n  }, [])\r\n\r\n  const getPacientesData = () => {\r\n    fetch(API + 'users_by_rol/Paciente')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data); setPacientesData(data);\r\n      })\r\n      .finally(() => setILoading(false))\r\n  }\r\n\r\n  const editPatient = async (p) => {\r\n    await setPatientForEdit(p)\r\n    setIsEditModalVisible(true);\r\n    console.log('Editar paciente: ', p)\r\n  }\r\n\r\n  const deletePatient = (patient) => {\r\n    deleteData('/users/remove/' + patient._id).then(() => {\r\n      console.log('removed: ', patient._id);\r\n      getPacientesData()\r\n    })\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Foto',\r\n      dataIndex: 'avatar',\r\n      key: 'avatar',\r\n      render: (_, { avatar }) => (\r\n        avatar.lenght > 12 ?\r\n          <img src={'https://api.recreamed.com/images/' + avatar} alt=\"Logo\" width={64} />\r\n          : <Avatar icon={<UserOutlined />} size={64} className='btnIconCentered' />\r\n\r\n      ),\r\n    },\r\n    {\r\n      title: 'Nombre',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n\r\n    {\r\n      title: 'Correo',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n\r\n    {\r\n      title: 'Telefono',\r\n      dataIndex: 'telefono',\r\n      key: 'tel',\r\n    },\r\n    // {\r\n    //   title: 'Detalles',\r\n    //   key: 'detalles',\r\n    //   render: (text, record) => (\r\n    //     <Space size=\"middle\">\r\n    //       <Button onClick={() => { setUsuario(record); showModal(); }}>Detalles</Button>\r\n    //     </Space>\r\n    //   )\r\n    // },\r\n    {\r\n      title: 'Opciones',\r\n      key: 'action',\r\n      render: (_, record) => (\r\n        <Space size=\"middle\">\r\n          <Button size='small' onClick={() => { editPatient(record) }}>\r\n            Editar\r\n          </Button>\r\n          <Popconfirm\r\n            title=\"Seguro que quiere borrar este paciente?\"\r\n            onConfirm={() => deletePatient(record)}\r\n            // onCancel={cancel}\r\n            okText=\"Si\"\r\n            cancelText=\"No\"\r\n          >\r\n            <Button danger size='small'>\r\n              Borrar\r\n            </Button>\r\n          </Popconfirm>\r\n\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const gridStyle = {\r\n    width: '50%',\r\n    height: '50px',\r\n    textAlign: 'center',\r\n    display: 'inline-flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  };\r\n\r\n  function DetalleUsuario() {\r\n    return <div>\r\n      <Card bordered={false}>\r\n        {\r\n          Object.keys(usuario).map(k => {\r\n            return <><Card.Grid style={gridStyle}>{k}</Card.Grid><Card.Grid style={gridStyle} size='small'>{usuario[k]}</Card.Grid></>\r\n          })\r\n        }\r\n      </Card>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>Pacientes</h4>\r\n      {isLoading ? <Loading /> :\r\n\r\n        <Table dataSource={pacientesData} columns={columns} />\r\n      }\r\n      <Modal width={800} title={<h4>Datos del paciente </h4>} open={isModalVisible} onOk={handleOk} onCancel={handleCancel} destroyOnClose={true}>\r\n        <DetalleUsuario />\r\n      </Modal>\r\n\r\n      <Modal width={1000} title={<h4>Editar Paciente</h4>} open={isEditModalVisible} onOk={handleOkEdit} onCancel={handleCancelEdit} destroyOnClose\r\n        footer={[]}\r\n      >\r\n        <Register paciente={patientForEdit} setIsModalVisible={setIsEditModalVisible} />\r\n      </Modal>\r\n    </div>\r\n  )\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\register.user.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\patients\\register.patient.jsx",["1258","1259","1260"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Input, Button, message, Upload, Divider, Row, Col } from 'antd'\r\nimport { InputNumber, Select } from 'antd';\r\nimport { InboxOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { S_API, API, getData, estados } from '../../resources'\r\n\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 4,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 20,\r\n    },\r\n  },\r\n};\r\nconst formItemLayoutWithOutLabel = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 20,\r\n      offset: 4,\r\n    },\r\n  },\r\n};\r\nexport default function Register(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [medicosData, setMedicosData] = useState(null)\r\n  const [medicosDataLoading, setMedicosDataLoading] = useState(true)\r\n  const [avatar, setAvatar] = useState(props.paciente ? props.paciente.avatar : 'https://')\r\n\r\n  useEffect(() => {\r\n    getData('/users_by_rol/Medico').then((res) => { setMedicosData(res); setMedicosDataLoading(false); })\r\n  }, [])\r\n\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  async function addHistoria() {\r\n    return await fetch(API + 'historias/add', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        historial: \"Historia clinica al \" + new Date()\r\n      })\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Story Created: ', response);\r\n        return response\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  }\r\n\r\n  const createPAtientData = async (usr) => {\r\n    const historia = await addHistoria();\r\n    console.log('historia on Register: ', historia);\r\n    const postBody = {\r\n      usuario: usr,\r\n      historia: historia.id_historia,\r\n      notas: [],\r\n      recetas: []\r\n    }\r\n    console.log('postBodyForExpedient: ', postBody);\r\n    await fetch(API + 'expedientes/add', {\r\n      method: 'POST',\r\n      body: JSON.stringify(postBody),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Exp on register pat:', response);\r\n        message.success(response.message || response.error);\r\n        if (response.message && response.message === 'Expediente creado correctamente') {\r\n          window.location.href = '/pacientes';\r\n          console.log('Ready to navigate');\r\n\r\n        }\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n    // .finally(() => { props.setAdding(false) }) here will be close modal\r\n  }\r\n\r\n  const onFinish = async (values) => {\r\n\r\n    // Register patient\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Paciente';\r\n    values.password = '' + values.telefono;\r\n    values.universidades = [    ];\r\n    values.certificacion = '';\r\n    values.cedula = '';\r\n    values.horarios = [];\r\n    // values.medicos_asignados = props.paciente ? props.paciente.medicos_asignados : [usuario._id];\r\n    values.responsable = props.paciente ? props.paciente.responsable : { nombre: values.res_name, telefono: values.res_phone }\r\n\r\n    delete values.prefix;\r\n    delete values.res_name;\r\n    delete values.res_phone;\r\n\r\n    const url = props.paciente ? API + 'users/updateUser/' + props.paciente._id : S_API + 'register';\r\n\r\n    console.log(values)\r\n    console.log('url: ', url);\r\n    await fetch(url, {\r\n      method: props.paciente ? 'PUT' : 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Create User Response:', response);\r\n        message.success(response.message || response.error);\r\n        props.paciente ? console.log('Editing, not creating patient') : createPAtientData(response.user_id);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Paciente';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n    // delete values.agreement;\r\n\r\n    console.log(values)\r\n    fetch(API + '/users/updateUser/:_id', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => { console.log('Success:', response); message.success(response.message || response.error); })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  return (\r\n    <div>\r\n      <h4>Registrar Usuario</h4>\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        // {...formItemLayout}\r\n        labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinish}\r\n        initialValues={props.paciente}\r\n        scrollToFirstError\r\n      >\r\n        <Row>\r\n          <Col span={10}>\r\n            <Form.Item\r\n              name=\"name\"\r\n              label=\"Nombre\"\r\n              rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.List\r\n              name=\"medicos_asignados\"\r\n              rules={[\r\n                {\r\n                  validator: async (_, medicos_asignados) => {\r\n                    if (!medicos_asignados || medicos_asignados.length < 1) {\r\n                      return Promise.reject(new Error('Ingrese al menos un medico'));\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n            >\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  {fields.map((field, index) => (\r\n                    <Form.Item\r\n                      {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                      label={index === 0 ? 'Medico' : ''}\r\n                      required={false}\r\n                      key={field.key}\r\n                    >\r\n                      <Form.Item\r\n                        {...field}\r\n                        validateTrigger={['onChange', 'onBlur']}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            whitespace: true,\r\n                            message: \"Ingrese nombre del medico o borre este campo.\",\r\n                          },\r\n                        ]}\r\n                        noStyle\r\n                      >\r\n                        <Select\r\n                          // defaultValue=\"lucy\"\r\n                          style={{\r\n                            marginLeft: 36,\r\n                            width: '80%',\r\n                          }}\r\n                        // onChange={handleChange}\r\n                        >\r\n                          {\r\n                            medicosDataLoading ? <Option value=\"loading\">Cargando...</Option> :\r\n                              medicosData.map((m) => <Option value={m._id}>{m.name}</Option>)\r\n                          }\r\n\r\n                        </Select>\r\n                      </Form.Item>\r\n                      {\r\n                        fields.length > 1 ? (\r\n                          <MinusCircleOutlined\r\n                            style={{ marginLeft: 2 }}\r\n                            className=\"dynamic-delete-button\"\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        ) : null\r\n                      }\r\n                    </Form.Item>\r\n                  ))}\r\n                  <Form.Item>\r\n                    <Button type=\"dashed\" onClick={() => add()} style={{ width: '100%', marginLeft: 108 }} icon={<PlusOutlined />}>\r\n                      Asignar Medico\r\n                    </Button>\r\n                    {/* <Button type=\"dashed\" onClick={() => { add('The head item', 0) }} style={{ width: '60%', marginTop: '20px' }} icon={<PlusOutlined />}>Add field at head</Button> */}\r\n                    <Form.ErrorList errors={errors} />\r\n                  </Form.Item>\r\n                </>\r\n              )}\r\n            </Form.List>\r\n\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"Correo\"\r\n              rules={[{ type: 'email', message: 'Ingresa un correo electronico vaido!' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"telefono\"\r\n              label=\"Telefono\"\r\n              rules={[{ required: true, message: 'Please input your phone number!' }]}\r\n            >\r\n              <Input\r\n                addonBefore={prefixSelector}\r\n                style={{\r\n                  width: '100%',\r\n                }}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Divider>Responsable (opcional)</Divider>\r\n            <Form.Item\r\n              name=\"res_name\"\r\n              label=\"Nombre\"\r\n              rules={[{ message: 'Ingresa Nombre y apellidos' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"res_phone\"\r\n              label=\"Telefono\"\r\n              rules={[{ message: 'Ingresa Nombre y apellidos' }\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n\r\n          <Col span={10}>\r\n            <Form.Item\r\n              name=\"calle\"\r\n              label=\"Calle\"\r\n              rules={[{ required: false, message: 'Ingresa calle', whitespace: true }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"numexterior\"\r\n              label=\"Num Exterior\"\r\n              rules={[{ required: false, message: 'Ingresa numero exterior' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"numinterior\"\r\n              label=\"Num Interior\"\r\n              rules={[{ required: false, message: 'Ingresa numinterior' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Colonia\"\r\n              name=\"colonia\"\r\n              rules={[{ required: false, message: 'Please input your colobnia!' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\" showSearch>\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"municipio\"\r\n              label=\"Municipio\"\r\n              rules={[{ required: true, message: 'Ingresa tu municipio' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: false, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item wrapperCol={{ span: 12 }} labelCol={{ span: 2 }} >\r\n              {\r\n                props.setIsModalVisible && <Button onClick={() => props.setIsModalVisible(false)} style={{ marginRight: 8 }}>Cancelar</Button>\r\n              }\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Registrar\r\n              </Button>\r\n            </Form.Item>\r\n\r\n          </Col>\r\n\r\n\r\n\r\n\r\n        </Row>\r\n      </Form>\r\n    </div >\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\ticket-for-print.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\details.corte.jsx",["1261"],"import { useEffect, useState } from \"react\";\r\nimport { Button, Modal, Typography, Table } from 'antd'\r\nimport * as FileSaver from 'file-saver';\r\nimport XLSX from \"sheetjs-style\";\r\nimport { sendDataBody, getData, usuario, myHospitals } from '../../resources'\r\nimport CorteDocument from \"./corteForPrint\";\r\nconst { Text } = Typography;\r\n\r\nexport default function Detalles(props) {\r\n    const [pacientesData, setPacientesData] = useState([])\r\n    const [isPrinting, setIsPrinting] = useState(false)\r\n\r\n    const [ingresos, setIngresos] = useState({})\r\n    const [totales, setTotales] = useState({})\r\n    const handleOk = () => { props.setIsModalOpen(false) };\r\n\r\n    useEffect(() => { return getPacientesData() }, [])\r\n\r\n    // Here creates the main data\r\n    useEffect(() => {\r\n        sendDataBody(`balances/ingresos/corte`, props.corte).then(rs => {\r\n            console.log(rs)\r\n            let totalIngresos = 0;\r\n            let totalPendiente = 0;\r\n            let totalCobros = rs.length;\r\n            let totalPagados = 0;\r\n            let totalPendientes = 0;\r\n            let totalEfectivo = 0;\r\n            let totalTarjeta = 0;\r\n            let totalTransferencia = 0;\r\n            let listOfDeudors = [];\r\n            rs.forEach(c => {\r\n\r\n\r\n                if (c.abono === c.monto || c.estado === 'pagado') {\r\n\r\n                    switch (c.forma_de_pago) {\r\n                        case 'efectivo':\r\n                            totalEfectivo += c.monto;\r\n                            break;\r\n                        case 'transferencia':\r\n                            totalTransferencia += c.monto;\r\n                            break;\r\n                        case 'tarjeta':\r\n                            totalTarjeta += c.monto;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n\r\n                    totalIngresos += c.monto;\r\n                    totalPagados++\r\n                } else {\r\n                    totalPendiente += c.monto;\r\n                    totalPendientes++;\r\n                    // listOfDeudors.push(c)\r\n                }\r\n            });\r\n            const totales = {\r\n                ingresosTotales: totalIngresos,\r\n                deudasTotales: totalPendiente,\r\n                cobrosTotales: totalCobros,\r\n                pagados: totalPagados,\r\n                pendientes: totalPendientes,\r\n                totalEfectivo,\r\n                totalTarjeta,\r\n                totalTransferencia,\r\n                // listOfDeudors\r\n            }\r\n            setIngresos(rs)\r\n            setTotales(totales)\r\n        })\r\n\r\n\r\n    }, [props.corte])\r\n\r\n\r\n\r\n    // Give me the patients to match names\r\n    const getPacientesData = () => { getData(`mispacientes/${usuario._id}`).then((rs) => { setPacientesData(rs); }) }\r\n    const MatchPatient = ({ paciente }) => {\r\n        const patient = pacientesData.find((p) => paciente === p._id)\r\n        return <div>{patient ? patient.name : <Text disabled>Paciente eliminado o no existente</Text>} <p style={{ fontSize: 10 }}>Tomado de la cita</p></div>\r\n    }\r\n    const columns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'cita.paciente',\r\n            dataIndex: 'cita',\r\n            render: (_, record) => {\r\n                if (record.cita) return <MatchPatient paciente={record.cita.usuario} />\r\n                else if (record.paciente) return <>{record.paciente.name}</>\r\n                else return <Text type=\"secondary\"> Sin Paciente</Text>\r\n            },\r\n        },\r\n        {\r\n            title: 'Monto',\r\n            dataIndex: 'monto',\r\n            key: 'monto',\r\n            render: (_, { monto }) => <>${monto}</>\r\n        },\r\n        {\r\n            title: 'Fecha y Hora',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n            render: (_, { createdAt }) => { return <>{new Date(createdAt).toLocaleString()}</> }\r\n        },\r\n\r\n    ];\r\n\r\n\r\n    const filetype = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtextension = '.xlsx';\r\n\r\n    const exportToExcel = async () => {\r\n        const ws = XLSX.utils.json_to_sheet([totales]);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n\r\n        // Aplicar estilo a una celda específica (ejemplo: primera fila)\r\n        ws['A1'].s= {\r\n            font: { bold: true, color: { rgb: '000000' } },\r\n            fill: { fgColor: { rgb: 'FFFF00' } }\r\n        };\r\n        ws['A2'].s= {\r\n            font: { bold: true, color: { rgb: '000000' } },\r\n            fill: { fgColor: { rgb: 'FFFF00' } }\r\n        };\r\n\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], { type: filetype })\r\n        FileSaver.saveAs(data, 'corte' + new Date().toLocaleDateString() + fileExtextension)\r\n    }\r\n\r\n    return <Modal width={600} title=\"Detalles del corte\" open={props.isModalOpen} onCancel={handleOk} destroyOnClose\r\n        footer={[\r\n            <Button onClick={() => setIsPrinting(!isPrinting)}>{isPrinting ? \"Cancelar Impresion\" : \"Imprimir PDF\"}</Button>,\r\n            <Button onClick={() => exportToExcel()}>Exportar a excel</Button>,\r\n            <Button onClick={handleOk}>Cerrar</Button>\r\n        ]}\r\n    >\r\n\r\n        {\r\n            // JSON.stringify(ingresos)\r\n        }\r\n        {\r\n            // JSON.stringify(totales)\r\n        }\r\n\r\n        {isPrinting\r\n            ?\r\n            <CorteDocument corte={props.corte} ingresos={ingresos} totales={totales} logo={`https://api.recreamed.com/images/${myHospitals[0].logo}`} hospital={myHospitals[0].nombre} /> :\r\n            <div>\r\n\r\n                <h5>Ingresos </h5>\r\n                <h5>Pagados: {totales.pagados}</h5>\r\n                <h5>Total: <span style={{ color: '#3277a8' }}>${totales.ingresosTotales}</span></h5>\r\n                <br />\r\n                <h5>Pendientes</h5>\r\n                <h5>Total: <span style={{ color: '#eb3d43' }}>${totales.deudasTotales}</span></h5>\r\n\r\n                {\r\n                    totales.listOfDeudors && totales.listOfDeudors.length > 0 && <Table dataSource={totales.listOfDeudors} columns={columns} bordered={false} size='small' />\r\n                }\r\n\r\n            </div>\r\n        }\r\n\r\n    </ Modal>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\ingresos\\create-ingreso.jsx",["1262"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, Form, Input, Select, message, DatePicker, InputNumber } from 'antd';\r\nimport { getData, sendDataBody, updateData } from '../../resources';\r\n// ADMIN CREATE INGRESO\r\nexport default function CreateBalance(props) {\r\n\r\n    const isCreating = !props.balanceForEdit;\r\n\r\n    const [pacientesData, setPacientesData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const handleOk = () => { props.setIsModalOpen(false) };\r\n    const handleCancel = () => { props.setIsModalOpen(false); props.setBalanceForEdit(null) };\r\n\r\n    useEffect(() => {\r\n        // console.log('receivd for edit nm', props.balanceForEdit)\r\n        // console.log('receivd for edit nm', nombreDoctor)\r\n        if (props.balanceForEdit && props.balanceForEdit.medico) {\r\n            getPacientesData(props.balanceForEdit.medico)\r\n        }\r\n\r\n    }, [props.balanceForEdit])\r\n\r\n\r\n    // Start of filtering patients to show in select\r\n    const getPacientesData = (medico) => {\r\n        // if (props.balanceForEdi) {\r\n        getData(`mispacientes/${medico}`).then((rs) => {\r\n            if (rs) {\r\n                rs.forEach(patient => {\r\n                    patient.value = patient._id; patient.label = patient.name;\r\n                });\r\n                console.log('Pacientes: ', rs)\r\n                setPacientesData(rs)\r\n            }\r\n        }).finally(() => { setLoading(false) })\r\n        // }\r\n    }\r\n    // End of filtering patients to show in select\r\n\r\n    // Form methods\r\n    const onFinish = (values) => {\r\n        // if (Object.keys(props.balanceForEdit).length === 0 || !props.balanceForEdit) {\r\n        //     values.medico = props.medico;\r\n        //     values.tipo = 'ingreso';\r\n        //     values.fecha_hora = new Date();\r\n        // }\r\n\r\n        values.estado = 'pendiente';\r\n        values.tipo = props.tipo;\r\n        console.log('Ready to send:', values);\r\n        console.log('For Edit: ', props.balanceForEdit);\r\n        if (!props.balanceForEdit || Object.keys(props.balanceForEdit).length === 0) {\r\n            sendDataBody(`balances/add`, values).then((rs) => { console.log(rs); message.success(rs.message || rs.error) }).finally(() => { props.getIngresos(); props.setIsModalOpen(false) })\r\n        } else {\r\n            updateData(`/balances/update/${props.balanceForEdit._id}`, values).then((rs) => {\r\n                console.log(rs); props.setBalanceForEdit({}); props.getIngresos(); props.setIsModalOpen(false);\r\n            })\r\n        }\r\n        \r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => { console.log('Failed:', errorInfo) };\r\n\r\n    const handleDoctorChange = (value) => { getPacientesData(value) };\r\n\r\n    // const EditingForm = () => {\r\n    //     const { doctor: { name: nombreDoctor }, monto, forma_de_pago, fecha_hora, concepto } = props.balanceForEdit;\r\n\r\n    // }\r\n\r\n    return (\r\n        <Modal title={props.balanceForEdit ? \"Editar Estado\" : 'Agregar Ingreso'} open={props.isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='edit_balance'>\r\n                    Guardar\r\n                </Button>,\r\n                <Button onClick={handleCancel}>\r\n                    Cancelar\r\n                </Button>\r\n            ]}>\r\n\r\n            <Form\r\n                name=\"edit_balance\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={props.balanceForEdit}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                {\r\n                    isCreating ? <div> <Form.Item label=\"Monto\" name=\"monto\" rules={[{ required: true, message: 'Ingresa el monto' }]} >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                        <Form.Item label=\"Concepto\" name=\"concepto\" rules={[{ required: true, message: 'Ingresa el concepto' }]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Medico\" name=\"medico\" >\r\n                            <Select options={props.medicosData} onChange={handleDoctorChange} />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Paciente\" name=\"paciente\" >\r\n                            <Select options={pacientesData} />\r\n                        </Form.Item>\r\n\r\n\r\n\r\n\r\n                        <Form.Item\r\n                            label=\"Fecha y Hora\"\r\n                            name=\"fecha_hora\"\r\n                            rules={[{ required: true, message: 'Selecciona Fecha y Hora' }]}\r\n                        >\r\n                            <DatePicker showTime format=\"DD-MM-YYYY HH:mm\" />\r\n                        </Form.Item></div> : <div></div>\r\n                }\r\n\r\n                <Form.Item label=\"abono\" name=\"abono\" rules={[{ required: true, message: 'Ingresa el abobo' }]} >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Forma de Pago\" name=\"forma_de_pago\" >\r\n                    <Select\r\n                        options={[\r\n                            {\r\n                                value: 'efectivo',\r\n                                label: 'Efectivo',\r\n                            },\r\n                            {\r\n                                value: 'tarjeta',\r\n                                label: 'Tarjeta',\r\n                            },\r\n                            {\r\n                                value: 'transferencia',\r\n                                label: 'Transferencia',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n\r\n\r\n                {/* <Form.Item\r\n                    label=\"Estado\"\r\n                    name=\"estado\"\r\n                    rules={[{ required: true, message: 'Selecciona el estado' }]}\r\n                >\r\n                    <Select\r\n                        // onChange={handleDoctorChange}\r\n                        options={[\r\n                            {\r\n                                value: 'pendiente',\r\n                                label: 'Pendiente',\r\n                            },\r\n                            {\r\n                                value: 'pagado',\r\n                                label: 'Pagado',\r\n                            },\r\n                            {\r\n                                value: 'pago parcial',\r\n                                label: 'Pago parcial',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item> */}\r\n\r\n            </Form>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\dash.patients.main.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\create.corte.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\hospital-tab.citas.jsx",["1263","1264","1265","1266","1267","1268","1269","1270"],"import React, { useState, useEffect } from 'react';\r\nimport { API, deleteData, sendDataBody } from '../../resources';\r\nimport { Calendar, dayjsLocalizer } from 'react-big-calendar';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Modal, Popconfirm, Button, Select } from 'antd'\r\nimport dayjs from 'dayjs';\r\nimport CreateCita, { CreateCitaForm } from './create-cita-for-medic';\r\nimport Loading from '../../loading';\r\nimport DetailsCita from './details-cita';\r\nimport RegisterPatientReception from './register.patient';\r\n\r\nconst localizer = dayjsLocalizer(dayjs)\r\n\r\n// admin and receipt shares hospital-tab.citas and create-cita-for-medic and details.cita\r\n// ONLY RECEIPT CANT DELETE, SO, FIRST EDIT RECEIPTIONIST\r\n\r\nconst HospitalTab = ({ id_hospital, hospital }) => {\r\n\r\n    const [citaForEdit, setCitaForEdit] = useState({})\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) }\r\n\r\n\r\n    // Tools for createCita Modal\r\n    const [fecha_hora, setFecha_hora] = useState('')\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)\r\n    // for pass to create cita model\r\n    const [pacientesData, setPacientesData] = useState([])\r\n\r\n    const [serviceList, setServiceList] = useState(null);\r\n\r\n    const [citasData, setCitasData] = useState(null)\r\n\r\n    const [loadedSuccessfully, setLoadedSuccessfully] = useState(false);\r\n\r\n    const [initialDates, setInitialDates] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        getPatientsData()\r\n    }, []);\r\n\r\n\r\n    const getPatientsData = () => {\r\n        fetch(API + `users/hospital/${id_hospital}`)\r\n            .then(response => response.json())\r\n            .then(medicosResponse => {\r\n                console.log('medicos response: ', medicosResponse)\r\n                let allServices = [];\r\n                const idmeds = medicosResponse.map(doc => {\r\n                    allServices = allServices.concat(doc.configuracion.tratamientos_ofrecidos) // Extract tratamientos ofrecdos to create an unique list\r\n                    return doc._id\r\n                })\r\n                console.log('Services: ', allServices)\r\n                setServiceList(allServices)\r\n\r\n                // Llamada al segundo API\r\n                return fetch(API + 'pacientes/medicos', {\r\n                    method: \"POST\",\r\n                    headers: { \"Content-Type\": \"application/json\" },\r\n                    body: JSON.stringify({ medicos: idmeds })\r\n                });\r\n            })\r\n            .then(response => response.json())\r\n            .then(pacientesResponse => {\r\n                console.log('Pacientes response: ', pacientesResponse)\r\n                pacientesResponse.forEach(paciente => {\r\n                    paciente.label = paciente.name; paciente.value = paciente._id;\r\n                })\r\n                setPacientesData(pacientesResponse);\r\n            })\r\n            .catch(error => {\r\n                // Manejar errores\r\n                console.error('Error:', error);\r\n            })\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // Verificar si ambos sets de datos están disponibles y tienen contenido\r\n        if (serviceList !== null && serviceList.length > 0 && pacientesData !== null) {\r\n\r\n            const fechaActual = new Date();\r\n\r\n            // Calcular la fecha de hace una semana\r\n            const fechaHaceUnaSemana = new Date();\r\n            fechaHaceUnaSemana.setDate(fechaActual.getDate() - 7);\r\n\r\n            // Calcular la fecha dentro de una semana\r\n            const fechaDentroDeUnaSemana = new Date();\r\n            fechaDentroDeUnaSemana.setDate(fechaActual.getDate() + 50);\r\n            setInitialDates({ start_date: fechaHaceUnaSemana, end_date: fechaDentroDeUnaSemana }) // Nos servirá más adelante al crear citas\r\n            getCitasData(fechaHaceUnaSemana, fechaDentroDeUnaSemana)\r\n            // setLoadedSuccessfully(true);\r\n        }\r\n    }, [serviceList, pacientesData]);\r\n\r\n    const getCitasData = async (_start_date = initialDates.start_date, _end_date = initialDates.end_date) => {\r\n        const body = { start_date: _start_date, end_date: _end_date }\r\n\r\n        await sendDataBody(`citas/sucursal/${id_hospital}`, body).then((rs) => {\r\n            // console.log('resp ', rs)\r\n            rs.forEach((cita) => {\r\n                const servicio = cita.id_servicio; // Colorze cita\r\n                const servicioInfo = serviceList.find(servicioItem => servicioItem._id === servicio);\r\n                if (servicioInfo) {\r\n                    cita.color = servicioInfo.color;\r\n                }\r\n\r\n                cita.start = new Date(Date.parse(cita.fecha_hora));\r\n                const endDate = new Date(Date.parse(cita.fecha_hora));\r\n                endDate.setTime(endDate.getTime() + 1 * (cita.duracion ?? 60) * 60 * 1000)\r\n                cita.end = new Date(Date.parse(endDate));\r\n                cita.title = cita.usuario?.name;\r\n                cita.key = cita._id;\r\n            });\r\n            setCitasData(rs)\r\n            console.log('Citas data at end ', citasData)\r\n            setLoadedSuccessfully(true);\r\n\r\n            // setLoading(false)\r\n        })\r\n    }\r\n\r\n    // Select cita to show details and show confirm button\r\n    const selectEvent = (e) => {\r\n        console.log('For eedit', e)\r\n        if (!e.doctor) e.doctor = e.medico; // For details\r\n        if (!e.paciente) e.paciente = e.usuario; // For details\r\n        if (e.medico && e.medico._id) e.medico = e.medico._id;  // For edit\r\n        if (e.usuario && e.usuario._id) e.usuario = e.usuario._id;  // For edit\r\n        e.fecha_hora = dayjs(e.fecha_hora) //For edit \r\n        setCitaForEdit(e)\r\n        if (citaForEdit) showModal()\r\n    }\r\n\r\n\r\n    const handleSlotSelection = ({ start, end, action }) => {\r\n        setFecha_hora(dayjs(start))\r\n        setIsCreateModalOpen(true)\r\n        return { style: { backgroundColor: 'red' } };\r\n    };\r\n\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n\r\n        var style = {\r\n            backgroundColor: event.color,\r\n            borderRadius: '4px',\r\n            opacity: 0.8,\r\n            color: 'white',\r\n            border: '0px',\r\n            display: 'block'\r\n        };\r\n        return {\r\n            style: style\r\n        };\r\n    }\r\n\r\n    if (serviceList === null || pacientesData === null) {\r\n        // Muestra un mensaje de carga mientras se obtienen los datos\r\n        return <Loading />\r\n    }\r\n\r\n    if (loadedSuccessfully) {\r\n        // Mostrar el alert solo si los datos cargaron correctamente\r\n        return (\r\n            <div>\r\n\r\n                <RegisterPatientReception getPacientesData={getPatientsData} />\r\n\r\n                <Calendar\r\n                    scrollToTime={new Date(Date.now())}\r\n                    selectable='true'\r\n                    localizer={localizer}\r\n                    events={citasData}\r\n                    eventPropGetter={eventStyleGetter}\r\n                    startAccessor=\"start\"\r\n                    endAccessor=\"end\"\r\n                    style={{ height: 500 }}\r\n                    messages={{\r\n                        next: \"Sig\",\r\n                        previous: \"Ant\",\r\n                        today: \"Hoy\",\r\n                        month: \"Mes\",\r\n                        week: \"Semana\",\r\n                        day: \"Día\"\r\n                    }}\r\n                    defaultView=\"week\"\r\n                    onDoubleClickEvent={(e) => console.log(e)}\r\n                    onSelectEvent={selectEvent}\r\n                    onSelecting={(e) => console.log(e)}\r\n                    // onSelectSlot={handleSlotSelection}\r\n                    onSelectSlot={handleSlotSelection}\r\n                    onRangeChange={(range) => {\r\n                        console.log('------------- On Date Changes -----------------')\r\n                        console.log('Start ', range)\r\n                        console.log('End ', range.end)\r\n\r\n                    }}\r\n                />\r\n\r\n                <DetailsCita citaForEdit={citaForEdit} getCitasData={getCitasData} id_hospital={id_hospital} isModalOpen={isModalOpen} pacientesData={pacientesData} setIsModalOpen={setIsModalOpen} />\r\n\r\n                <CreateCita setIsModalOpen={setIsCreateModalOpen} isOpenModal={isCreateModalOpen} hospital={id_hospital} fecha_hora={fecha_hora} getCitasData={getCitasData} pacientesData={pacientesData} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Si los datos no cargaron correctamente, muestra un mensaje de error\r\n    return <p>Citas no cargadas correctamente</p>;\r\n}\r\n\r\nexport default HospitalTab;","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\side.patients.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\create-balance.jsx",["1271"],"import { useState, useEffect } from 'react'\r\nimport { Button, Modal, Form, Input, Select, InputNumber, message } from 'antd';\r\nimport { getData, sendDataBody, updateData, usuario } from '../../resources';\r\n// DOCTOR CREATE BALANCE\r\nexport default function CreateBalance(props) {\r\n\r\n    const [pacientesData, setPacientesData] = useState({})\r\n    const handleOk = () => { props.setIsModalOpen(false) };\r\n    const handleCancel = () => { props.setIsModalOpen(false); props.setBalanceForEdit(null) };\r\n\r\n    useEffect(() => {\r\n        console.log('received for edit ', props.balanceForEdit)\r\n        return getPacientesData()\r\n    }, [])\r\n    useEffect(() => {\r\n        console.log('received for edit ', props.balanceForEdit)\r\n    }, [props.balanceForEdit])\r\n\r\n    const getPacientesData = () => {\r\n        getData(`mispacientes/${usuario._id}`).then((rs) => {\r\n            rs.forEach(p => { p.label = p.name; p.value = p._id; });\r\n            setPacientesData(rs);\r\n        })\r\n    }\r\n\r\n    // Form methods\r\n    const onFinish = (values) => {\r\n\r\n        if (!props.balanceForEdit || Object.keys(props.balanceForEdit).length === 0) {\r\n            values.medico = usuario._id\r\n            values.fecha_hora = new Date();\r\n            values.tipo = props.tipo;\r\n            values.estado = 'pendiente'\r\n        }\r\n\r\n\r\n        console.log('Ready to send:', values);\r\n        console.log('For Edit: ', props.balanceForEdit);\r\n\r\n        (props.balanceForEdit && Object.keys(props.balanceForEdit).length > 0) ?\r\n            updateData(`/balances/update/${props.balanceForEdit._id}`, values).then((rs) => {\r\n                console.log(rs); props.setBalanceForEdit({}); props.setIsModalOpen(false); props.getBalancesData()\r\n            })\r\n            :\r\n            sendDataBody(`balances/add`, values)\r\n                .then((rs) => { console.log(rs); message.success(rs.message || rs.error) })\r\n                .finally(() => {\r\n                    props.setBalanceForEdit({}); props.setIsModalOpen(false); props.getBalancesData()\r\n                })\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => { console.log('Failed:', errorInfo) };\r\n\r\n    const handleChange = (value) => { console.log(`selected ${value}`) };\r\n\r\n    return (\r\n        <Modal title={props.balanceForEdit ? `Editar ${props.tipo}` : `Agregar ${props.tipo}`} open={props.isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='edit_balance'>\r\n                    Guardar\r\n                </Button>,\r\n                <Button onClick={handleCancel}>\r\n                    Cancelar\r\n                </Button>\r\n            ]}>\r\n            <Form\r\n                name=\"edit_balance\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={props.balanceForEdit}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n\r\n                <Form.Item\r\n                    label=\"Monto\"\r\n                    name=\"monto\"\r\n                    rules={[{ required: true, message: 'Ingresa el monto' }]}\r\n                >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Abono\"\r\n                     name=\"abono\"\r\n                    rules={[{ required: true, message: 'Ingresa el abono' }]}\r\n                >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                {\r\n                    // Para el caso que sea un ingreso sin cita\r\n                    (!props.balanceForEdit || Object.keys(props.balanceForEdit).length === 0) && <div>\r\n                        <Form.Item\r\n                            label=\"Concepto\"\r\n                            name=\"concepto\"\r\n                            rules={[{ required: true, message: 'Ingresa el concepto' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        {\r\n                            props.tipo === 'ingreso' && <Form.Item\r\n                                label=\"Paciente\"\r\n                                name=\"paciente\"\r\n                            >\r\n                                <Select\r\n                                    onChange={handleChange}\r\n                                    options={pacientesData}\r\n                                />\r\n                            </Form.Item>\r\n                        }\r\n\r\n                    </div>\r\n                }\r\n\r\n                <Form.Item\r\n                    label=\"Forma de Pago\"\r\n                    name=\"forma_de_pago\"\r\n                >\r\n                    <Select\r\n                        onChange={handleChange}\r\n                        options={[\r\n                            {\r\n                                value: 'efectivo',\r\n                                label: 'Efectivo',\r\n                            },\r\n                            {\r\n                                value: 'tarjeta',\r\n                                label: 'Tarjeta',\r\n                            },\r\n                            {\r\n                                value: 'transferencia',\r\n                                label: 'Transferencia',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n                {/* <Form.Item\r\n                    label=\"Estado\"\r\n                    name=\"estado\"\r\n                    rules={[{ required: true, message: 'Ingresa el monto' }]}\r\n                >\r\n                    <Select\r\n                        onChange={handleChange}\r\n                        options={[\r\n                            {\r\n                                value: 'pendiente',\r\n                                label: 'Pendiente',\r\n                            },\r\n                            {\r\n                                value: 'pagado',\r\n                                label: 'Pagado',\r\n                            },\r\n                            {\r\n                                value: 'pago parcial',\r\n                                label: 'Pago parcial',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item> */}\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\balances\\ticket-for-print.jsx",["1272"],"import React, { useState, useEffect } from 'react';\r\nimport { Document, Page, Text, View, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport { getData } from '../../resources';\r\nimport Logo from '../../assets/Logo.png'\r\n\r\n// Estilo para el ticket\r\nconst styles = StyleSheet.create({\r\n    titleContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n    },\r\n    reportTitle: {\r\n        fontSize: 18,\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica-Bold',\r\n        textTransform: 'uppercase',\r\n    },\r\n    subtitle: {\r\n        fontSize: 14,\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica',\r\n        marginBottom: 20,\r\n    },\r\n    text: {\r\n        margin: 10,\r\n        fontSize: 12,\r\n        textAlign: 'justify',\r\n        fontFamily: 'Helvetica',\r\n    },\r\n    sellerBuyerInfo: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        marginBottom: 10,\r\n    },\r\n    infoTitle: {\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 12,\r\n    },\r\n    infoText: {\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 12,\r\n    },\r\n    table: {\r\n        display: 'table',\r\n        width: 'auto',\r\n        marginTop: 10,\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n    },\r\n    tableRow: {\r\n        margin: 'auto',\r\n        flexDirection: 'row',\r\n    },\r\n    tableColHeader: {\r\n        width: '25%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n        backgroundColor: '#f0f0f0',\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 12,\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    tableCol: {\r\n        width: '25%',\r\n        borderStyle: 'solid',\r\n        borderWidth: 1,\r\n        borderColor: '#bfbfbf',\r\n        textAlign: 'center',\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 10,\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    tableCellHeader: {\r\n        margin: 'auto',\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        flexDirection: 'row',\r\n    },\r\n    total: {\r\n        fontFamily: 'Helvetica-Bold',\r\n        fontSize: 14,\r\n        marginTop: 30,\r\n        textAlign: 'right',\r\n        paddingRight: 50,\r\n    },\r\n\r\n    page: {\r\n        fontFamily: 'Helvetica',\r\n        fontSize: 12,\r\n        padding: 40,\r\n    },\r\n    header: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        borderBottom: '1pt solid #000',\r\n        paddingBottom: 10,\r\n        marginBottom: 10,\r\n    },\r\n    image: {\r\n        width: 80,\r\n        paddingLeft: 16\r\n    },\r\n    logo: {\r\n        width: 50,\r\n        height: 50,\r\n        marginRight: 10,\r\n        overflow: 'hidden'\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    company: {\r\n        fontSize: 14,\r\n        marginTop: 5,\r\n        marginLeft: 10,\r\n    },\r\n});\r\n\r\n// Componente del ticket\r\nexport default function Ticket({ ingresos, logo, idHospital, buyer }) {\r\n\r\n    const [hospitalData, setHospitalData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const getHospitalData = () => {\r\n\r\n            getData(`sucursales/${idHospital}`).then((rs) => {\r\n                console.log('HospitalData',hospitalData)\r\n                setHospitalData(rs[0])\r\n            })\r\n        }\r\n        getHospitalData()\r\n        console.log('ingresos for print ', ingresos)\r\n    }, [])\r\n\r\n\r\n    console.log('Received for print ', ingresos)\r\n    return <PDFViewer height={500} width={550}>\r\n        <Document>\r\n            <Page size=\"A4\" style={styles.page}>\r\n                <View>\r\n                    <View style={styles.header}>\r\n\r\n                        {\r\n                            hospitalData && hospitalData.logo &&\r\n                            <Image style={styles.logo} source={`https://api.recreamed.com/images/${hospitalData.logo}`} />\r\n                        }\r\n\r\n                        <View>\r\n                            <Text style={styles.title}>Nota de Venta</Text>\r\n                            <Text style={styles.company}>Hospital: {hospitalData.nombre}</Text>\r\n                            <Text style={styles.company}>{new Date(ingresos[0].createdAt).toLocaleString()} </Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.sellerBuyerInfo}>\r\n                        <View>\r\n                            <Text style={styles.infoTitle}>Medico:</Text>\r\n                            <Text style={styles.infoText}>{ingresos[0].medico.name}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={styles.infoTitle}>Paciente:</Text>\r\n                            {/* <Text style={styles.infoText}>{ingresos[0].paciente ? ingresos[0].paciente.name : 'Sin paciente'}</Text> */}\r\n                            <Text style={styles.infoText}>{ingresos[0].cita ? ingresos[0].cita.usuario.name : 'Sin paciente'}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <Text style={styles.tableColHeader}>Concepto</Text>\r\n                            <Text style={styles.tableColHeader}>Cantidad</Text>\r\n                            <Text style={styles.tableColHeader}>Precio Unitario</Text>\r\n                            <Text style={styles.tableColHeader}>Subtotal</Text>\r\n                        </View>\r\n                        {ingresos.map((item) => (\r\n                            <View style={styles.tableRow} key={item.id}>\r\n\r\n                                <Text style={styles.tableCol}>{item.concepto ? item.concepto.split([\"-\"])[0] : item.cita.servicio.split([\"-\"])[0]}</Text>\r\n                                <Text style={styles.tableCol}>1</Text>\r\n                                <Text style={styles.tableCol}>{item.monto ? `$${item.monto.toFixed(2)}` : item.cita.servicio.split(\"-\")[1]}</Text>\r\n                                <Text style={styles.tableCol}>\r\n                                    {/* ${(item.monto * item.quantity).toFixed(2)} */}\r\n                                    {item.monto ? `$${item.monto.toFixed(2)}` : item.cita.servicio.split(\"-\")[1]}\r\n                                </Text>\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                    <Text style={styles.total}>\r\n                        {/* Total: ${ingresos.reduce((acc, item) => acc + item.monto * 1, 0).toFixed(2)} */}\r\n                        Total: {ingresos[0].monto ? `$${ingresos[0].monto.toFixed(2)}` : ingresos[0].cita.servicio.split(\"-\")[1]}\r\n                    </Text>\r\n                </View>\r\n\r\n                <View style={{ flex: 1 }}></View>\r\n\r\n                <View style={{ borderTop: '1pt solid #000', paddingTop: 4, flexDirection: 'row', justifyContent: 'space-between', fontSize: 10 }}>\r\n                    {\r\n                        hospitalData && <View>\r\n                            <Text>{hospitalData.nombre} </Text>\r\n                            <Text>{hospitalData.calle} N.{hospitalData.num_exterior}</Text>\r\n                            <Text>Colonia {hospitalData.colonia}, {hospitalData.ciudad_municipio}, {hospitalData.estado}</Text>\r\n                            <Text>Telefono: {hospitalData.telefono}, Correo: {hospitalData.email}</Text>\r\n                            {/* <Text>{hospitalData.sitio_web}</Text> */}\r\n                        </View>\r\n                    }\r\n\r\n                    <View style={{ textAlign: 'center' }}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text>www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n\r\n    </PDFViewer>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolor_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketamina_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccion_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresion_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\perfil\\service.add.jsx",["1273","1274"],"import React, { useEffect, useState } from 'react'\r\nimport { Form, Input, Button, InputNumber, Modal, ColorPicker } from 'antd';\r\nimport { updateData, pre_colors } from '../../resources';\r\n\r\nexport default function AddService({ isOpen, handleClose, service, profileData, getProfileData }) {\r\n\r\n    const [initialService, setinitialService] = useState(null)\r\n\r\n    useEffect(() => {\r\n        console.log('before', profileData)\r\n        setinitialService(service)\r\n    }, [service])\r\n\r\n    const onFinish = async (values) => {\r\n        if (values.color.metaColor) values.color = '#' + values.color.metaColor.originalInput;\r\n        console.log(values)\r\n        const newData = profileData.configuracion ? { configuracion: { tratamientos_ofrecidos: [...profileData.configuracion.tratamientos_ofrecidos, values] } } : { configuracion: { tratamientos_ofrecidos: values } }\r\n        await updateData(`/users/updateUser/${profileData._id}`, newData).then((rs) => { console.log(rs); getProfileData(); handleClose() })\r\n    };\r\n\r\n    const onFinishEdit = async (values) => {\r\n        if (values.color.metaColor) values.color = '#' + values.color.metaColor.originalInput;\r\n        console.log(values)\r\n        const { configuracion: { tratamientos_ofrecidos } } = profileData;\r\n        const foundIndex = tratamientos_ofrecidos.findIndex((svc => svc._id === service._id));\r\n        tratamientos_ofrecidos[foundIndex] = values;\r\n        profileData.configuracion.tratamientos_ofrecidos = tratamientos_ofrecidos;\r\n        console.log(\"after: \", profileData)\r\n        await updateData(`/users/updateUser/${profileData._id}`, profileData).then((rs) => { console.log(rs); getProfileData(); handleClose() })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setinitialService(null)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Modal title={service ? \"Editar Servicio\" : \"Agregar Servicio\"} open={isOpen} onCancel={handleClose} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='add_tratamiento_medic'>\r\n                    {service ? \"Guardar\" : \"Agregar\"}\r\n                </Button>,\r\n                <Button onClick={handleClose}>Cerrar</Button>\r\n            ]}\r\n        >\r\n            <Form\r\n                name=\"add_tratamiento_medic\"\r\n                onFinish={service ? onFinishEdit : onFinish}\r\n                labelCol={{ span: 8 }} wrapperCol={{ span: 16 }} style={{ maxWidth: 600 }}\r\n                initialValues={service ? service : { color: '#3174ad' }}\r\n            >\r\n\r\n                {/* {JSON.stringify(service)} */}\r\n\r\n                <Form.Item name=\"tratamiento\" label=\"Tratamiento\" rules={[{ required: true }]}  >\r\n                    <Input placeholder=\"Ingresa Descripcion\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"observaciones\" label=\"Observaciones\" rules={[{ required: false }]}  >\r\n                    <Input placeholder=\"Ingresa Observaciones\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"costo\" label=\"Costo\" rules={[{ required: true }]}  >\r\n                    <InputNumber placeholder=\"Costo\" style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"color\" label=\"Color en calendario\" rules={[{ required: false }]}  >\r\n                    <ColorPicker\r\n                        presets={[\r\n                            {\r\n                                label: 'Colores recomendados',\r\n                                colors: pre_colors,\r\n                            },\r\n                            {\r\n                                label: 'Recientes',\r\n                                colors: [],\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\hojasEnfermeria.jsx",["1275","1276"],"import React, { useState } from 'react'\r\nimport { Card, Button, Modal, InputNumber, Row, Col } from 'antd';\r\nimport { PlusOutlined, PrinterOutlined } from '@ant-design/icons';\r\nimport { Form, Input, TimePicker } from 'antd';\r\nimport locale from 'antd/es/date-picker/locale/es_ES';\r\n\r\nimport { updateData, usuario } from '../../resources'\r\nimport HojaDocument from './hojaEnfermeriaPrint';\r\n\r\n\r\nexport default function HojasEnfermeria({ hojas_enfermeria, id_nota, datosPaciente }) {\r\n    const [hojaEdit, setHojaEdit] = useState(null)\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    // Print Receta Modal\r\n    const [isPrintingModalVisible, setIsPrintingModalVisible] = useState(false)\r\n    const handlePrintOk = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    const handlePrintCancel = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    // Select logo for print in receta. Switches the modal view into select logo hospital/pdf recipe for print\r\n    const [logoHospital, setLogoHospital] = useState(null)\r\n    const [nombreHospital, setNombreHospital] = useState(null)\r\n    const [isLogoSelected, setIsLogoSelected] = useState(false)\r\n\r\n    // Modal for details\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false); setHojaEdit(null) };\r\n    const handleCancel = () => { setHojaEdit(null); setIsModalOpen(false) };\r\n\r\n    // Modal for Add\r\n    const [isAddModalOpen, setIsAddModalOpen] = useState(false);\r\n    const showAddModal = () => { setIsAddModalOpen(true) };\r\n    const handleAddOk = () => { setIsAddModalOpen(false) };\r\n    const handleAddCancel = () => { setIsAddModalOpen(false) };\r\n\r\n    const gridStyle = { width: '14%', textAlign: 'center', height: '40' }\r\n    const gridStyle2 = { width: '20%', textAlign: 'center', height: 60, padding: 4 }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('prev hojas ', hojas_enfermeria)\r\n\r\n        console.log('Success:', values);\r\n        hojas_enfermeria.push(values)\r\n        updateData(`notas/update/${id_nota}`, { hojas_enfermeria: hojas_enfermeria }).then((rs) => {\r\n            console.log(rs)\r\n            setIsAddModalOpen(false)\r\n        })\r\n\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    }\r\n    // Print Receta\r\n    const printHoja = async (r) => {\r\n        setHojaEdit(r)\r\n        setIsPrintingModalVisible(true)\r\n        console.log(r);\r\n    }\r\n\r\n    return <Card style={{ marginTop: 8 }}>\r\n        <div className='fila' style={{ marginBottom: 8 }}>\r\n            <h6>Hojas de Enfermería</h6>\r\n        </div>\r\n\r\n        {\r\n            hojas_enfermeria && hojas_enfermeria.map((hoja, i) => {\r\n                hoja.aplicacion = i;\r\n                return <>\r\n                    <Button key={i} type='link' onClick={() => { setHojaEdit(hoja); console.log(hoja); setIsModalOpen(true) }}>Aplicacion {i + 1}  {new Date(hoja.inicio?.hora).toLocaleDateString('es-MX')}</Button>\r\n                    <Button style={{ marginLeft: 8 }} onClick={() => printHoja(hoja)} size='small' type=\"primary\" shape=\"circle\" icon={<PrinterOutlined />} className='btnIconCentered' ghost />\r\n                </>\r\n            })\r\n        }\r\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\r\n            {/* <Button style={{ marginTop: 4 }}>Agregar</Button> */}\r\n            <Button className='btnIconCentered' onClick={showAddModal} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n        </div>\r\n\r\n        <Modal open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={1100} footer={[\r\n            <Button onClick={handleOk}>Cerrar</Button>\r\n        ]}>\r\n            {\r\n                hojaEdit && <div>\r\n                    <div style={{ display: 'flex', flexDirection: 'row', gap: 32, fontSize: 15, fontWeight: '500' }}>\r\n                        <span>Aplicación {hojaEdit.aplicacion + 1}</span>\r\n                        <span>Peso: {hojaEdit.peso}kg</span>\r\n                        <span>Dosis: {hojaEdit.dosis}</span>\r\n                        <span>{new Date(hojaEdit.createdAt).toLocaleDateString('es-Mx')}</span>\r\n                    </div>\r\n\r\n                    <Card style={{ marginTop: 10 }} bordered={false}>\r\n                        <Card.Grid style={gridStyle}></Card.Grid>\r\n                        <Card.Grid style={gridStyle}>HORA</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>TEMPERATURA</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>FRECUENCIA CARDIACA</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>FRECUENCIA RESPIRATORIA</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>PRESIÓN ARTERIAL</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>SATURACION O₂</Card.Grid>\r\n\r\n                        <Card.Grid style={gridStyle}>INICIO</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{new Date(hojaEdit.inicio.hora).toLocaleTimeString()}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.inicio.temperatura}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.inicio.frecuencia_cardiaca}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.inicio.frecuencia_respiratoria}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.inicio.presion_arterial}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.inicio.saturacion_oxigeno}</Card.Grid>\r\n\r\n                        <Card.Grid style={gridStyle}>INTERMEDIO</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{new Date(hojaEdit.intermedio.hora).toLocaleTimeString()}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.intermedio.temperatura}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.intermedio.frecuencia_cardiaca}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.intermedio.frecuencia_respiratoria}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.intermedio.presion_arterial}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.intermedio.saturacion_oxigeno}</Card.Grid>\r\n\r\n                        <Card.Grid style={gridStyle}>TERMINO</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{new Date(hojaEdit.termino.hora).toLocaleTimeString()}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.termino.temperatura}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.termino.frecuencia_cardiaca}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.termino.frecuencia_respiratoria}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.termino.presion_arterial}</Card.Grid>\r\n                        <Card.Grid style={gridStyle}>{hojaEdit.termino.saturacion_oxigeno}</Card.Grid>\r\n                    </Card>\r\n\r\n                    <div style={{ fontSize: 16, fontWeight: '500', marginTop: 8, marginBottom: 8 }}>Observaciones</div>\r\n\r\n                    <Card size='small' className='textArea'>\r\n                        {\r\n                            hojaEdit.observaciones\r\n                        }\r\n                    </Card>\r\n\r\n                </div>\r\n            }\r\n\r\n        </Modal>\r\n\r\n        <Modal title='Nueva hoja de enfermería' open={isAddModalOpen} onOk={handleAddOk} onCancel={handleAddCancel} width={1000} footer={[\r\n            <Button onClick={handleAddOk}>Cerrar</Button>,\r\n            <Button type=\"primary\" htmlType=\"submit\" form='add_hoja_enfermeria'>\r\n                Guardar\r\n            </Button>\r\n        ]} destroyOnClose>\r\n\r\n\r\n            <Form\r\n                name=\"add_hoja_enfermeria\"\r\n                labelCol={{ span: 24 }}\r\n                wrapperCol={{ span: 24 }}\r\n                // style={{ maxWidth: 600 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n                layout='vertical'\r\n            >\r\n                <Form.Item label=\"Peso\" name=\"peso\" rules={[{ required: true, message: 'Ingresa el peso' }]}>\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Dosis\" name=\"dosis\" rules={[{ required: true, message: 'Ingresa la dosis' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n\r\n                <div className='fila'>\r\n                    <span style={{ width: 100 }}>INICIO</span>\r\n                    <Form.Item label='Hora' name={['inicio', 'hora']} rules={[{ required: true }]} >\r\n                        <TimePicker format='HH:mm' placeholder='Hora de inicio' locale={locale} />\r\n                    </Form.Item>\r\n                    <Form.Item label='Temperatura' name={['inicio', 'temperatura']} rules={[{ required: true }]}>\r\n                        <InputNumber />\r\n                    </Form.Item>\r\n                    <Form.Item label='Frec. Respiratoria' name={['inicio', 'frecuencia_respiratoria']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label='Frecuencia cardiaca' name={['inicio', 'frecuencia_cardiaca']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item label='Presion arterial' name={['inicio', 'presion_arterial']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item label='Saturacion O₂' name={['inicio', 'saturacion_oxigeno']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'row', columnGap: '10px' }}>\r\n                    <span style={{ width: 100, }}>INTERMEDIO</span>\r\n                    <Form.Item name={['intermedio', 'hora']} rules={[{ required: true }]} >\r\n                        <TimePicker format='HH:mm' placeholder='Hora de aplicación' locale={locale} />\r\n                    </Form.Item>\r\n                    <Form.Item name={['intermedio', 'temperatura']} rules={[{ required: true }]}>\r\n                        <InputNumber />\r\n                    </Form.Item>\r\n                    <Form.Item name={['intermedio', 'frecuencia_respiratoria']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['intermedio', 'frecuencia_cardiaca']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['intermedio', 'presion_arterial']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['intermedio', 'saturacion_oxigeno']} srules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                </div>\r\n\r\n                <div style={{ display: 'flex', flexDirection: 'row', columnGap: '10px' }}>\r\n                    <span style={{ width: 100, }}>TERMINO</span>\r\n                    <Form.Item name={['termino', 'hora']} rules={[{ required: true }]} >\r\n                        <TimePicker format='HH:mm' placeholder='Hora de aplicación' locale={locale} />\r\n                    </Form.Item>\r\n                    <Form.Item name={['termino', 'temperatura']} rules={[{ required: true }]}>\r\n                        <InputNumber />\r\n                    </Form.Item>\r\n                    <Form.Item name={['termino', 'frecuencia_respiratoria']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['termino', 'frecuencia_cardiaca']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['termino', 'presion_arterial']} rules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item name={['termino', 'saturacion_oxigeno']} srules={[{ required: true }]}>\r\n                        <Input />\r\n                    </Form.Item>\r\n                </div>\r\n\r\n                <Form.Item\r\n                    label=\"Observaciones\"\r\n                    name=\"observaciones\"\r\n                    rules={[{ required: true, message: 'Ingresa las observaciones' }]}\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n        <Modal title=\"Imprimir Hoja de Enfermería\" open={isPrintingModalVisible} onOk={handlePrintOk} onCancel={handlePrintCancel} width={600}\r\n            footer={[\r\n                <Button onClick={handlePrintCancel}>Cancelar</Button>\r\n            ]} destroyOnClose\r\n        >\r\n            {\r\n                isLogoSelected ? // Si ya hay logo seleccionado, se pasa a la receta y se muestra en pdf\r\n                    <HojaDocument receta={hojaEdit} logoHospital={logoHospital} nombreHospital={nombreHospital} datosPaciente={datosPaciente} />\r\n                    :\r\n                    <div>\r\n                        <Card title='Selecciona un hospital' bordered={false}>\r\n                            {\r\n                                usuario.horarios.map((h) => {\r\n                                    return <Card.Grid style={{ width: '100%' }} onClick={() => { console.log('sucursal serlected', h.sucursal); setLogoHospital(h.sucursal.logo); setNombreHospital(h.sucursal.nombre); setIsLogoSelected(true) }} key={h._id}>\r\n                                        <Row align=\"middle\">\r\n                                            <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                            <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                        </Row>\r\n                                    </Card.Grid>\r\n                                })\r\n                            }\r\n                        </Card>\r\n                    </div>\r\n            }\r\n        </Modal>\r\n    </Card>\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\notasEvolucion.jsx",["1277","1278","1279","1280","1281","1282","1283","1284"],"import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Image, Modal, message, Upload, Input, Form, InputNumber } from 'antd';\r\nimport { UploadOutlined, PlusOutlined, EditOutlined, ExperimentOutlined, DownloadOutlined } from '@ant-design/icons';\r\nimport { updateData, usuario, API, IMAGE_API } from '../../resources';\r\nconst { TextArea } = Input;\r\n\r\n// estudios will be to notas/estudios/upload\r\n// foto will be to images/upload\r\n\r\nconst numbers = ['Primera', 'Segunda', 'Tercera']\r\n\r\nexport default function NotasEvolucion({ _notas_evolucion, id_nota }) {\r\n\r\n    const [newEstudio, setNewEstudio] = useState(null) //initially on database eill be [], onFinish or on Edit will insert this\r\n    const [evoImage, setEvoImage] = useState(null)\r\n\r\n    const [estudiosFiles, setEstudiosFiles] = useState([])\r\n    const [imagesFiles, setImagesFiles] = useState([])\r\n\r\n    const [evoForEdit, setEvoForEdit] = useState(null)\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true); };\r\n    const handleOk = () => { setIsModalOpen(false); setEvoForEdit(null) };\r\n    const handleCancel = () => { setIsModalOpen(false); setEvoForEdit(null) };\r\n\r\n    const onFinish = (values) => {\r\n\r\n        values.estudios = estudiosFiles;\r\n        values.imagen = imagesFiles;\r\n\r\n        // console.log('Prev notas:', _notas_evolucion);\r\n        console.log('Received values of form:', values);\r\n        _notas_evolucion.push(values)\r\n        console.log('After notas:', _notas_evolucion);\r\n        updateData(`notas/update/${id_nota}`, { notas_evolucion: _notas_evolucion }).then((rs) => {\r\n            console.log(rs)\r\n            setIsModalOpen(false)\r\n        })\r\n    };\r\n\r\n    const onFinishEdit = (values) => {\r\n\r\n        // add estudios and images\r\n        values.estudios = evoForEdit.estudios.concat(estudiosFiles)\r\n        values.imagen = evoForEdit.imagen.concat(imagesFiles)\r\n\r\n\r\n        // Encuentra el índice del objeto a actualizar en el array\r\n        const indexToUpdate = _notas_evolucion.findIndex(item => item._id === evoForEdit._id);\r\n\r\n        if (indexToUpdate !== -1) {\r\n            // Actualiza el objeto con los nuevos datos\r\n            _notas_evolucion[indexToUpdate] = values;\r\n\r\n            console.log(\"Elemento actualizado:\", _notas_evolucion[indexToUpdate]);\r\n            updateData(`notas/update/${id_nota}`, { notas_evolucion: _notas_evolucion }).then((rs) => {\r\n\r\n                setIsModalOpen(false)\r\n            })\r\n        } else {\r\n            console.log(\"No se encontró el elemento con el ID proporcionado.\");\r\n        }\r\n    }\r\n\r\n    const uploadEstudiosProps = {\r\n        name: 'file',\r\n        action: API + 'notas/estudios/upload',\r\n        multiple: true,\r\n        onChange(info) {\r\n            if (info.file.status !== 'uploading') {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n            if (info.file.status === 'done') {\r\n                message.success(`${info.file.name} file uploaded successfully`);\r\n                console.log('New Files: ', info.file.response.file)\r\n                setEstudiosFiles([...estudiosFiles, info.file.response.file])\r\n            } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n            }\r\n        },\r\n    };\r\n\r\n    const isImage = (file) => {\r\n        return file.type.startsWith('image/');\r\n    };\r\n\r\n    const uploadImageProps = {\r\n        beforeUpload: (file) => {\r\n            if (!isImage(file)) {\r\n                message.error('Solo se permiten subir imágenes');\r\n                return false; // Evita la subida del archivo no válido\r\n            }\r\n            return true; // Permite la subida del archivo válido\r\n        },\r\n        name: 'file',\r\n        action: API + 'imagenes/upload',\r\n        multiple: true,\r\n        onChange(info) {\r\n            if (info.file.status !== 'uploading') {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n            if (info.file.status === 'done') {\r\n                message.success(`${info.file.name} file uploaded successfully`);\r\n                console.log('New Files: ', info.file.response.file)\r\n                setImagesFiles([...imagesFiles, info.file.response.file])\r\n            } else if (info.file.status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n            }\r\n        },\r\n    };\r\n\r\n    const rowStyle = { display: 'flex', flex: 1, flexDirection: 'row', justifyContent: 'space-between', width: '100%' };\r\n    return <div>\r\n        {(_notas_evolucion && _notas_evolucion.length) > 0 ?\r\n            _notas_evolucion.map((nota_evo) => {\r\n                // console.log('showing ', nota_evo)\r\n                return <Card title={`Nota de evolución \\t\\tcreada el: ${new Date(nota_evo.createdAt).toLocaleDateString()}\\t\\tActualizada el ${new Date(nota_evo.createdAt).toLocaleDateString()}`} size='small' style={{ marginBottom: 16 }} key={nota_evo._id}>\r\n\r\n                    <Card size='small'>\r\n                        <div className='fila' style={{ marginBottom: 8 }}>\r\n                            <span className='desc'>Signos Vitales</span>\r\n                        </div>\r\n\r\n                        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', columnWidth: '30%' }}>\r\n\r\n                            <div className='lcolumna'>\r\n                                <div style={rowStyle}><span className='desc'>Temperatura: </span><div>{nota_evo.temperatura}°</div></div>\r\n                                <div style={rowStyle}><span className='desc'>Frecuencia Respiratoria: </span><div>{nota_evo.frecuencia_respiratoria}</div></div>\r\n\r\n                            </div>\r\n                            <div className='lcolumna'>\r\n                                <div style={rowStyle}><span className='desc'>Frecuencia Cardiaca: </span><div>{nota_evo.frecuencia_cardiaca}</div></div>\r\n                                <div style={rowStyle}><span className='desc'>Presion Arterial: </span><div>{nota_evo.presion_arterial}</div></div>\r\n                            </div>\r\n                            <div className='clolumna'>\r\n                                <div style={rowStyle}><span className='desc'>Saturacion de Oxigeno: </span><div>{nota_evo.saturacion_oxigeno}</div></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Card>\r\n\r\n\r\n                    <div style={{ marginTop: 8 }} >\r\n                        <div className='fila' style={{ marginBottom: 8 }}>\r\n                            <h6>S</h6> <Card size='small' style={{ width: '100%' }} className='textArea'>{nota_evo.s}</Card>\r\n                            <h6>O</h6><Card size='small' style={{ width: '100%' }} className='textArea'>{nota_evo.o}</Card>\r\n                        </div>\r\n                        {/* <div className='fila' style={{ marginBottom: 8 }}>\r\n                        </div> */}\r\n                        <div className='fila' style={{ marginBottom: 8 }}>\r\n                            <h6>A</h6><Card size='small' style={{ width: '100%' }} className='textArea'>{nota_evo.a}</Card>\r\n                            <h6>P</h6><Card size='small' style={{ width: '100%' }} className='textArea'>{nota_evo.p}</Card>\r\n                        </div>\r\n                        {/* <div className='fila' style={{ marginBottom: 8 }}>\r\n                        </div> */}\r\n                    </div>\r\n\r\n                    <div style={{ display: 'flex', gap: 6 }}>\r\n                        {\r\n                            nota_evo.imagen.length > 0 && <Card style={{ flex: 1 }}>\r\n                                <p>Imagenes</p>\r\n                                {/* {JSON.stringify(nota_evo.imagen)} */}\r\n                                {\r\n                                    nota_evo.imagen.map((img) => {\r\n                                        return <Image\r\n                                            style={{ marginRight: 4, borderRadius: 6 }}\r\n                                            width={80}\r\n                                            src={IMAGE_API + img}\r\n                                        />\r\n                                    })\r\n                                }\r\n                            </Card>\r\n                        }\r\n                        {\r\n                            nota_evo.estudios.length > 0 && <Card style={{ flex: 1 }}>\r\n                                <p>Estudios</p>\r\n                                {/* {JSON.stringify(nota_evo.estudios)} */}\r\n                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n\r\n                                    {\r\n                                        nota_evo.estudios.map((e) => {\r\n                                            return <a style={{ alignItems: 'center' }} href={`${API}notas/estudios/download/${e}`}><ExperimentOutlined /> {e} </a>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </Card>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* <Button style={{ marginTop: 4 }} >Agregar</Button> */}\r\n                    <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\r\n                        <Button onClick={() => { setEvoForEdit(nota_evo); console.log('For edit ', nota_evo); showModal(); }} style={{ marginTop: 4 }} className='btnIconCentered' size='small' type=\"primary\" shape=\"circle\" icon={<EditOutlined />} ghost />\r\n                    </div>\r\n\r\n                </Card >\r\n            })\r\n            :\r\n            <Card title='Sin notas de evolucion'>\r\n\r\n            </Card>\r\n        }\r\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\r\n            <Button onClick={showModal} style={{ marginTop: 4 }} className='btnIconCentered' size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n        </div>\r\n\r\n\r\n        <Modal title=\"Agregar Nota de Evolución\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Button onClick={handleCancel}>\r\n                    Cancelar\r\n                </Button>,\r\n                <Button type=\"primary\" htmlType=\"submit\" form='add_nota_evo_doc'>\r\n                    Guardar\r\n                </Button>\r\n            ]}\r\n        >\r\n\r\n            {/* upload estudios and image */}\r\n            <div className='fila' style={{ justifyContent: 'space-evenly', marginTop: 8 }}>\r\n\r\n                <Upload {...uploadImageProps}>\r\n                    <Button icon={<UploadOutlined />}>Click para subir fotos</Button>\r\n                </Upload>\r\n\r\n                <Upload {...uploadEstudiosProps}>\r\n                    <Button icon={<UploadOutlined />}>Click para subir estudios</Button>\r\n                </Upload>\r\n\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <Form\r\n                name=\"add_nota_evo_doc\"\r\n                onFinish={evoForEdit ? onFinishEdit : onFinish}\r\n                // style={{maxWidth: 600}}\r\n                autoComplete=\"off\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={evoForEdit || {}}\r\n            >\r\n\r\n\r\n                <Form.Item name='temperatura' label=\"Temperatura\" rules={[{ required: false, message: 'Ingrese la temperatura' }]}>\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n                <Form.Item name='frecuencia_respiratoria' label=\"Frecuencia respiratoria\" rules={[{ required: false, message: 'Ingrese la frecuencia respiratoria' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='frecuencia_cardiaca' label=\"Frecuencia cardiaca\" rules={[{ required: false, message: 'Ingrese la frecuencia cardiaca' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='presion_arterial' label=\"Presion arterial\" rules={[{ required: false, message: 'Ingrese la presión arterial' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name='saturacion_oxigeno' label=\"Saturacion oxigeno\" rules={[{ required: false, message: 'Ingrese la saturacion de oxigeno' }]}>\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n\r\n                {\r\n                    usuario.rol === 'Medico' && <div>\r\n                        <Form.Item label=\"S\" name=\"s\" rules={[{ required: false, message: 'Ingrese la respuesta' }]} >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"O\" name=\"o\" rules={[{ required: false, message: 'Ingrese la respuesta' }]} >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"A\" name=\"a\" rules={[{ required: false, message: 'Ingrese la respuesta' }]} >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"P\" name=\"p\" rules={[{ required: false, message: 'Ingrese la respuesta' }]} >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </div>\r\n                }\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n\r\n    </div>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_2\\depresion2_results.jsx",["1285","1286","1287","1288","1289","1290","1291","1292","1293","1294"],"import React, { useState, useEffect } from 'react'\r\nimport { Table, Button, Modal } from 'antd'\r\nimport { Form, Select } from 'antd';\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../../resources';\r\nimport EscalasCreateGeneralLink from '../../escalasCreateGeneralLink';\r\nimport getAllEscalas from '../../getEscalas';\r\nimport Loading from '../../../loading';\r\nconst { Option } = Select;\r\n\r\n// DEPRESION GPC\r\n\r\nexport default function Depresion2Results() {\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [medico, setMedico] = useState(null)\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [loadingCounters, setLoadingCounters] = useState(true)\r\n\r\n    // For Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('depresion_gpc', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            setMedicosData(rs)\r\n        })\r\n    }\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/depresion_gpc/`).then((rs) => {\r\n            getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        }).finally(() => { setLoading(false) })\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            console.log('MisPacientes depresiod2: ', rs);\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n    }\r\n\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente'\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total encuestas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Paciente',\r\n            dataIndex: 'usuario',\r\n            key: 'name',\r\n            render: (_, { usuario }) => <>{usuario ? usuario.name : \"Usuario eliminado\"}</>\r\n        },\r\n        {\r\n            title: 'Puntaje HRSD',\r\n            dataIndex: 'respuestas_depresion2_gpc',\r\n            key: 'hrsd',\r\n            render: (_, { respuestas_depresion2_gpc }) => (\r\n                <>\r\n                    {respuestas_depresion2_gpc.hrsd}\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Puntaje MADRS',\r\n            dataIndex: 'respuestas_depresion2_gpc',\r\n            key: 'madrs',\r\n            render: (_, { respuestas_depresion2_gpc }) => (\r\n                <>\r\n                    {respuestas_depresion2_gpc.madrs}\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Puntaje PHQ',\r\n            dataIndex: 'respuestas_depresion2_gpc',\r\n            key: 'phq',\r\n            render: (_, { respuestas_depresion2_gpc }) => (\r\n                <>\r\n                    {respuestas_depresion2_gpc.phq}\r\n                </>\r\n            ),\r\n        }\r\n    ];\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h5>Resultados de encuestas de versiones validadas en español de las escalas HRSD, MADRS y PHQ-9</h5>\r\n            <br />\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Depresion 2\r\n            </Button>\r\n            <br />\r\n\r\n            <br />\r\n            {/* <Table dataSource={countersData} columns={counterColumns} bordered /> */}\r\n            <br />\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            <Table dataSource={encuestasData} columns={columns} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta de depresion GPC\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='depresion_gpc' />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\lastCita.jsx",["1295"],"import React, { useEffect, useState } from 'react'\r\nimport { getData, updateData } from '../../resources'\r\nimport { Card, Typography } from 'antd'\r\nimport { CalendarOutlined, ClockCircleOutlined, DollarOutlined } from '@ant-design/icons'\r\nimport HistorialCitas from './historialCitas';\r\nconst { Paragraph } = Typography;\r\n\r\n\r\nexport default function LastCita(props) {\r\n\r\n    const [cita, setCita] = useState({})\r\n    const [citasData, setCitasData] = useState({})\r\n    const [lastBalance, setLastBalance] = useState([])\r\n    // const [editableStr, setEditableStr] = useState('Sin costo registrado');\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => { getCitasData() }, [])\r\n\r\n    const updateLastBalance = (newMonto) => {\r\n\r\n        let newLastBalance = lastBalance;\r\n        newLastBalance.monto = newMonto;\r\n        updateData(`balances/update/${lastBalance._id}`, newLastBalance).then(getCitasData)\r\n    }\r\n\r\n    const getLastCta = (eventos) => {\r\n        var fechaActual = new Date();\r\n\r\n        // Filtrar los eventos que tienen una fecha menor o igual a la fecha actual\r\n        var eventosPasados = eventos.filter(function (evento) {\r\n            var fechaEvento = new Date(evento.fecha_hora);\r\n            return fechaEvento <= fechaActual;\r\n        });\r\n\r\n        // Ordenar los eventos pasados por fecha de forma descendente\r\n        eventosPasados.sort(function (a, b) {\r\n            var fechaA = new Date(a.fecha_hora);\r\n            var fechaB = new Date(b.fecha_hora);\r\n            return fechaB - fechaA;\r\n        });\r\n\r\n        // Obtener el evento más reciente\r\n        return eventosPasados[0]\r\n    }\r\n\r\n    const getCitasData = () => {\r\n        getData(`citas/${props.paciente}`).then((rs) => {\r\n            const ultimaCita = getLastCta(rs);\r\n            // console.log('lsat cita', ultimaCita)\r\n            setCita(ultimaCita)\r\n            setCitasData(rs)\r\n            return ultimaCita\r\n        }).then((last) => {\r\n            return getData('balances/cita/' + last?._id)\r\n        }).then((bl) => {\r\n            // console.log('balance', bl)\r\n            setLastBalance(bl[0])\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const LastBalance = () => {\r\n        return <div>\r\n            {\r\n                lastBalance && lastBalance.monto ?\r\n                    (\r\n                        <div >\r\n\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', columnGap: '10px' }}>\r\n                                <DollarOutlined style={{}} />\r\n                                Costo:\r\n                                <Paragraph\r\n                                    style={{ marginTop: 14 }}\r\n                                    editable={{\r\n                                        onChange: updateLastBalance,\r\n                                    }}\r\n                                >\r\n                                    {lastBalance.monto}\r\n                                </Paragraph>\r\n\r\n\r\n                            </div>\r\n                            <HistorialCitas historial={citasData} />\r\n                            {/* <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', columnGap: '10px' }}>\r\n                             <CalendarOutlined /> {new Date(lastBalance.createdAt).toLocaleDateString()}\r\n                         </div> */}\r\n                        </div>\r\n                    ) : (\r\n                        <p>Sin Ultimo Balance</p>\r\n                    )\r\n            }\r\n\r\n        </div>\r\n    }\r\n\r\n\r\n    if (loading) return <p>Cargando...</p>\r\n    return (\r\n        <div style={{ marginTop: 8 }}>\r\n            <Card>\r\n                {\r\n                    cita ? <div>\r\n                        <h6>Cita más reciente</h6>\r\n                        <ul>\r\n                            <li className='btnIconCentered'><CalendarOutlined style={{ marginRight: 8 }} /> Fecha: {new Date(cita.fecha_hora).toLocaleDateString()}</li><br />\r\n\r\n                            <li className='btnIconCentered'><ClockCircleOutlined style={{ marginRight: 8 }} /> Hora: {cita.fecha_hora.substring(11, 16)}</li>\r\n\r\n                            <LastBalance />\r\n\r\n                        </ul>\r\n                    </div> : <h6>Sin cita recente registrada</h6>\r\n                }\r\n\r\n            </Card>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor\\dolorDetails.jsx",["1296","1297"],"import React from 'react'\r\nimport { Button, Modal, Card } from 'antd';\r\nimport { dolor_catalog } from './dolor_catalog';\r\n\r\nconst pretungas = { \"Ritmo_Cardiaco_Elevado\": false, \"Sentimientos_de_Ansiedad\": true, \"Debilidad_o_Mareos_ligeros\": false, \"Sedacion_o_Somnolencia\": true, \"Nauseas\": false, \"Vision_Borrosa\": true, \"Aumento_de_la_Presión_Arterial\": false, \"Mareos\": true, \"Dolor_de_cabeza\": false, \"desrealizacion_0\": 0, \"desrealizacion_1\": 1, \"despersonalizacion_0\": 1, \"despersonalizacion_1\": 3, \"amnesia_0\": 1, \"amnesia_1\": 1, \"ketamina\": 6, \"ketaminaiv\": 0, \"ketaminaivb\": 2, \"_id\": \"646f77314c0254e92dd244c1\" }\r\n\r\n// { \"1\": [\"Detras Izquierda\"], \"2\": 4, \"3\": 3, \"4\": 6, \"5\": 5, \"6\": \"correr\", \"7\": \"Caminar\", \"8\": \"Ninguno\", \"9\": 2, \"10\": 3, \"11\": [\"B. Mi enfermedad principal (la enfermedad que actualmente se está tratando y evaluando)\"], \"12\": [\"Fatigoso (pesado)\", \"Insoportable\"], \"14\": 2, \"15\": 1, \"16\": 2, \"17\": 2, \"18\": 2, \"19\": 0, \"20\": 1, \"21\": [\"Compresas frías\"], \"22\": \"si\", \"A13\": 2, \"B13\": 6, \"C13\": 3, \"D13\": 4, \"E13\": 2, \"F13\": 5, \"G13\": 3, \"B18\": \"no\", \"B19\": \"ningn\", \"B21\": \"si\", \"_id\": \"636163a89a3c0025d9f5c1f7\" }\r\n\r\nexport default function DolorDetails({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n    return (\r\n        <Modal title=\"Respuestas escala de dolor\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n            {\r\n                Object.keys(escalaDetails).map((key) => {\r\n                    const found = dolor_catalog.find((q) => String(q['n']) === key)\r\n                    return <Card size='small'>\r\n                        <Card.Grid hoverable={false} style={{ width: '70%' }}>{found && found[\"pregunta\"]}</Card.Grid>\r\n                        <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails[key]}</Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_results.jsx",["1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, Table, Form, Select } from 'antd';\r\nimport EscalasCreateGeneralLink from '../../escalasCreateGeneralLink';\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../../resources';\r\nimport getAllEscalas from '../../getEscalas';\r\nimport PTMXDetails from './p_t_mexicana_details';\r\nconst Option = { Select }\r\n\r\nexport default function PostTraumaticoMexicanaResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [medico, setMedico] = useState(null)\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loadingCounters, setLoadingCounters] = useState(true)\r\n    const [columns, setColumns] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n\r\n    useEffect(() => {\r\n        addColumns();\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('post_traumatico_mx', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            setMedicosData(rs)\r\n        })\r\n    }\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/post_traumatico_mx/`).then((rs) => {\r\n            getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            console.log('MisPacientes ept1: ', rs);\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n    }\r\n\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente'\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total encuestas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n    const addColumns = () => {\r\n        let columns = [\r\n            {\r\n                title: 'Paciente',\r\n                dataIndex: 'usuario',\r\n                key: 'name',\r\n                render: (_, { usuario }) => <>{usuario ? usuario.name : \"Usuario eliminado\"}</>\r\n            }\r\n        ];\r\n        for (let i = 1; i < 15; i++) {\r\n            columns.push({\r\n                title: 'Pregunta ' + i,\r\n                key: 'eptmx' + i,\r\n                dataIndex: 'respuestas_ept_3mx',\r\n                render: (_, { respuestas_ept_3mx }) => <>{respuestas_ept_3mx[i]}</>\r\n            })\r\n        }\r\n        setColumns(columns)\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { respuestas_ept_3mx }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(respuestas_ept_3mx); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h6>Resultados de la Validación mexicana de la Escala de Estrés Traumático Secundario</h6>\r\n\r\n            <br />\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Enlace EPT MX\r\n            </Button>\r\n            <br />\r\n\r\n            {/* <Table dataSource={countersData} columns={counterColumns} bordered /> */}\r\n\r\n            <br />\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            <Table dataSource={encuestasData} columns={detailsColumns} bordered />\r\n            {/* <Table dataSource={encuestasData} columns={columns} scroll={{ x: 1600 }} bordered /> */}\r\n\r\n            <Modal title=\"Crear Encuesta de Estres Post Traumatico\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='post_traumatico_mx' />\r\n            </Modal>\r\n\r\n            <PTMXDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\register.patent.fisio.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ketamina\\ketaminaDetails.jsx",["1310"],"import React from 'react'\r\nimport { Button, Modal, Tag, Card } from 'antd';\r\nimport { desrealizacion, despersonalizacion, amnesia } from './ketamina_catalog'\r\n\r\nconst gridStyle = { width: '50%' }\r\nexport default function KetaminaDetails({ isModalOpen, handleOk, handleCancel, escalaDetails: respuestas_ketamina }) {\r\n    return (\r\n        <Modal title=\"Basic Modal\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\r\n            <h6>Efectos Secundarios de Ketamina</h6>\r\n            {respuestas_ketamina.Aumento_de_la_Presión_Arterial && <Tag color=\"red\">Aumento de la presion arterial</Tag>}\r\n            {respuestas_ketamina.Debilidad_o_Mareos_ligeros && <Tag color=\"red\">Debilidad o Mareos ligeros</Tag>}\r\n            {respuestas_ketamina.Dolor_de_cabeza && <Tag color=\"red\">Dolor de cabeza</Tag>}\r\n            {respuestas_ketamina.Mareos && <Tag color=\"red\">Mareos</Tag>}\r\n            {respuestas_ketamina.Nauseas && <Tag color=\"red\">Nauseas</Tag>}\r\n            {respuestas_ketamina.Sentimientos_de_Ansiedad && <Tag color=\"red\">Sentimientos de Ansiedad</Tag>}\r\n\r\n            <h6>Escala de 6 elementos simplificada de síntomas disociativos administrada por el médico  (CADSS)</h6>\r\n            <h5>Desrealizacion</h5>\r\n            {\r\n                Object.keys(desrealizacion).map((preg, index) => {\r\n                    return <Card>\r\n                        <Card.Grid style={gridStyle} hoverable={false}>\r\n                            {preg}\r\n                        </Card.Grid >\r\n                        <Card.Grid style={gridStyle} hoverable={false}>\r\n                            {desrealizacion[preg][respuestas_ketamina[`desrealizacion_${index}`]]}\r\n                        </Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n            <h5>Despersonalizacion</h5>\r\n            {\r\n                Object.keys(despersonalizacion).map((preg, index) => {\r\n                    return <Card>\r\n                        <Card.Grid style={gridStyle} hoverable={false}>\r\n                            {preg}\r\n                        </Card.Grid >\r\n                        <Card.Grid style={gridStyle} hoverable={false}>\r\n                            {despersonalizacion[preg][respuestas_ketamina[`despersonalizacion_${index}`]]}\r\n                        </Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n            <h5>Amnesia</h5>\r\n            {\r\n                Object.keys(amnesia).map((preg, index) => {\r\n                    return <p>{preg} {amnesia[preg][respuestas_ketamina[`amnesia_${index}`]]}</p>\r\n                })\r\n            }\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccionDetails.jsx",["1311","1312"],"import React from 'react'\r\nimport { Button, Modal, Card } from 'antd';\r\nimport { satisfaccion_catalog } from './satisfaccion_catalog';\r\n\r\nconst pretungas = { \"Ritmo_Cardiaco_Elevado\": false, \"Sentimientos_de_Ansiedad\": true, \"Debilidad_o_Mareos_ligeros\": false, \"Sedacion_o_Somnolencia\": true, \"Nauseas\": false, \"Vision_Borrosa\": true, \"Aumento_de_la_Presión_Arterial\": false, \"Mareos\": true, \"Dolor_de_cabeza\": false, \"desrealizacion_0\": 0, \"desrealizacion_1\": 1, \"despersonalizacion_0\": 1, \"despersonalizacion_1\": 3, \"amnesia_0\": 1, \"amnesia_1\": 1, \"ketamina\": 6, \"ketaminaiv\": 0, \"ketaminaivb\": 2, \"_id\": \"646f77314c0254e92dd244c1\" }\r\n\r\n// { \"1\": [\"Detras Izquierda\"], \"2\": 4, \"3\": 3, \"4\": 6, \"5\": 5, \"6\": \"correr\", \"7\": \"Caminar\", \"8\": \"Ninguno\", \"9\": 2, \"10\": 3, \"11\": [\"B. Mi enfermedad principal (la enfermedad que actualmente se está tratando y evaluando)\"], \"12\": [\"Fatigoso (pesado)\", \"Insoportable\"], \"14\": 2, \"15\": 1, \"16\": 2, \"17\": 2, \"18\": 2, \"19\": 0, \"20\": 1, \"21\": [\"Compresas frías\"], \"22\": \"si\", \"A13\": 2, \"B13\": 6, \"C13\": 3, \"D13\": 4, \"E13\": 2, \"F13\": 5, \"G13\": 3, \"B18\": \"no\", \"B19\": \"ningn\", \"B21\": \"si\", \"_id\": \"636163a89a3c0025d9f5c1f7\" }\r\n\r\nexport default function SatisfaccionDetails({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n    return (\r\n        <Modal title=\"Respuestas encuesta de satisfaccion\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n            {\r\n                Object.keys(escalaDetails).map((key) => {\r\n                    const found = satisfaccion_catalog.find((q) => String(q['n']) === key)\r\n                    // return <p>\r\n                    //     {JSON.stringify(found)}\r\n                    // </p>\r\n                    return <Card size='small'>\r\n                        <Card.Grid hoverable={false} style={{ width: '70%' }}>{found && found['pregunta']}</Card.Grid>\r\n                        {\r\n\r\n                            found && found.tipo === \"seleccion\" ? <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails[key] ? \"Si\" : \"No\"}</Card.Grid> :\r\n                                <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails[key]}</Card.Grid>\r\n                        }\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\getEscalas.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\enfermeros\\dash.enfermeros.hospitalTab.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\escalasCreateGeneralLink.jsx",["1313","1314"],"import React, { useEffect, useState, useRef } from 'react'\r\nimport { getData, sendDataBody } from '../resources';\r\nimport { Form, Button, Space, Select, message } from 'antd'\r\nimport { usuario, ids_hospitales } from '../resources';\r\nimport QRCode from \"react-qr-code\";\r\nimport { toBlob, toPng } from 'html-to-image';\r\nimport Loading from '../loading';\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nexport default function EscalasCreateGeneralLink(props) {\r\n\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [link, setLink] = useState('')\r\n\r\n    // New Mode of first patient after medic selecting\r\n    const [medico, setMedico] = useState(null) // medico selected\r\n    const [medicos, setMedicos] = useState([]) // List of medicos able to select\r\n    const [selectedPatient, setSelectedPatient] = useState(null)\r\n    const [allPacientes, setAllPacientes] = useState([])\r\n\r\n    // Added to determine the protocol and moment of application\r\n    const [protocolo, setProtocolo] = useState('default')\r\n    const [momento, setMomento] = useState('default')\r\n\r\n    useEffect(() => {\r\n        const getAllMedicos = async () => {\r\n            await getData(`users/hospital/${ids_hospitales[0]}`).then(rs => { getAllPacientes(rs) })\r\n        }\r\n\r\n        usuario.rol === 'Medico' ? getPacientesOfDoctor(usuario._id) : getAllMedicos()\r\n\r\n    }, [])\r\n\r\n    const getAllPacientes = async (medicos) => {\r\n        const medicosFormatted = medicos.map(m => m._id)\r\n        await sendDataBody('pacientes/simple/medicos', { medicos: medicosFormatted }).then(rs => { setAllPacientes(rs); setLoading(false) })\r\n    }\r\n\r\n    const handlePatientChange = (value) => {\r\n        setLink(null);\r\n        setSelectedPatient(value)\r\n        const found = allPacientes.find((p) => p._id === value);\r\n        if (found) {\r\n\r\n            let { medicos_asignados } = found\r\n            medicos_asignados.forEach((m) => {\r\n                m.label = m.name; m.value = m._id\r\n            });\r\n\r\n            setMedicos(medicos_asignados);\r\n\r\n        } else {\r\n            message.error('Paciente no encontrado')\r\n        }\r\n    };\r\n\r\n    const handleProtocolChange = value => setProtocolo(value)\r\n    const handleMomentoChange = value => setMomento(value)\r\n\r\n    const handleDoctorChange = (value) => { setMedico(value); setLink(null); };\r\n\r\n    const getPacientesOfDoctor = (_id) => { //Para el caso que la sesion sea de Medico\r\n        getData(`mispacientes/${_id}`).then(rs => { setSelectedPatient(null); setAllPacientes(rs); setLoading(false); console.log(`patients of ${_id}`, rs); })\r\n    }\r\n    // End New Mode of first patient after medic selecting\r\n\r\n    const imageRef = useRef(null);\r\n\r\n    // Filter `option.label` match the user type `input`\r\n    const filterOption = (input, option) =>\r\n        (option?.label ?? '').toLowerCase().includes(input.toLowerCase());\r\n\r\n    const generateLink = () => {\r\n        let usr = (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? medico : usuario._id;\r\n\r\n        // let l = `https://sistema.recreamed.com/${props.tipo}_public/${usr}/${selectedPatient}/${Date.now()}/${protocolo}/${momento}`\r\n        let l = `http://localhost:3000/${props.tipo}_public/${usr}/${selectedPatient}/${Date.now()}/${protocolo}/${momento}`\r\n        setLink(l)\r\n    }\r\n    const copyLink = () => {\r\n        navigator.clipboard.writeText(link)\r\n        message.success('Enlace Copiado al Portapapeles!')\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n        const dataUrl = await toPng(imageRef.current, { width: 288 });\r\n\r\n        // download image\r\n        const link = document.createElement('a');\r\n        link.download = \"codigo-de-enlace.png\";\r\n        link.href = dataUrl;\r\n        link.click();\r\n    }\r\n\r\n    const handleCopy = async () => {\r\n        message.info('Espere mientras se copia el codigo...')\r\n        toBlob(imageRef.current, { width: 288 })\r\n            .then(async function (blob) {\r\n                try {\r\n                    await navigator.clipboard.write([\r\n                        // eslint-disable-next-line no-undef\r\n                        new ClipboardItem({\r\n                            [blob.type]: blob\r\n                        })\r\n                    ]);\r\n                    console.log(\"Image copied\");\r\n                    message.success('Codigo Copiado al Portapapeles')\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Form.Item label=\"Paciente\" name=\"usuario\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n                style={{ alignItems: 'center', paddingTop: 20 }}\r\n                labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\r\n\r\n                <Select\r\n                    showSearch\r\n                    filterOption={filterOption}\r\n                    onChange={handlePatientChange}\r\n                    placeholder='Selecciona un paciente'\r\n                    value={selectedPatient}\r\n                    options={\r\n                        allPacientes.map((p) => (\r\n                            {\r\n                                ...p,\r\n                                key: p._id,\r\n                                value: p._id,\r\n                                label: p.name\r\n                            }\r\n                        ))\r\n                    }\r\n                />\r\n            </Form.Item>\r\n\r\n\r\n            {\r\n                (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') &&\r\n                <Form.Item label=\"Medico\" name=\"usuario\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n                    style={{ alignItems: 'center', paddingTop: 20 }}\r\n                    labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\r\n\r\n                    <Select\r\n                        showSearch\r\n                        filterOption={filterOption}\r\n                        onChange={handleDoctorChange}\r\n                        placeholder='Selecciona un medico'\r\n                        options={\r\n                            medicos.map((p) => (\r\n                                {\r\n                                    ...p,\r\n                                    key: p._id,\r\n                                    value: p._id,\r\n                                    label: p.name\r\n                                }\r\n                            ))\r\n                        }\r\n                    />\r\n                </Form.Item>\r\n            }\r\n\r\n\r\n            <Form.Item label=\"Protocolo\" name=\"protocolo\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n                style={{ alignItems: 'center', paddingTop: 20 }}\r\n                labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\r\n\r\n                <Select\r\n                    showSearch\r\n                    filterOption={filterOption}\r\n                    onChange={handleProtocolChange}\r\n                    placeholder='Selecciona protocolo'\r\n                    value={selectedPatient}\r\n                    options={[\r\n                        {\r\n                           \r\n                            key: 'p1',\r\n                            value: 'depreres',\r\n                            label:\"Depresón resistente al tratamiento\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'p2',\r\n                            value: 'Tinnitus',\r\n                            label:\"Tinnitus\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'p3',\r\n                            value: 'Toc',\r\n                            label:\"Trastorno obsesivo compulsivo (TOC)\"\r\n                        },\r\n                         {\r\n                           \r\n                            key: 'p4',\r\n                            value: 'Alcoholismo',\r\n                            label:\"Alcoholismo\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'p5',\r\n                            value: 'Opioides',\r\n                            label:\"Opioides\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'p6',\r\n                            value: 'Dolor',\r\n                            label:\"Dolor\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'p7',\r\n                            value: 'estrespt',\r\n                            label:\"Estrés post traumatico\"\r\n                        },\r\n                       \r\n                    ]}\r\n                />\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item label=\"Momento\" name=\"momento\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n                style={{ alignItems: 'center', paddingTop: 20 }}\r\n                labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\r\n\r\n                <Select\r\n                    showSearch\r\n                    filterOption={filterOption}\r\n                    onChange={handleMomentoChange}\r\n                    placeholder='Selecciona momento de la aplicación'\r\n                    value={selectedPatient}\r\n                    options={[\r\n                        {\r\n                           \r\n                            key: 'm1',\r\n                            value: 'inicial',\r\n                            label:\"Aplicación inicial\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'm2',\r\n                            value: 'final',\r\n                            label:\"Aplicación final\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'm3',\r\n                            value: 'mant1',\r\n                            label:\"Aplicación inicio mantenimiento\"\r\n                        },\r\n                        {\r\n                           \r\n                            key: 'm4',\r\n                            value: 'mant2',\r\n                            label:\"Aplicación final mantenimiento\"\r\n                        },\r\n                    ]}\r\n                />\r\n            </Form.Item>\r\n\r\n\r\n            <Button style={{alignSelf: 'flex-end'}} onClick={generateLink} disabled={usuario.rol === 'Medico' ? !selectedPatient : !medico} >Generar Enlace</Button>\r\n\r\n\r\n            <br />\r\n\r\n            {\r\n                selectedPatient && link ? <div>\r\n\r\n                    <p style={{ paddingTop: 16, color: '#1890ff' }} >{link}</p>\r\n                    <Button onClick={copyLink}>Copiar Link</Button>\r\n\r\n                    {\r\n                        usuario.rol === 'Recepcion' && <Button type='primary' href={link} target='_blank' rel='noreferrer' style={{ marginLeft: 14 }}>Contestar Ahora</Button>\r\n                    }\r\n\r\n                    <br />\r\n                    \r\n                    <div className='columna'>\r\n                        <div ref={imageRef} style={{ background: 'white', padding: '16px' }}> <QRCode value={link} /> </div>\r\n                        <div>\r\n                            <Button onClick={handleDownload}>Descargar Codigo</Button>\r\n                            <Button onClick={handleCopy} style={{ marginLeft: 12 }}>Copiar Codigo</Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div> : <></>\r\n            }\r\n\r\n        </div >\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\cortes\\corteForPrint.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\receptionists\\dash.receptionists.hospitalTab.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\create-ingreso-hosptal.jsx",["1315","1316","1317","1318"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, Form, Input, Select, message, DatePicker, InputNumber } from 'antd';\r\nimport { getData, sendDataBody, updateData } from '../../resources';\r\n// ADMIN CREATE INGRESO\r\nexport default function CreateBalanceHosptal({id_hospital, tipo, balanceForEdit, setBalanceForEdit, setIsModalOpen, isModalOpen, getIngresos}) {\r\n\r\n    const isCreating = !balanceForEdit || Object.keys(balanceForEdit).length === 0;\r\n    \r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n        // setBalanceForEdit(null) \r\n    };\r\n\r\n\r\n\r\n    // Form methods\r\n    const onFinish = (values) => {\r\n\r\n        values.tipo = tipo;\r\n        values.sucursal = id_hospital;\r\n        values.estado = 'pendiente'\r\n        console.log('Ready to send:', values);\r\n        console.log('For Edit: ', balanceForEdit);\r\n        if (isCreating) {\r\n            sendDataBody(`balances/add`, values).then((rs) => { console.log(rs); message.success(rs.message || rs.error) }).finally(() => { getIngresos(); setIsModalOpen(false) })\r\n        } else {\r\n            updateData(`/balances/update/${balanceForEdit._id}`, values).then((rs) => {\r\n                getIngresos();\r\n                // setBalanceForEdit({}); \r\n                setIsModalOpen(false);\r\n            })\r\n        }\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => { console.log('Failed:', errorInfo) };\r\n\r\n    return (\r\n        <Modal title={`Agergar ${tipo} del hospital`} open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='edit_balance'>\r\n                    Guardar\r\n                </Button>,\r\n                <Button onClick={handleCancel}>\r\n                    Cancelar\r\n                </Button>\r\n            ]}>\r\n            <Form\r\n                name=\"edit_balance\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={balanceForEdit}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item label=\"Monto\" name=\"monto\" rules={[{ required: true, message: 'Ingresa el monto' }]} >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"abono\" name=\"abono\" rules={[{ required: true, message: 'Ingresa el abobo' }]} >\r\n                    <InputNumber style={{ width: '100%' }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Forma de Pago\" name=\"forma_de_pago\" >\r\n                    <Select\r\n                        // onChange={handleDoctorChange}\r\n                        options={[\r\n                            {\r\n                                value: 'efectivo',\r\n                                label: 'Efectivo',\r\n                            },\r\n                            {\r\n                                value: 'tarjeta',\r\n                                label: 'Tarjeta',\r\n                            },\r\n                            {\r\n                                value: 'transferencia',\r\n                                label: 'Transferencia',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Form.Item>\r\n\r\n\r\n                {/* <Form.Item\r\n                    label=\"Estado\"\r\n                    name=\"estado\"\r\n                    rules={[{ required: true, message: 'Ingresa el monto' }]}\r\n                >\r\n                    <Select options={[\r\n                        {\r\n                            value: 'pendiente',\r\n                            label: 'Pendiente',\r\n                        },\r\n                        {\r\n                            value: 'pagado',\r\n                            label: 'Pagado',\r\n                        },\r\n                        {\r\n                            value: 'pago parcial',\r\n                            label: 'Pago parcial',\r\n                        },\r\n                    ]}\r\n                    />\r\n                </Form.Item> */}\r\n\r\n\r\n                <Form.Item\r\n                    label=\"Concepto\"\r\n                    name=\"concepto\"\r\n                    rules={[{ required: true, message: 'Ingresa el concepto' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n\r\n                <Form.Item\r\n                    label=\"Fecha y Hora\"\r\n                    name=\"fecha_hora\"\r\n                    rules={[{ required: true, message: 'Selecciona Fecha y Hora' }]}\r\n                >\r\n                    <DatePicker showTime format=\"DD-MM-YYYY HH:mm\" />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\dash.doctors.hospitalTab.jsx",["1319"],"import React, { useEffect, useState } from 'react'\r\nimport { Table, Avatar, Button,message } from 'antd'\r\nimport { UserOutlined } from '@ant-design/icons'\r\nimport { getData } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport ReportsDoctors from './reports.doctors'\r\n\r\nexport default function HospitalTab(props) {\r\n  const [doctorsData, setDoctorsData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  // Modal for details\r\n  const [medicForDetails, setMedicForDetails] = useState(null)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  const handleOk = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  // Before all, get DoctorsData\r\n  useEffect(() => { getDoctorsData() }, [])\r\n  const getDoctorsData = () => {\r\n    getData(`users/hospital/${props.id_hospital}`).then((rs) => { setDoctorsData(rs) }).finally(() => setLoading(false))\r\n  }\r\n  const columns = [\r\n    {\r\n      title: 'Avatar',\r\n      dataIndex: 'avatar',\r\n      key: 'avatar',\r\n      render: (_, { avatar }) => {\r\n        return avatar.length > 9 ?\r\n          <img width={64} src={'https://api.recreamed.com/images/' + avatar} alt='ProfilePic' style={{borderRadius: 6}} /> :\r\n          <Avatar size={64} icon={<UserOutlined />} className='btnIconCentered' />\r\n      }\r\n    },\r\n    {\r\n      title: 'Nombre',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n    },\r\n    {\r\n      title: 'Correo',\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n    },\r\n    {\r\n      title: 'Telefono',\r\n      dataIndex: 'telefono',\r\n      key: 'telefono',\r\n    },\r\n    {\r\n      title: 'Reporte mensual de citas',\r\n      dataIndex: 'reporte',\r\n      key: 'reporte',\r\n      render: (_, { _id }) => {\r\n        return <div>\r\n          <Button onClick={() => {message.info(_id) ; setMedicForDetails(_id); setIsModalOpen(true) }}>\r\n            Ver reporte\r\n          </Button>\r\n        </div>\r\n      }\r\n    },\r\n\r\n  ];\r\n\r\n  if (loading) return <Loading />\r\n\r\n  return <div>\r\n    <h6>Doctores del hospital {props.hospital}</h6>\r\n\r\n    <Table dataSource={doctorsData} columns={columns} />\r\n\r\n    <ReportsDoctors isModalOpen={isModalOpen} handleOk={handleOk} id_medico={medicForDetails} />\r\n  </div>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\dash.receptionists.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\patients\\dash.patients.hospital-tab.jsx",["1320","1321"],"import React, { useEffect, useState } from 'react'\r\nimport { getData, deleteData, sendDataBody, } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport { Table, Avatar, Space, Button, Popconfirm, Modal, Card, Input } from 'antd'\r\nimport { UserOutlined, EditOutlined, SearchOutlined } from '@ant-design/icons'\r\nimport Register, { RegisterModal } from './register.user'\r\nimport Expedientes from '../../doctorViews/expedientes/expedientes'\r\n\r\n// SHARED WITH RECEPTION / ENFERM\r\n\r\nexport default function HospitalTab(props) {\r\n    const [value, setValue] = useState(''); // For search input\r\n    const [pacientesData, setPacientesData] = useState([])\r\n    const [paciente, setPaciente] = useState({});\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false) //For Edit patient\r\n    const [loading, setLoading] = useState(true)\r\n    const [editingProfile, setEditingProfile] = useState(false)\r\n    const showModal = () => { setIsModalVisible(true); };\r\n    const handleOk = () => { setIsModalVisible(false); };\r\n    const handleCancel = () => { setIsModalVisible(false); setEditingProfile(false) };\r\n    const [searchText, setSearchText] = useState('');//For search input\r\n\r\n    useEffect(() => {\r\n        getPacientes()\r\n    }, [])\r\n\r\n    const getPacientes = async () => {\r\n\r\n        const meds = await getData(`users/hospital/${props.id_hospital}`)\r\n\r\n        const idmeds = meds.map(doc => {\r\n            return doc._id\r\n        })\r\n\r\n\r\n        sendDataBody('pacientes/medicos', { medicos: idmeds }).then((rs) => {\r\n            setPacientesData(rs)\r\n            setLoading(false)\r\n        })\r\n    }\r\n\r\n\r\n    const deleteUser = (id_paciente) => {\r\n        const newPatients = pacientesData.filter((p) => p._id !== id_paciente)\r\n        deleteData(`users/remove/${id_paciente}`).then((rs) => {\r\n            setPacientesData(newPatients)\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Rol',\r\n            dataIndex: 'rol',\r\n            key: 'rol',\r\n            onFilter: (value, record) => record.rol === \"Medico\",\r\n        },\r\n        {\r\n            title: 'Avatar',\r\n            dataIndex: 'avatar',\r\n            key: 'avatar',\r\n            render: (_, { avatar }) => {\r\n                return avatar.length > 9 ?\r\n                    <img width={48} src={'https://api.recreamed.com/images/' + avatar} alt='ProfilePic' /> :\r\n                    <Avatar size={48} className='btnIconCentered' icon={<UserOutlined />} />\r\n            }\r\n        },\r\n        {\r\n            title: 'Nombre',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Medicos Asignados',\r\n            dataIndex: 'medicos_asignados',\r\n            key: 'medicos_asignados',\r\n            render: (_, { medicos_asignados }) => <ul>{\r\n                medicos_asignados.map((m) => <li key={m._id}>{m.name}</li>)\r\n            }</ul>\r\n        },\r\n        // {\r\n        //     title: 'Correo',\r\n        //     dataIndex: 'email',\r\n        //     key: 'email',\r\n        // },\r\n        {\r\n            title: 'Fecha de creacion',\r\n            dataIndex: 'createdAt',\r\n            key: 'createdAt',\r\n        },\r\n        {\r\n            title: 'Telefono',\r\n            dataIndex: 'telefono',\r\n            key: 'telefono',\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'detalles',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={() => { setPaciente(record); showModal(); }}>\r\n                        Expediente\r\n                    </Button>\r\n                    <Popconfirm\r\n                        title=\"Borrar Paciente\"\r\n                        description=\"Esta seguro que quiere eliminar al paciente?\"\r\n                        onConfirm={() => deleteUser(record._id)}\r\n                        onCancel={(e) => console.log(e)}\r\n                        okText=\"Si\"\r\n                        cancelText=\"No\"\r\n                    >\r\n                        <Button danger>Eliminar</Button>\r\n                    </Popconfirm>\r\n                </Space>\r\n            )\r\n        }\r\n    ];\r\n\r\n    const pacientesDataFiltered = pacientesData.filter((paciente) =>\r\n        paciente.name.toLowerCase().includes(searchText.toLowerCase())\r\n    );\r\n\r\n    // Fill Modal\r\n    const gridStyle = {\r\n        width: '50%',\r\n        height: '50px',\r\n        textAlign: 'center',\r\n        display: 'inline-flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    };\r\n    function DetalleUsuario() {\r\n        const datosSimples = [\r\n            \"rol\",\r\n            \"name\",\r\n            \"email\",\r\n            \"telefono\",\r\n            \"calle\",\r\n            \"municipio\",\r\n            \"estado\",\r\n            \"codigopostal\",\r\n            \"alcohol\",\r\n            \"ciudad\",\r\n            \"colonia\",\r\n            \"cuales_drogas\",\r\n            \"diagnostico\",\r\n            \"drogas\", \"edad\",\r\n            \"escolaridad\",\r\n            \"estado_civil\",\r\n            \"fuma\", \"lugar_de_nacimiento\",\r\n            \"numexterior\",\r\n            \"numinterior\",\r\n            \"ocupacion\",\r\n            \"peso\", \"sexo\",\r\n            \"talla\"\r\n        ]\r\n\r\n        return <div>\r\n            {\r\n                editingProfile ? <Register paciente={paciente} setAdding={setEditingProfile} /> :\r\n                    <Card bordered={false} title={<Space><h4>Detalles del paciente </h4> <Button type='primary' ghost onClick={setEditingProfile} shape=\"circle\" icon={<EditOutlined />} title='Editar' className='btnIconCentered' /></Space>}>\r\n                        {\r\n                            datosSimples.map(k => <><Card.Grid style={gridStyle}>{k}</Card.Grid><Card.Grid style={gridStyle} size='small'>{paciente[k]}</Card.Grid></>)\r\n                        }\r\n                    </Card>\r\n            }\r\n        </div>\r\n    }\r\n\r\n    const handleSearch = e => {\r\n        setValue(e.target.value)\r\n        setSearchText(e.target.value);\r\n    };\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return <div>\r\n        <h6>Pacientes de {props.hospital}</h6>\r\n\r\n        <Input\r\n            style={{ width: '20em' }}\r\n            placeholder=\"Buscar Paciente\"\r\n            value={value}\r\n            onChange={handleSearch}\r\n            addonAfter={<SearchOutlined />}\r\n        />\r\n        <div className='borderedTable'>\r\n            <Table dataSource={pacientesDataFiltered} columns={columns} size='small' />\r\n        </div>\r\n\r\n        <Modal width={1200} open={isModalVisible} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n\r\n            <Expedientes paciente={paciente} setIsEditModalOpen={setIsEditModalOpen} />\r\n\r\n        </Modal>\r\n\r\n        {/* Modal For Edit */}\r\n        <RegisterModal getPacientesData={getPacientes} isModalOpen={isEditModalOpen} paciente={paciente} setIsModalOpen={setIsEditModalOpen} />\r\n\r\n    </div >\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\dash.admins.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\dash.doctors.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\admins\\register.admin.jsx",["1322","1323","1324","1325"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Divider, Select } from 'antd';\r\nimport { S_API, getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function Register(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.medico ? props.medico.avatar : 'https://')\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.medico);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  }, [])\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Administrador';\r\n    delete values.confirm;\r\n    delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario creado correctamente' ?\r\n          window.location.href = 'doctores' : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.medico._id, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setIsModalVisible(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      {\r\n        props.medico ?\r\n          <></> : <h1>Registrar doctor</h1>\r\n      }\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={props.medico ? onFinishEdit : onFinish}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.medico}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {\r\n              props.medico ? <></> : <>\r\n                <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n              </>\r\n            }\r\n\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={11}>\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: false, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"universidad\" label=\"Universidad\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n              {\r\n                props.setIsModalVisible && <Button onClick={() => props.setIsModalVisible(false)} style={{ marginRight: 6 }}>\r\n                  Cancelar\r\n                </Button>\r\n              }\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\dash.hospitals.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\hospitals\\register.hospital.jsx",["1326"],"import React, { Component, useState } from 'react'\r\nimport { Form, Input, Button, Row, Col, Upload } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n// import { Upload } from 'antd';\r\nimport { message } from 'antd';\r\n// import { UploadOutlined } from '@ant-design/icons';\r\nimport { API, sendDataBody, updateData } from '../../resources'\r\nconst { Dragger } = Upload;\r\n\r\n\r\nexport default function Register(props) {\r\n  const [profilePic, setProfilePic] = useState(props.hospital && props.hospital.logo ? props.hospital.logo : 'https://')\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload', // Production\r\n\r\n    beforeUpload: (file) => {\r\n      const isPNGorJPG = file.type === 'image/png' || file.type === 'image/jpeg';\r\n\r\n      if (!isPNGorJPG) {\r\n        message.error(`${file.name} no es una imagen tipo PNG o JPG`);\r\n      }\r\n\r\n      return isPNGorJPG || Upload.LIST_IGNORE;\r\n    },\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setProfilePic(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    values.logo = profilePic;\r\n    values.estatus = '1';\r\n    values.delete = '0';\r\n    console.log(\"Ready to send:\", values)\r\n    sendDataBody('sucursales/add', values).then((rs) => {\r\n      // message.success(rs.message || rs.error);\r\n      console.log('resp: ', rs);\r\n      if (rs.message && rs.message === 'Sucursal creada correctamente') window.location.href = '/hospitales'\r\n      else message.warning(rs.message || rs.error)\r\n      console.log('tosend: ', values);\r\n    })\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.logo = profilePic;\r\n    console.log(\"Ready to send editing:\", values)\r\n    updateData('sucursales/update/' + props.hospital._id, values).then(() => {\r\n      props.setModalVisible(false)\r\n    })\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      {props.hospital ? <></> : <h4>Registrar Nuevo Hospital</h4>}\r\n\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen con el logotipo o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form name=\"basic\" labelCol={{ span: 12 }} wrapperCol={{ span: 12 }} initialValues={props.hospital} onFinish={props.hospital ? onFinishEdit : onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\" >\r\n\r\n        <Row>\r\n          <Col>\r\n\r\n            <Form.Item label=\"Nombre\" name=\"nombre\" rules={[{ required: true, message: 'Please input your username!' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"RFC\" name=\"rfc\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Calle\" name=\"calle\" rules={[{ required: true, message: 'Ingresa nombre de la calle' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Numero exterior\" name=\"num_exterior\" rules={[{ required: true, message: 'Ingresa numero exterion' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Numero Interior\" name=\"num_interior\" rules={[{ required: false, message: 'Ingresa numero interior' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Ingresa nombre de colonia' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Form.Item label=\"Codigo Postal\" name=\"codigo_postal\" rules={[{ required: true, message: 'Ingresa codigo postal' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Ciudad Municipio\" name=\"ciudad_municipio\" rules={[{ required: true, message: 'Ingresa ciudad/municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Estado\" name=\"estado\" rules={[{ required: true, message: 'Ingresa estado' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Telefono\" name=\"telefono\" rules={[{ required: true, message: 'Ingresa numero de telefono' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Correo Electronico\" name=\"email\" rules={[{ required: true, message: 'Correo@Hopspital.com' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Sitio Web\" name=\"sitio_web\" rules={[{ required: true, message: 'www.hospital.com' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n        <Form.Item wrapperCol={{ offset: 9 }}>\r\n\r\n\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{ marginRight: 8 }}>\r\n            Guardar\r\n          </Button>\r\n          {props.setModalVisible && <Button onClick={() => props.setModalVisible(false)} >Cancelar</Button>}\r\n        </Form.Item>\r\n      </Form>\r\n    </div >\r\n  )\r\n}\r\n\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\doctors\\register.doctor.jsx",["1327","1328","1329","1330"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Divider, Select } from 'antd';\r\nimport { S_API, getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function Register(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.medico ? props.medico.avatar : 'https://')\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.medico);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  }, [])\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Medico';\r\n    delete values.confirm;\r\n    delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario creado correctamente' ?\r\n          window.location.href = 'doctores' : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.medico._id, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setIsModalVisible(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      {\r\n        props.medico ?\r\n          <></> : <h1>Registrar doctor</h1>\r\n      }\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={props.medico ? onFinishEdit : onFinish}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.medico}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {\r\n              props.medico ? <></> : <>\r\n                <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n              </>\r\n            }\r\n\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: false, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n\r\n          </Col>\r\n          <Col span={11}>\r\n\r\n\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"universidad\" label=\"Universidad\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"especialidad\" label=\"Especialidad\" rules={[{ required: false, message: 'Ingresa especialidad' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"tipo\" label=\"Tipo\" rules={[{ required: true, message: 'Selecciona el tipo de medico' }]} >\r\n              <Select\r\n                style={{\r\n                  width: '100%',\r\n                }}\r\n                onChange={(val) => console.log('Selected ', val)}\r\n                options={[\r\n                  {\r\n                    value: 'PSIQ',\r\n                    label: 'Psiquiatría',\r\n                  },\r\n                  {\r\n                    value: 'FISIO',\r\n                    label: 'Fisioterapia',\r\n                  }\r\n                ]}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailFormItemLayout}>\r\n              {\r\n                props.setIsModalVisible && <Button onClick={() => props.setIsModalVisible(false)} style={{ marginRight: 6 }}>\r\n                  Cancelar\r\n                </Button>\r\n              }\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientes\\dash.patients.hospital-tab.jsx",["1331","1332"],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\detalles.paciente.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\create-cita-for-medic.jsx",["1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344"],"import React, { useState, useEffect } from 'react'\r\nimport { Modal, Form, Select, Input, Button, message, Switch, DatePicker } from 'antd'\r\nimport { sendDataBody, updateData, ids_hospitales } from '../../resources';\r\n\r\n// admin and receipt shares create-cita, hospital-tab.citas and create-cita-for-medic\r\n// ONLY RECEIPT CANT DELETE, SO, FIRST EDIT RECEIPTIONIST\r\n// Last time, edited first admin\r\n\r\nexport function CreateCitaForm(props) {\r\n\r\n    const isCreating = !props.cita || Object.keys(props.cita).length === 0;\r\n\r\n    // const [medicosLoading, setMedicosLoading] = useState(true)\r\n    const [medicos, setMedicos] = useState([])//Set Medicos for select\r\n    // const [medicosData, setMedicosData] = useState([]) // List of all Medicos\r\n    const [servicios, setServicios] = useState([])\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [enableCreateCita, setEnableCreateCita] = useState(true)\r\n    // Body of cita\r\n    const [isOnline, setIsOnline] = useState(false)\r\n    const [costo, setCosto] = useState(0)\r\n\r\n    const [costoBaseCita, setCostoBaseCita] = useState(0)\r\n    const [usesCostoBase, setUsesCostoBase] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        // getDoctorsData()\r\n        console.log('Received Cita for edit', props.cita)\r\n        if (props.cita && props.cita.usuario) {\r\n            handlePatientChange(props.cita.usuario)\r\n\r\n            handleMedicochange(props.cita.medico)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (props.cita && props.cita.medico) handleMedicochange(props.cita.medico)\r\n    }, [medicos])\r\n\r\n\r\n\r\n\r\n    // Form Methods\r\n    const onFinish = (values) => {\r\n        const tipo_pago = values.tipo_pago;\r\n        values.sucursal = props.hospital;\r\n        delete values.tratamiento;\r\n        values.id_servicio = values.servicio.key;\r\n        values.servicio = values.servicio.label;\r\n        delete values.tipo_pago;\r\n\r\n        // Handle if its updating or creating cita\r\n        console.log('cita ready', values)\r\n        if (props.cita) {\r\n            updateData(`citas/update/${props.cita._id}`, values).then((response) => {\r\n                // message.success(response.message || response.error);\r\n                props.setIsModalOpen(false);\r\n                props.setEditingCita(false);\r\n            }).finally(() => { props.getCitasData(); })\r\n        } else {\r\n            sendDataBody('citas/add', values).then((response) => {\r\n                message.success(response.message || response.error);\r\n                // createBalance(response.id_nueva_cita, values.medico, values.fecha_hora, tipo_pago, values.servicio)\r\n            }).finally(() => { props.getCitasData(); props.setIsModalOpen(false) })\r\n        }\r\n    }\r\n\r\n    const createBalance = (_cita, medico, _fecha_hora, tipo_pago, _concepto) => {\r\n        const balanceBody = {\r\n            tipo: 'ingreso',\r\n            medico: medico,\r\n            cita: _cita,\r\n            monto: costo,\r\n            forma_de_pago: tipo_pago,\r\n            fecha_hora: _fecha_hora,\r\n            estado: 'pendiente',\r\n            concepto: _concepto\r\n        }\r\n        console.log('Balance ready to send: ', balanceBody)\r\n        sendDataBody('balances/add', balanceBody).then((rs) => { message.success(rs.message || rs.error); console.log(rs) })\r\n    }\r\n\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const handlePatientChange = (value) => {\r\n        const found = props.pacientesData.find((p) => p._id === value);\r\n        if (found) {\r\n            setEnableCreateCita(true)\r\n            let { medicos_asignados } = found\r\n            medicos_asignados.forEach((m) => {\r\n                m.label = m.name; m.value = m._id\r\n            });\r\n\r\n            console.log('Found', found)\r\n            console.log('meds', medicos_asignados)\r\n            setMedicos(medicos_asignados);\r\n\r\n        } else {\r\n            setEnableCreateCita(false)\r\n            setErrorMessage(\"Usuario no encontrado\")\r\n        }\r\n    };\r\n\r\n    const onSearchPatient = (value) => { };\r\n\r\n    const handleMedicochange = (_id) => {\r\n        console.log('selected', _id)\r\n        console.log('all medics handle med chang', medicos)\r\n        // Populate the \"servicio\" select\r\n        if (medicos.length > 0) {\r\n            let found = medicos.find((m) => m._id === _id)\r\n            if (found && found.configuracion.tratamientos_ofrecidos) {\r\n                setErrorMessage(\"\")\r\n                setEnableCreateCita(true)\r\n                if (props.enableCreateCita) props.setEditingCita(false)\r\n                let { configuracion: { tratamientos_ofrecidos } } = found;\r\n                console.log(\"found tr\", tratamientos_ofrecidos)\r\n                tratamientos_ofrecidos.forEach(t => {\r\n                    t.key = t._id; t.label = `${t.tratamiento} - $${t.costo} - ${t.observaciones ?? \"\"}`; t.value = t.costo + \"-\" + t._id; t.title = t.tratamiento; \r\n                });\r\n                const { configuracion: { costo_cita = 0 } } = found;\r\n                setCostoBaseCita(costo_cita)\r\n                setServicios(tratamientos_ofrecidos)\r\n            }\r\n            else {\r\n                setEnableCreateCita(false);\r\n                setErrorMessage(\"No se puede crear la cita para este médico, no cuenta con servicios\")\r\n                if (props.enableCreateCita) props.enableCreateCita(false)\r\n            }\r\n            //   \r\n\r\n        }\r\n    }\r\n\r\n    const onSwitch = (checked) => {\r\n        setIsOnline(checked)\r\n    };\r\n\r\n    // Handle change for select servicio\r\n    const handleServicioChange = (selected) => {\r\n        var cobro = selected.value.split(\"-\")[0];\r\n        setCosto(cobro)\r\n        console.log(`selected service`, selected);\r\n        console.log(`selected cobro`, cobro);\r\n    };\r\n\r\n    const onSwitchCosoBase = (checked) => {\r\n        // if(checked)se\r\n        console.log(`switch to ${checked}`);\r\n        setUsesCostoBase(checked)\r\n    };\r\n\r\n    const timeOptions = [\r\n        { label: 'Media Hora', value: 30 },\r\n        { label: 'Una Hora', value: 60 },\r\n        { label: 'Una Hora y Media', value: 90 },\r\n        { label: 'Dos Horas', value: 120 },\r\n        { label: 'Dos Horas Y Media', value: 150 },\r\n        { label: 'Tres Horas', value: 180 },\r\n        { label: 'Cuatro Horas', value: 210 },\r\n        { label: 'Cuatro Horas y Media', value: 240 },\r\n        { label: 'Cinco Horas', value: 270 },\r\n        { label: 'Cinco Horas y Media', value: 300 },\r\n    ]\r\n\r\n    const paymentOptions = [\r\n        { value: 'efectivo', label: 'Efectivo' },\r\n        { value: 'tarjeta', label: 'Tarjeta' },\r\n        { value: 'transferencia', label: 'Transferencia' },\r\n    ]\r\n\r\n    return <Form name=\"nueva_cita_admin\" labelCol={{ span: 8 }} wrapperCol={{ span: 14 }} onFinish={onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\"\r\n        initialValues={props.cita ? props.cita : { isOnline: false, tratamiento: 'Sin servicio', fecha_hora: props.fecha_hora, duracion: 60 }}>\r\n\r\n        <div>{errorMessage}</div>\r\n\r\n        <Form.Item label=\"Paciente\" name=\"usuario\" rules={[{ required: true, message: 'Selecciona Usuario' }]} >\r\n            <Select options={props.pacientesData} onChange={handlePatientChange} optionFilterProp=\"children\" onSearch={onSearchPatient} showSearch\r\n                filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Medico\" name=\"medico\" rules={[{ required: true, message: 'Selecciona Medico' }]} >\r\n            <Select options={medicos} onChange={handleMedicochange} />\r\n        </Form.Item>\r\n\r\n\r\n        <Form.Item label=\"VideoLlamada\" name=\"isOnline\" >\r\n            <Switch onChange={onSwitch} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Comentarios\" name=\"comentarios\" rules={[{ required: false, message: 'Ingresa Comentarios' }]} >\r\n            <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Fecha y Hora\" name=\"fecha_hora\" rules={[{ required: false, message: 'Selecciona Fecha y Hora' }]} >\r\n            <DatePicker showTime format=\"DD/MM/YYYY HH:mm\" use12Hours={true} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Duracion\" name=\"duracion\" rules={[{ required: true, message: 'Selecciona la duracion de la cita' }]} >\r\n            <Select options={timeOptions} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Servicio\" name=\"servicio\" rules={[{ required: true, message: 'Selecciona Medico' }]} >\r\n            <Select options={servicios} onChange={handleServicioChange} labelInValue />\r\n        </Form.Item>\r\n\r\n        {/* {\r\n            isCreating && <div>\r\n\r\n                <Form.Item label=\"Tipo de pago\" name=\"tipo_pago\" rules={[{ required: true, message: 'Selecciona tipo de pago' }]} >\r\n                    <Select options={paymentOptions} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label={`costo de la cita $${costoBaseCita}`} >\r\n                    <Switch onChange={onSwitchCosoBase} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <div className='fila'>\r\n                        <h6>Costo Total: ${usesCostoBase ? (costo + costoBaseCita) : costo} </h6>\r\n                    </div>\r\n                </Form.Item>\r\n\r\n            </div>\r\n        } */}\r\n\r\n        {\r\n            // Only if updating cita\r\n            props.cita && <div>\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" htmlType=\"submit\" form='nueva_cita_admin' disabled={!enableCreateCita}>\r\n                        Guardar\r\n                    </Button>\r\n                </Form.Item>\r\n            </div>\r\n        }\r\n\r\n    </Form>\r\n}\r\n\r\nexport default function CreateCita(props) {\r\n\r\n    const [enableCreate, setEnableCreate] = useState(true)\r\n    // Handle Modal Visibility\r\n    const handCreateleOk = () => { props.setIsModalOpen(false) }\r\n    const handCreateleCancel = () => { props.setIsModalOpen(false) }\r\n\r\n\r\n    return (\r\n        <Modal title=\"Nueva Cita\" open={props.isOpenModal} onOk={handCreateleOk} onCancel={handCreateleCancel} destroyOnClose width={600}\r\n            footer={[\r\n                <Button onClick={handCreateleCancel}>Cancelar</Button>,\r\n                <Button type=\"primary\" htmlType=\"submit\" form='nueva_cita_admin' disabled={!enableCreate}>\r\n                    Guardar\r\n                </Button>\r\n            ]}\r\n        >\r\n            {/* <CreateCitaForm setIsModalOpen={props.setIsModalOpen} hospital={props.hospital} fecha_hora={props.fecha_hora} getCitasData={props.getCitasData} pacientesData={props.pacientesData} setEnableCreateCita={setEnableCreate} /> */}\r\n            <CreateCitaForm {...props} />\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\n// Create the respective balance for cita\r\n// const createBalance = (_cita, monto) => {\r\n//     const balanceBody = {\r\n//         medico: medico,\r\n//         cita: _cita,\r\n//         monto: monto,\r\n//         forma_de_pago: 'efectivo',\r\n//         estado: 'pendiente',\r\n//     }\r\n//     console.log('Balance ready to send: ', balanceBody)\r\n//     sendDataBody('balances/add', balanceBody).then((rs) => console.log(rs))\r\n// }","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\move.patients.jsx",["1345"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Form, Input, Select, message } from 'antd';\r\nimport { API } from '../../resources';\r\nimport { usuario } from '../../resources';\r\nconst { Option } = Select;\r\n\r\n\r\nexport default function MovePatients() {\r\n    const [pacientesData, setPacientesData] = useState([]);\r\n    const [medicosData, setMedicosData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getPacientesData()\r\n        getMedicosData()\r\n    }, [])\r\n\r\n    const getPacientesData = () => {\r\n        fetch(API + `mispacientes/${usuario._id}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(\"Pacientes: \", data);\r\n                setPacientesData(data);\r\n                // setILoading(false);\r\n            });\r\n    }\r\n\r\n    const getMedicosData = () => {\r\n        fetch(API + `users_by_rol/Medico`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                setMedicosData(data);\r\n                // setILoading(false);\r\n            });\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        // console.log('Valores:', values);\r\n        const userFound = pacientesData.find(p => p._id === values.id_usuario);\r\n        let userMedicos = userFound.medicos_asignados;\r\n        userMedicos.push(values.medico);\r\n        const postBody = { medicos_asignados: userMedicos }\r\n        fetch(API + `users/updateMedicos/${values.id_usuario}`, { \r\n            method: 'PUT',\r\n            body: JSON.stringify(postBody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(response => { console.log('Success:', response); message.success(response.message || response.error); })\r\n            .catch(error => console.error('Error:', error))\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n\r\n\r\n    //Select paciente widget\r\n    function onChange(value) {\r\n        console.log(`selected ${value}`);\r\n    }\r\n    function onSearch(val) {\r\n        console.log('search:', val);\r\n    }\r\n    //End of select paciente widget\r\n    return (\r\n        <div>\r\n            <h4> Asignar pacientes a otro médico </h4>\r\n            <br />\r\n            <Form name=\"expediente\" labelCol={{ span: 8 }} wrapperCol={{ span: 12 }} onFinish={onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\" >\r\n\r\n                <Form.Item label=\"Paciente\" name=\"id_usuario\" rules={[{ required: true, message: 'Selecciona Usuario' }]} >\r\n                    <Select\r\n                        showSearch\r\n                        placeholder=\"Select a person\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={onChange}\r\n                        onSearch={onSearch}\r\n                    >\r\n                        {\r\n                            pacientesData.map(p => <Option value={p._id}>{p.name}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Medico\" name=\"medico\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                    <Select\r\n                        showSearch\r\n                        placeholder=\"Select a person\"\r\n                        optionFilterProp=\"children\"\r\n                        onChange={onChange}\r\n                        onSearch={onSearch}\r\n                    >\r\n                        {\r\n                            medicosData.map(p => <Option value={p._id}>{p.name}</Option>)\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\" form='expediente'>\r\n                        Guardar\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\dash.patients.jsx",["1346","1347","1348","1349","1350"],"import React, { Component, useState, useEffect } from 'react'\r\nimport { Table } from 'antd'\r\nimport { API } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport { usuario } from '../../resources'\r\n\r\n\r\nexport default function Dash() {\r\n\r\n  const [pacientesData, setPacientesData] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [view, setview] = useState('tabla')\r\n  const views = {\r\n    'tabla': 'tabla'\r\n  }\r\n\r\n  useEffect(() => {\r\n    getPacientesData()\r\n  }, [])\r\n\r\n  const getPacientesData = () => {\r\n    fetch(API + `mispacientes/${usuario._id}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data); setPacientesData(data);\r\n      })\r\n      .finally(() => setIsLoading(false))\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Nombre',\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      render: (text)=><a href=\"detalles\">{text}</a>\r\n    },\r\n    // {\r\n    //   title: 'Edad',\r\n    //   dataIndex: 'age',\r\n    //   key: 'age',\r\n    // },\r\n    {\r\n      title: 'Medico',\r\n      dataIndex: 'id_medicoasignado',\r\n      key: 'id_medicoasignado',\r\n    },\r\n    {\r\n      title: 'Municipio',\r\n      dataIndex: 'municipio',\r\n      key: 'municipio',\r\n    },\r\n    {\r\n      title: 'Calle',\r\n      dataIndex: 'calle',\r\n      key: 'calle',\r\n    },\r\n    {\r\n      title: 'N Exterior',\r\n      dataIndex: 'numexterior',\r\n      key: 'numexterior',\r\n    },\r\n    {\r\n      title: 'Telefono',\r\n      dataIndex: 'telefono',\r\n      key: 'telefono',\r\n    },\r\n\r\n  ];\r\n\r\n  const tablaPacientes = () => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>Pacientes</h4>\r\n      {\r\n        isLoading ? <Loading /> :\r\n          <Table dataSource={pacientesData} columns={columns} />\r\n      }\r\n      \r\n    </div>\r\n  )\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\pacientesDash\\register.patient.jsx",["1351"],"import React from 'react'\r\nimport { Form, Input, Button, message } from 'antd'\r\nimport { InputNumber, Select } from 'antd';\r\nimport { S_API, usuario, estados } from '../../resources'\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Register() {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = 'https://';\r\n    values.estatus = '1';\r\n    values.rol = 'Paciente';\r\n    values.password = values.telefono;\r\n    values.universidad = '';\r\n    values.certificacion = '';\r\n    values.cedula = '';\r\n    values.horarios = [];\r\n    values.medicos_asignados = [usuario._id];\r\n\r\n    delete values.prefix;\r\n\r\n    console.log(values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => { console.log('Success:', response); message.success(response.message || response.error); })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  return (\r\n    <div>\r\n      <h4>Registrar Paciente</h4>\r\n      <br />\r\n      <Form\r\n        // {...formItemLayout}\r\n        labelCol={{ span: 6 }} wrapperCol={{ span: 16 }}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={onFinish}\r\n        initialValues={{\r\n          residence: ['zhejiang', 'hangzhou', 'xihu'],\r\n          prefix: '52',\r\n        }}\r\n        scrollToFirstError\r\n      >\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Correo\"\r\n          rules={[\r\n            {\r\n              type: 'email',\r\n              message: 'The input is not valid E-mail!',\r\n            },\r\n            {\r\n              required: true,\r\n              message: 'Please input your E-mail!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        {/* <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"confirm\"\r\n          label=\"Confirmar contraseña\"\r\n          dependencies={['password']}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please confirm your password!',\r\n            },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue('password') === value) {\r\n                  return Promise.resolve();\r\n                }\r\n                return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item> */}\r\n\r\n        <Form.Item\r\n          name=\"telefono\"\r\n          label=\"Telefono\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Please input your phone number!',\r\n            },\r\n          ]}\r\n        >\r\n          <Input\r\n            addonBefore={prefixSelector}\r\n            style={{\r\n              width: '100%',\r\n            }}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Nombre\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Ingresa Nombre y apellidos',\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n\r\n\r\n        <Form.Item\r\n          name=\"calle\"\r\n          label=\"Calle\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Ingresa calle',\r\n              whitespace: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"numexterior\"\r\n          label=\"Num Exterior\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Ingresa numero exterior',\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"numinterior\"\r\n          label=\"Num Interior\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Ingresa numinterior',\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Colonia\"\r\n          name=\"colonia\"\r\n          rules={[{ required: true, message: 'Please input your colobnia!' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n          <Select placeholder=\"Elije tu estado\" showSearch>\r\n            {estados.map(e => <Option value={e}>{e}</Option>)}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"municipio\"\r\n          label=\"Municipio\"\r\n          rules={[{ required: true, message: 'Ingresa tu municipio' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n          <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n        </Form.Item>\r\n        {/* <Form.Item\r\n          name=\"certificacion\"\r\n          label=\"Certificacion\"\r\n          rules={[{ required: true, message: 'Ingresa tu certificacion' }]}\r\n        >\r\n          <Input />\r\n        </Form.Item> */}\r\n        {/* <Form.Item\r\n          name=\"universidad\"\r\n          label=\"Universidad\" rules={[{ required: true, message: 'Ingresa tu universidad' }]} >\r\n          <Input />\r\n        </Form.Item> */}\r\n\r\n        <Form.Item >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Registrar\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\hojaEnfermeriaPrint.jsx",["1352","1353","1354"],"import React, { useEffect } from 'react';\r\nimport { Document, Page, Text, View, Image, StyleSheet } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport Logo from '../../assets/Logo.png'\r\nimport { usuario, IMAGE_API } from '../../resources';\r\n\r\n// export default function HojaDocument(receta, logoHospital, nombreHospital, datosPaciente) {\r\nexport default function HojaDocument({ nombreHospital, logoHospital, receta, datosPaciente }) {\r\n\r\n    const { createdAt, peso, dosis, inicio, intermedio, termino, observaciones, aplicacion } = receta;\r\n\r\n    const { name, medicos_asignados } = datosPaciente;\r\n\r\n    useEffect(() => {\r\n        // console.log('hoja enf props', props)\r\n        console.log('hoja enf ', receta)\r\n        // console.log('hoja enf logoHospital', logoHospital)\r\n        // console.log('hoja enf nombreHospital', nombreHospital)\r\n        console.log('hoja enf datosPaciente', datosPaciente)\r\n    }, [])\r\n\r\n\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: '#ffffff',\r\n            padding: 30,\r\n        },\r\n        header: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'flex-start',\r\n            marginBottom: 20,\r\n        },\r\n        title: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            marginVertical: 30,\r\n            fontSize: 18\r\n        },\r\n        subtitle: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            marginVertical: 15,\r\n            fontSize: 15\r\n        },\r\n        logo: {\r\n            width: 100,\r\n            // height: 100,\r\n        },\r\n        content: {\r\n            flexDirection: 'row',\r\n            rowGap: 12,\r\n            justifyContent: 'space-between',\r\n            marginBottom: 20,\r\n        },\r\n        text: {\r\n            fontSize: 14,\r\n        },\r\n        table: {\r\n            display: \"table\",\r\n            width: \"auto\",\r\n            borderStyle: \"solid\",\r\n            borderWidth: 1,\r\n            borderRightWidth: 0,\r\n            borderBottomWidth: 0,\r\n        },\r\n        tableRow: {\r\n            margin: \"auto\",\r\n            flexDirection: \"row\",\r\n        },\r\n        tableCol: {\r\n            width: \"14.285%\", // Cambiado para 7 columnas\r\n            borderStyle: \"solid\",\r\n            borderWidth: 1,\r\n            borderLeftWidth: 0,\r\n            borderTopWidth: 0,\r\n        },\r\n        tableCell: {\r\n            margin: \"auto\",\r\n            marginTop: 5,\r\n            fontSize: 10\r\n        },\r\n        tableContainer: {\r\n            marginBottom: 20,\r\n        },\r\n        tableHeader: {\r\n            backgroundColor: '#f0f0f0',\r\n            borderBottomWidth: 1,\r\n        },\r\n        View: {\r\n            margin: 5,\r\n            padding: 5,\r\n            borderWidth: 1,\r\n            borderColor: 'black',\r\n        },\r\n        centeredText: {\r\n            textAlign: 'center',\r\n            marginBottom: 20,\r\n        },\r\n        textarea: {\r\n            borderWidth: 1,\r\n            borderColor: 'black',\r\n            padding: 5,\r\n            height: 140,\r\n        },\r\n    });\r\n\r\n    // Create Document Component\r\n    function Receta() {\r\n        return <Document>\r\n            <Page size=\"A4\" style={styles.page}>\r\n\r\n                <View style={styles.header}>\r\n                    <Image style={styles.logo} src={IMAGE_API + logoHospital} />\r\n                    {/* <Text>{logoHospital}</Text> */}\r\n                </View>\r\n\r\n                <View style={styles.title}>\r\n                    <Text>HOJA DE ENFERMERÍA</Text>\r\n                </View>\r\n\r\n                <View style={[styles.content, { justifyContent: 'flex-end' }]}>\r\n                    <Text style={styles.fecha}>Fecha: {new Date(createdAt).toLocaleDateString('es-MX', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' })}</Text>\r\n                </View>\r\n\r\n                <View style={styles.content}>\r\n                    <Text style={styles.text}>Nombre: {name}</Text>\r\n                </View>\r\n\r\n                <View style={styles.content}>\r\n                    <Text style={styles.text}>APLICACIÓN: {aplicacion + 1}</Text>\r\n                    <Text style={styles.text}>PESO: {peso}</Text>\r\n                    <Text style={styles.text}>DOSIS: {dosis}</Text>\r\n                </View>\r\n\r\n                <View style={styles.content}>\r\n                    <Text style={styles.text}>MEDICO TRATANTE:</Text>\r\n                    {\r\n                        medicos_asignados.map((m) => {\r\n                            return <Text style={styles.text}>{m.name}</Text>\r\n                        })\r\n                    }\r\n                </View>\r\n\r\n                <View style={styles.table}>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}></Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Hora</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Temperatura</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Frecuencia Respiratoria</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Frecuencia Cardiaca</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Presión Arterial</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Saturación de Oxigeno</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Inicio</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{new Date(inicio.hora).toLocaleTimeString()}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{inicio.temperatura}°</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{inicio.frecuencia_respiratoria}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{inicio.frecuencia_cardiaca}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{inicio.presion_arterial}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{inicio.saturacion_oxigeno}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Intermedio</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{new Date(intermedio.hora).toLocaleTimeString()}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{intermedio.temperatura}°</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{intermedio.frecuencia_respiratoria}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{intermedio.frecuencia_cardiaca}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{intermedio.presion_arterial}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{intermedio.saturacion_oxigeno}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.tableRow}>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>Término</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{new Date(termino.hora).toLocaleTimeString()}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{termino.temperatura}°</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{termino.frecuencia_respiratoria}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{termino.frecuencia_cardiaca}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{termino.presion_arterial}</Text>\r\n                        </View>\r\n                        <View style={styles.tableCol}>\r\n                            <Text style={styles.tableCell}>{termino.saturacion_oxigeno}</Text>\r\n                        </View>\r\n                    </View>\r\n\r\n                </View>\r\n\r\n                <View style={styles.subtitle}>\r\n                    <Text>SIGNOS Y SÍNTOMAS (OBSERVACIONES DE ENFERMERÍA)</Text>\r\n                </View>\r\n\r\n                <View>\r\n                    <View style={styles.textarea} >\r\n                        <Text style={{ fontSize: 12 }}>{observaciones}</Text>\r\n                    </View>\r\n                </View>\r\n\r\n                <View style={styles.subtitle}>\r\n                    <Text>ENFERMERO RESPONSABLE</Text>\r\n                </View>\r\n                <View style={{ color: 'black', width: '94%', backgroundColor: 'black', borderBottomColor: 'black', borderBottomWidth: 2, marginHorizontal: 20, alignSelf: 'center' }}></View>\r\n                <View style={styles.subtitle}>\r\n                    <Text>NOMBRE Y FIRMA</Text>\r\n                </View>\r\n\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n\r\n    }\r\n    return <div>\r\n        <PDFViewer height={700} width={550}>\r\n            <Receta />\r\n        </PDFViewer>\r\n    </div>\r\n\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_mexicana\\p_t_mexicana_details.jsx",["1355"],"import React from 'react'\r\nimport { Button, Modal, Card } from 'antd';\r\nimport { catalog_ept_mexicana } from './p_t_mexicana_catalog';\r\n\r\nexport default function PTMXDetails({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n    return (\r\n        <Modal title=\"Respuestas de la escala\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n\r\n            {\r\n                Object.keys(escalaDetails).map((key) => {\r\n                    return <Card size='small'>\r\n                        <Card.Grid hoverable={false} style={{ width: '70%' }}>{catalog_ept_mexicana[Number(key) - 1]}</Card.Grid>\r\n                        <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails[key]}</Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\superAdminViews\\receptionists\\register.receptionist.jsx",["1356","1357","1358","1359"],"import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Space, Row, Col, Upload } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport { Divider, Select } from 'antd';\r\nimport { S_API, getData, API } from '../../resources'\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 14,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\nexport default function Register(props) {\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [sucursales, setSucursales] = useState([]);\r\n  const [sucursalesLoading, setSucursalesLoading] = useState(true);\r\n  const [avatar, setAvatar] = useState(props.medico ? props.medico.avatar : 'https://')\r\n\r\n  //Start upload props Upload File\r\n  const dragDropProps = {\r\n    name: 'file',\r\n    multiple: false,\r\n    action: API + 'imagenes/upload',\r\n\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n\r\n      if (status === 'done') {\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n        console.log('New Files: ', info.file.response.file)\r\n        setAvatar(info.file.response.file)\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n\r\n    onDrop(e) {\r\n      console.log('Dropped files', e.dataTransfer.files);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('received Medic: ', props.medico);\r\n    getData('sucursales').then((rs) => { setSucursales(rs); setSucursalesLoading(false) })\r\n  }, [])\r\n\r\n\r\n\r\n  const onFinish = (values) => {\r\n    values.avatar = avatar;\r\n    values.estatus = '1';\r\n    values.rol = 'Recepcion';\r\n    delete values.confirm;\r\n    delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(S_API + 'register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario creado correctamente' ?\r\n          window.location.href = 'recepcionistas' : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const onFinishEdit = (values) => {\r\n    values.avatar = avatar;\r\n    // values.estatus = '1';\r\n    // values.rol = 'Medico';\r\n    // delete values.confirm;\r\n    // delete values.prefix;\r\n\r\n    console.log('ready to send', values)\r\n    fetch(API + 'users/updateUser/' + props.medico._id, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(values),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n      .then(response => {\r\n        console.log('Success:', response);\r\n        response.message && response.message === 'Usuario actualizado correctamente' ?\r\n          props.setIsModalVisible(false) : message.error(response.error);\r\n      })\r\n      .catch(error => console.error('Error:', error))\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"+52\">+52</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  const suffixSelector = (\r\n    <Form.Item name=\"suffix\" noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value=\"USD\">$</Option>\r\n        <Option value=\"CNY\">¥</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n  return (\r\n    <div>\r\n      {\r\n        props.medico ?\r\n          <></> : <h1>Registrar Recepcionista</h1>\r\n      }\r\n      <br />\r\n      <Dragger {...dragDropProps}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <InboxOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">Arrastra la imagen de perfil o click ara buscar</p>\r\n        <p className=\"ant-upload-hint\">\r\n          Selecciona archivos en formato png, jpeg o webp\r\n        </p>\r\n      </Dragger>\r\n      <br />\r\n      <Form\r\n        {...formItemLayout}\r\n        form={form}\r\n        name=\"register\"\r\n        onFinish={props.medico ? onFinishEdit : onFinish}\r\n        // initialValues={{ horarios: [{ sucursal: '', horario: '' }], prefix: '+52' }}\r\n        initialValues={props.medico}\r\n        scrollToFirstError\r\n      >\r\n\r\n        <Row>\r\n\r\n          <Col span={11}>\r\n            <Form.Item name=\"name\" label=\"Nombre\" rules={[{ required: true, message: 'Ingresa Nombre y apellidos' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name=\"email\" label=\"Correo\" rules={[{ type: 'email', message: 'Ingresa un corrreo electronico valido' }, { required: true, message: 'Please input your E-mail!' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {\r\n              props.medico ? <></> : <>\r\n                <Form.Item name=\"password\" label=\"Contraseña\" rules={[{ required: true, message: 'Por favor ingrese su contraseña!', },]} hasFeedback >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"confirm\" label=\"Confirmar contraseña\" dependencies={['password']} hasFeedback\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                      validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                          return Promise.resolve();\r\n                        }\r\n                        return Promise.reject(new Error('Las contraseñas deben coincidir!'));\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input.Password />\r\n                </Form.Item>\r\n              </>\r\n            }\r\n\r\n\r\n            <Form.Item name=\"telefono\" label=\"Telefono\" rules={[{ required: true, message: 'Ingresa el numero de telefono correcto' },]}>\r\n              <Input addonBefore={prefixSelector} style={{ width: '100%', }} />\r\n            </Form.Item>\r\n\r\n\r\n\r\n\r\n          </Col>\r\n          <Col span={11}>\r\n            <Form.Item label=\"Horarios\" rules={[{ required: true, message: 'Ingresa al menos un horario', },]}>\r\n              <Form.List name=\"horarios\" label=\"horarios list\"\r\n              >\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map(({ key, name, ...restField }) => (\r\n                      <Space key={key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'sucursal']}\r\n                          rules={[{ required: true, message: 'Elije Sucursal' }]}\r\n                        >\r\n                          <Select placeholder=\"Elije Sucursal\" style={{ width: '120px' }} >\r\n                            {sucursalesLoading ? \"Cargando\" :\r\n                              sucursales.map(s => <Option value={s._id}>{s.nombre}</Option>)\r\n                            }\r\n                          </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...restField}\r\n                          name={[name, 'horario']}\r\n                          rules={[{ required: false, message: 'Missing last name' }]}\r\n                        >\r\n                          <Input placeholder=\"Horario\" />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined onClick={() => remove(name)} />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item>\r\n                      <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                        Agregar Horario\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"cedula\" label=\"Cedula\" rules={[{ required: false, message: 'Ingresa cedula' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            {/* Not Necesary For Medic. He'll be in hospital direction */}\r\n            {/* <Form.Item name=\"calle\" label=\"Calle\" rules={[{ required: true, message: 'Ingresa calle', whitespace: true }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numexterior\" label=\"Num Exterior\" rules={[{ required: true, message: 'Ingresa numero exterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"numinterior\" label=\"Num Interior\" rules={[{ required: true, message: 'Ingresa numinterior' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Colonia\" name=\"colonia\" rules={[{ required: true, message: 'Please input your colobnia!' }]}            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"estado\" label=\"Estado\" rules={[{ required: true, message: 'Apellido materno', },]}>\r\n              <Select placeholder=\"Elije tu estado\">\r\n                {estados.map(e => <Option value={e}>{e}</Option>)}\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"municipio\" label=\"Municipio\" rules={[{ required: true, message: 'Ingresa tu municipio' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"codigopostal\" label=\"Codigo Postal\" rules={[{ required: true, message: 'Ingresa codigopostal', },]}>\r\n              <InputNumber addonAfter={suffixSelector} style={{ width: '100%', }} />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item name=\"certificacion\" label=\"Certificacion\" rules={[{ required: false, message: 'Ingresa tu certificacion' }]}>\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item name=\"universidad\" label=\"Universidad\" rules={[{ required: false, message: 'Ingresa tu universidad' }]} >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item {...tailFormItemLayout}>\r\n              {\r\n                props.setIsModalVisible && <Button onClick={() => props.setIsModalVisible(false)} style={{ marginRight: 6 }}>\r\n                  Cancelar\r\n                </Button>\r\n              }\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Guardar\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Form.Item\r\n          name=\"agreement\"\r\n          valuePropName=\"checked\"\r\n          rules={[\r\n            {\r\n              validator: (_, value) =>\r\n                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n            },\r\n          ]}\r\n          {...tailFormItemLayout}\r\n        >\r\n          <Checkbox>\r\n            He leído y acepto los <a href=\"https://recreamed.com\">terminos y condiciones</a>\r\n          </Checkbox>\r\n        </Form.Item> */}\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\loadingIndicator.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleReceta.jsx",["1360","1361"],"import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Row, Col, Modal, Form, Input, message } from 'antd';\r\nimport { API, sendDataBody, updateData, usuario } from '../../resources';\r\nimport { PlusOutlined, FormOutlined, PrinterOutlined } from '@ant-design/icons';\r\nimport RecetaDocument from './detalleRecetaForPrint';\r\nconst { TextArea } = Input;\r\n//Los IDS de las recetas son tomados y enviados desde el expediente\r\n// Estan siendo agregadas y actualizadas directamente al expediente desde el form de detallenota->Agregar Receta\r\nexport default function DetalleReceta({ recetas, id_nota, paciente }) {\r\n\r\n    const isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\r\n\r\n    const [recetaData, setRecetaData] = useState([]);\r\n    const [recetaLoading, setRecetaLoading] = useState(true);\r\n    const [recetaForEdit, setRecetaForEdit] = useState({});\r\n    const [isModalVisible, setIsModalVisible] = useState(false); // Modal For Add REcipe\r\n    const [isEditingModalVisible, setIsEditingModalVisible] = useState(false); // Modal For Edit Recipe\r\n    const [isPrintingModalVisible, setIsPrintingModalVisible] = useState(false)\r\n\r\n    // Add Recipe Modal\r\n    const handleOk = () => { setIsModalVisible(false); };\r\n    const handleCancel = () => { setIsModalVisible(false); };\r\n    // Edit Recipe Modal\r\n    const showEditModal = () => { console.log('BeforeEdit'); setIsEditingModalVisible(true); };\r\n    const handleEditOk = () => { setIsEditingModalVisible(false); };\r\n    const handleEditCancel = () => { setIsEditingModalVisible(false); };\r\n    // Print Receta Modal\r\n    const handlePrintOk = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    const handlePrintCancel = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    // Select logo for print in receta. Switches the modal view into select logo hospital/pdf recipe for print\r\n    const [logoHospital, setLogoHospital] = useState(null)\r\n    const [nombreHospital, setNombreHospital] = useState(null)\r\n    const [isLogoSelected, setIsLogoSelected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        recetas ?\r\n            getRecetasData()\r\n            :\r\n            finifhGet()\r\n    }, [recetas])\r\n\r\n    const getRecetasData = () => {\r\n        sendDataBody('recetas/getMany', { 'ids': recetas }).then((response) => {\r\n            setRecetaData(response);\r\n            setRecetaLoading(false)\r\n        })\r\n    }\r\n\r\n    const finifhGet = () => { setRecetaData([]); setRecetaLoading(false); }\r\n\r\n    // New Receta\r\n    const onFinish = async (values) => {\r\n        values.id_nota = id_nota;\r\n        console.log('new Receta:', values);\r\n        console.log('new Recetas:', values);\r\n\r\n        const newReceta = await fetch(API + 'recetas/add', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(values)\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log('Success:', response);\r\n                message.info(response.message || response.error)\r\n                response.message === 'Receta creada correctamente' ? setIsModalVisible(false) : console.log(response.error);\r\n                return response;\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n        recetas.push(newReceta.id_receta)\r\n        console.log('New Recetas: ', recetas);\r\n\r\n        // Update nota.recetas\r\n        fetch(API + 'notas/updateRecetas/' + id_nota, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \"recetas\": recetas }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log('Update Exp:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    // End of Form\r\n\r\n    // Set Edit Receta and open modal\r\n    const editReceta = (r) => {\r\n        setRecetaForEdit(r)\r\n        console.log(r);\r\n        showEditModal();\r\n    }\r\n    // Send data for update Receta\r\n    const updateReceta = (values) => {\r\n        console.log('update', values);\r\n        updateData(`recetas/update/${recetaForEdit._id}`, values).then((rs) => {\r\n            // message.success(rs);\r\n            setIsEditingModalVisible(false)\r\n            getRecetasData()\r\n        })\r\n    }\r\n    // Print Receta\r\n    const printReceta = async (r) => {\r\n        setRecetaForEdit(r)\r\n        setIsPrintingModalVisible(true)\r\n        console.log(r);\r\n    }\r\n\r\n\r\n    const gridStyle = {\r\n        width: '100%',\r\n        height: '32',\r\n        textAlign: 'center',\r\n        display: 'inline-flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    };\r\n\r\n    return <div>\r\n        <Card\r\n        // title={<>Recetas <Button className='btnIconCentered' onClick={() => setIsModalVisible(true)} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost /></>}\r\n        >\r\n            <div className='fila' style={{ marginBottom: 8 }}>\r\n                <h6>Recetas</h6>\r\n                {\r\n                    isDoctor && <Button className='btnIconCentered' onClick={() => setIsModalVisible(true)} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n                }\r\n            </div>\r\n            {\r\n                recetaLoading ? <h5>Cargando Receta...</h5> :\r\n                    recetaData.length > 0 ?\r\n\r\n                        recetaData.map((r) => {\r\n                            return <div key={r._id} style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                <p style={{ whiteSpace: 'pre' }}>{r.prescripcion} </p>\r\n                                <div>\r\n                                    {\r\n                                        isDoctor && <Button style={{ marginLeft: 8 }} onClick={() => editReceta(r)} size='small' type=\"primary\" shape=\"circle\" icon={<FormOutlined />} className='btnIconCentered' ghost />\r\n                                    }\r\n                                    <Button style={{ marginLeft: 8 }} onClick={() => printReceta(r)} size='small' type=\"primary\" shape=\"circle\" icon={<PrinterOutlined />} className='btnIconCentered' ghost />\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                        :\r\n                        <h6>No hay una receta asignada</h6>\r\n            }\r\n        </Card>\r\n\r\n        <Modal title=\"Nueva Receta\" open={isModalVisible} onOk={handleOk} onCancel={handleCancel}\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='create_receta_medic'>\r\n                    Guardar\r\n                </Button>,\r\n                <Button onClick={handleCancel}>Cancelar</Button>\r\n            ]}>\r\n            <Form\r\n                name=\"create_receta_medic\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    label=\"Prescripcion\"\r\n                    name=\"prescripcion\"\r\n                    rules={[{ required: true, message: 'Ingresa la prescripcion' }]}\r\n                >\r\n                    <TextArea rows={6} autoFocus />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n        <Modal title=\"Editar Receta\" open={isEditingModalVisible} onOk={handleEditOk} onCancel={handleEditCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='update_receta_medic'>\r\n                    Actualizar\r\n                </Button>,\r\n            ]}>\r\n\r\n            <Form\r\n                name=\"update_receta_medic\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={{ prescripcion: recetaForEdit.prescripcion }}\r\n                onFinish={updateReceta}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    label=\"Prescripcion\"\r\n                    name=\"prescripcion\"\r\n                    rules={[{ required: true, message: 'Ingresa la prescripcion' }]}\r\n                >\r\n                    <TextArea rows={6} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n        <Modal title=\"Imprimir Receta\" open={isPrintingModalVisible} onOk={handlePrintOk} onCancel={handlePrintCancel} width={600}\r\n            footer={[\r\n                <Button onClick={handlePrintCancel}>Cancelar</Button>\r\n            ]}\r\n        >\r\n            {\r\n                isLogoSelected ? // Si ya hay logo seleccionado, se pasa a la receta y se muestra en pdf\r\n                    <RecetaDocument receta={recetaForEdit} logoHospital={logoHospital} nombreHospital={nombreHospital} paciente={paciente} />\r\n                    :\r\n                    <div>\r\n                        <Card title='Selecciona un hospital' bordered={false}>\r\n                            {\r\n                                usuario.horarios.map((h) => {\r\n                                    return <Card.Grid style={{ width: '100%' }} onClick={() => { console.log(h.sucursal); setLogoHospital(h.sucursal.logo); setNombreHospital(h.sucursal.nombre); setIsLogoSelected(true) }} key={h._id}>\r\n                                        <Row align=\"middle\">\r\n                                            <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                            <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                        </Row>\r\n                                    </Card.Grid>\r\n                                })\r\n                            }\r\n                        </Card>\r\n                    </div>\r\n            }\r\n        </Modal>\r\n    </div>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\nuevaNota.jsx",["1362"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Input, Button, message, Select, Upload, Space } from 'antd';\r\nimport { API, usuario } from '../../resources';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { diagnosticos } from '../../assets/diagnosticos2';\r\nconst { Option, OptGroup } = Select;\r\nconst { Dragger } = Upload;\r\nconst { TextArea } = Input;\r\n\r\nconst handleChange = (value) => {\r\n    // Select diagnostic\r\n    console.log(`selected ${value}`);\r\n};\r\n\r\nconst onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n};\r\n\r\n\r\n//List of Estudios styles\r\n// const formItemLayout = {\r\n//     labelCol: {\r\n//         xs: {\r\n//             span: 24,\r\n//         },\r\n//         sm: {\r\n//             span: 4,\r\n//         },\r\n//     },\r\n//     wrapperCol: {\r\n//         xs: {\r\n//             span: 24,\r\n//         },\r\n//         sm: {\r\n//             span: 20,\r\n//         },\r\n//     },\r\n// };\r\n// const formItemLayoutWithOutLabel = {\r\n//     wrapperCol: {\r\n//         xs: {\r\n//             span: 24,\r\n//             offset: 0,\r\n//         },\r\n//         sm: {\r\n//             span: 20,\r\n//             offset: 4,\r\n//         },\r\n//     },\r\n// };\r\n\r\n\r\n\r\nexport function NuevaNota(props) {\r\n    const [estudiosFiles, setEstudiosFiles] = useState([])\r\n\r\n    useEffect(() => {\r\n        console.log('Received nota on props: ', props.nota)\r\n    }, [])\r\n\r\n   \r\n    const onFinish = async (values) => {\r\n        // Create Nota\r\n        values.id_medico = usuario._id;\r\n        values.id_usuario = props.paciente;\r\n        values.recetas = [];\r\n        values.estudios = estudiosFiles;\r\n        console.log('ready To send: ', values)\r\n        const newNota = await fetch(API + 'notas/add', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                message.success(response.message || response.error);\r\n                // response.message && response.message === ''\r\n                return response;\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n        // Add new nota to received notas\r\n        props.prevExpNotas.push(newNota.id_nota)\r\n        //Update nota at expedient\r\n        fetch(API + 'expedientes/updateNotas/' + props.id_expediente, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \"notas\": props.prevExpNotas }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                console.log('Update Exp:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n    };\r\n\r\n    const onFinishEdit = (values) => {\r\n        // Create Nota\r\n        console.log('ready To send: ', values)\r\n        fetch(API + 'notas/update/' + props.nota._id, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                message.success(response.message || response.error);\r\n                if (response.message && response.message === 'Nota Updated') props.setIsModalVisible(false)\r\n                console.log(response);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n    };\r\n\r\n    // Upload File\r\n    const dragDropProps = {\r\n        name: 'file',\r\n        multiple: true,\r\n        action: API + 'notas/estudios/upload', // Production\r\n\r\n        onChange(info) {\r\n            const { status } = info.file;\r\n\r\n            if (status !== 'uploading') {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n\r\n            if (status === 'done') {\r\n                message.success(`${info.file.name} file uploaded successfully.`);\r\n                console.log('New Files: ', info.file.response.file)\r\n                setEstudiosFiles([...estudiosFiles, info.file.response.file])\r\n            } else if (status === 'error') {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n            }\r\n        },\r\n\r\n        onDrop(e) {\r\n            console.log('Dropped files', e.dataTransfer.files);\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4 style={{ marginLeft: 20 }}>Detalles de la nota</h4>\r\n            {/* <p>Expediente received: {props.id_expediente}</p>\r\n            <p>Paciente received: {props.paciente}</p>\r\n            <p>Medico received: {usuario._id}</p>\r\n            <p>prevExpNotas received: {props.prevExpNotas}</p>\r\n            *La nota lleva el id del medico, obtenido de la sesion */}\r\n            {/* <p>Diag [0].clasificacion {diagnosticos[0]['clasificacion']}</p> */}\r\n\r\n            <br />\r\n            <Dragger {...dragDropProps}>\r\n                <p className=\"ant-upload-drag-icon\">\r\n                    <InboxOutlined />\r\n                </p>\r\n                <p className=\"ant-upload-text\">Arrastra los archivos de estudio aquí, o da click para buscar</p>\r\n                <p className=\"ant-upload-hint\">\r\n                    Selecciona archivos en pdf o imagen que sean menores a 2 MB para poder subirlos\r\n                </p>\r\n            </Dragger>\r\n            <Form name=\"basic\" labelCol={{ span: 8 }} wrapperCol={{ span: 14 }} initialValues={props.nota ? props.nota : { remember: true, estudios: [] }} onFinish={props.nota ? onFinishEdit : onFinish} onFinishFailed={onFinishFailed} autoComplete=\"off\" style={{ marginTop: 12 }} >\r\n\r\n                <Form.Item label=\"Edad\" name=\"edad\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Talla\" name=\"talla\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Peso\" name=\"peso\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"IMC\" name=\"imc\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Temperatura\" name=\"temperatura\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Presion Arterial\" name=\"presion_arterial\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Frecuencia Cariaca\" name=\"frecuencia_cardiaca\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item label=\"Frecuencia respiratoria\" name=\"frecuencia_respiratoria\" rules={[{ required: false, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                {/* <Form.Item label=\"Estudios\" name=\"estudios\" rules={[{ required: true, message: 'Ingresa RFC' }]} >\r\n                    <Input />\r\n                </Form.Item> */}\r\n\r\n                {/* \r\n                <Form.List\r\n                    name=\"estudios\"\r\n                    rules={[\r\n                        {\r\n                            validator: async (_, names) => {\r\n                                if (!names || names.length < 1) {\r\n                                    return Promise.reject(new Error('Ingresa al menos un estudio'));\r\n                                }\r\n                            },\r\n                        },\r\n                    ]}\r\n                >\r\n                    {(fields, { add, remove }, { errors }) => (\r\n                        <>\r\n                            {fields.map((field, index) => (\r\n                                <Form.Item\r\n                                    {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                    label={index === 0 ? 'Estudio' : ''}\r\n                                    required={false}\r\n                                    key={field.key}\r\n                                    getValueFromEvent={getFile}\r\n                                >\r\n                                    <Form.Item\r\n                                        {...field}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: true,\r\n                                                whitespace: true,\r\n                                                message: \"Ingresa estudios\",\r\n                                            },\r\n                                        ]}\r\n                                        noStyle\r\n                                    >\r\n                                        <Upload {...UploadProps}>\r\n                                            <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n                                        </Upload>\r\n                                    </Form.Item>\r\n                                    {fields.length > 1 ? (\r\n                                        <MinusCircleOutlined\r\n                                            className=\"dynamic-delete-button\"\r\n                                            onClick={() => remove(field.name)}\r\n                                        />\r\n                                    ) : null}\r\n                                </Form.Item>\r\n                            ))}\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"dashed\"\r\n                                    onClick={() => add()}\r\n                                    style={{\r\n                                        // width: '100%',\r\n                                        position: 'relative',\r\n                                        alignItems: 'center',\r\n                                        justifyContent: 'flex-end'\r\n                                    }}\r\n                                    icon={<PlusOutlined />}\r\n                                >\r\n                                    Agregar Estudios\r\n                                </Button>\r\n                                <Form.ErrorList errors={errors} />\r\n                            </Form.Item>\r\n                        </>\r\n                    )}\r\n                </Form.List>\r\n */}\r\n\r\n                <Form.Item label=\"Observaciones\" name=\"Observaciones\" rules={[{ required: true, message: 'Ingresa Observaciones' }]} >\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Diagnostico\" name=\"diagnostico\" rules={[{ required: true, message: 'Selecciona Diagnostico' }]} >\r\n                    <Select\r\n                        showSearch\r\n                        style={{ width: 400 }}\r\n                        onChange={handleChange}\r\n                    >\r\n                        {\r\n                            Object.keys(diagnosticos).map((k) => {\r\n                                return <OptGroup label={k}>\r\n                                    {Object.keys(diagnosticos[k]).map((sk) => {\r\n                                        return <Option value={sk}>{diagnosticos[k][sk]}</Option>\r\n                                    })}\r\n                                </OptGroup>\r\n\r\n                            })\r\n                        }\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                    <Space>\r\n                        <Button onClick={() => props.setIsModalVisible(false)}>\r\n                            Cancelar\r\n                        </Button>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Guardar\r\n                        </Button>\r\n                    </Space>\r\n\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_results.jsx",["1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal, Select, Form, Table } from 'antd';\r\nimport EscalasCreateGeneralLink from '../../escalasCreateGeneralLink';\r\nimport getAllEscalas from '../../getEscalas';\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../../resources';\r\nimport PTDetails from './p_t_details';\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function PostTraumaticoResults() {\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [medico, setMedico] = useState(null)\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loadingCounters, setLoadingCounters] = useState(true)\r\n    const [loading, setLoading] = useState(true)\r\n    const [columns, setColumns] = useState([])\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n\r\n    useEffect(() => {\r\n        addColumns();\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('post_traumatico', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            setMedicosData(rs)\r\n        })\r\n    }\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/post_traumatico/`).then((rs) => {\r\n            getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            console.log('MisPacientes ept1: ', rs);\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); setLoadingCounters(false) });\r\n    }\r\n\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente'\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total Escalas Respondidas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n\r\n\r\n    const addColumns = () => {\r\n        let columns = [\r\n            {\r\n                title: 'Paciente',\r\n                dataIndex: 'usuario',\r\n                key: 'name',\r\n                render: (_, { usuario }) => <>{usuario ? usuario.name : \"Usuario eliminado\"}</>\r\n            }\r\n        ];\r\n        for (let i = 1; i < 18; i++) {\r\n            columns.push({\r\n                title: 'Pregunta ' + i,\r\n                children: [\r\n                    {\r\n                        title: 'Frecuencia',\r\n                        dataIndex: 'respuestas_depresion2_gpc',\r\n                        key: 'hrsd' + i,\r\n                        render: (_, { respuestas_ept1_davidson }) => (\r\n                            <>\r\n                                {respuestas_ept1_davidson[i][0]}\r\n                            </>\r\n                        ),\r\n                    }, {\r\n                        title: 'Gravedad',\r\n                        dataIndex: 'respuestas_depresion2_gpc',\r\n                        key: 'hrsd' + i,\r\n                        render: (_, { respuestas_ept1_davidson }) => (\r\n                            <>\r\n                                {respuestas_ept1_davidson[i][1]}\r\n                            </>\r\n                        ),\r\n                    }\r\n\r\n                ]\r\n            })\r\n        }\r\n        setColumns(columns)\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { respuestas_ept1_davidson }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(respuestas_ept1_davidson); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h6>Evaluación Del Trastorno Por Estrés Postraumático: Aproximación A Las Propiedades Psicométricas De La Escala De Trauma De Davidson</h6>\r\n            <br />\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Enlace EPT 1\r\n            </Button>\r\n            <br />\r\n            {/* <Table dataSource={countersData} columns={counterColumns} bordered /> */}\r\n            <br />\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            {/* <Table dataSource={encuestasData} columns={columns} scroll={{ x: 1600 }} bordered /> */}\r\n            <Table dataSource={encuestasData} columns={detailsColumns} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta de Estres Post Traumatico\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='post_traumatico' />\r\n            </Modal>\r\n\r\n            <PTDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\p_t_clinico\\p_t_clinico_results.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\depresion\\depresion_1\\depresionResults.jsx",["1375","1376","1377","1378","1379","1380","1381","1382","1383"],"import React, { useState, useEffect } from 'react'\r\nimport { Table, Button, Modal } from 'antd'\r\nimport { Form, Select } from 'antd';\r\nimport { getData, usuario, sendDataBody, ids_hospitales } from '../../../resources';\r\nimport EscalasCreateGeneralLink from '../../escalasCreateGeneralLink';\r\nimport getAllEscalas from '../../getEscalas';\r\nimport Loading from '../../../loading';\r\nconst { Option } = Select;\r\n\r\n// DEPRESION QIDS \r\n\r\nexport default function DepresionResults() {\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [medicosData, setMedicosData] = useState([])\r\n    const [countersData, setCountersData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('depresion', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/depresion/medico/${medico}`).then((rs) => {\r\n            // getCounters(rs, medico);\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const getCounters = (data, medico) => {\r\n        const allEncuestas = [...data];\r\n        const results = []\r\n        getData(`mispacientes/${medico}`).then(rs => {\r\n            rs.forEach(pac => {\r\n                const aprs = allEncuestas.filter(enc => enc.usuario?._id === pac._id)\r\n                const latest = aprs.at(-1)\r\n                results.push({\r\n                    'paciente': pac.name,\r\n                    'total': aprs.length,\r\n                    'semana': latest?.createdAt.substring(0, 10)\r\n                })\r\n            });\r\n            console.log(results)\r\n        }).finally(() => { setCountersData(results); });\r\n    }\r\n    const counterColumns = [\r\n        {\r\n            title: 'Paciente',\r\n            key: 'paciente',\r\n            dataIndex: 'paciente',\r\n        },\r\n        {\r\n            title: 'Fecha ultima encuesta',\r\n            key: 'semana',\r\n            dataIndex: 'semana',\r\n        },\r\n        {\r\n            title: 'Total Escalas Respondidas',\r\n            key: 'total',\r\n            dataIndex: 'total'\r\n        }\r\n    ];\r\n\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Paciente',\r\n            dataIndex: 'usuario',\r\n            key: 'name',\r\n            render: (_, { usuario }) => <>{usuario ? usuario.name : \"Usuario eliminado\"}</>\r\n        },\r\n        {\r\n            title: 'Puntaje',\r\n            dataIndex: 'score',\r\n            key: 'age',\r\n        }\r\n    ];\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h5>Resultados de encuestas de sintomatologia depresiva QUIDS (QUICK INVENTORY OF DEPRESSIVE SYMPTOMATOLOGY)</h5>\r\n            <br />\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Generar Escala Depresion 1\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            {/* Counters <Table dataSource={countersData} columns={counterColumns} bordered /> <br /> */}\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <br />\r\n            <Table dataSource={encuestasData} columns={columns} bordered />\r\n\r\n            <Modal title=\"Crear encuesta de Depresion QUIDS\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='depresion_qids' />\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\assets\\diagnosticos2.js",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\estres_post_traumatico\\post_traumatico\\p_t_details.jsx",["1384"],"import React from 'react'\r\nimport { Button, Card, Modal } from 'antd';\r\nimport { post_catalog } from './p_t_catalog';\r\n\r\n// {\"1\":[3,2],\"2\":[3,0],\"3\":[2,2],\"4\":[4,4],\"5\":[1,2],\"6\":[2,1],\"7\":[1,3],\"8\":[0,0],\"9\":[1,1],\"10\":[1,4],\"11\":[3,3],\"12\":[1,0],\"13\":[1,4],\"14\":[4,4],\"15\":[3,2],\"16\":[1,1],\"17\":[0,1],\"_id\":\"63866dc6e2c587930958c817\"}\r\n\r\nexport default function PTDetails({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n    return (\r\n        <Modal title=\"Post\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n\r\n            <Card>\r\n                <Card.Grid style={{ width: '50%' }} hoverable={false}>Pregunta</Card.Grid>\r\n                <Card.Grid style={{ width: '25%' }} hoverable={false}>Frecuencia</Card.Grid>\r\n                <Card.Grid style={{ width: '25%' }} hoverable={false}>Gravedad</Card.Grid>\r\n                {\r\n                    Object.keys(escalaDetails).map((key) => {\r\n                        return <>\r\n                            <Card.Grid style={{ width: '50%' }} hoverable={false}>{post_catalog[Number(key) - 1]} {Number(key) - 1}</Card.Grid>\r\n                            <Card.Grid style={{ width: '25%' }} hoverable={false}>{escalaDetails[key][0]}</Card.Grid>\r\n                            <Card.Grid style={{ width: '25%' }} hoverable={false}>{escalaDetails[key][1]}</Card.Grid>\r\n\r\n\r\n                        </>\r\n                        // return <p>{post_catalog[key]}</p>\r\n                    })\r\n                }\r\n            </Card>\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\detalleRecetaForPrint.jsx",["1385"],"import React, { useEffect } from 'react';\r\nimport { Page, Text, View, Document, StyleSheet, Image } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\nimport Logo from '../../assets/Logo.png'\r\nimport { usuario, IMAGE_API } from '../../resources';\r\n\r\nexport default function RecetaDocument(props) {\r\n\r\n    useEffect(() => {\r\n        console.log('receta props', props)\r\n    }, [])\r\n\r\n    // Create styles\r\n    // Styles for a4\r\n    // const styles = StyleSheet.create({\r\n    //     page: {\r\n    //         flexDirection: 'column',\r\n    //         backgroundColor: 'white'\r\n    //     },\r\n    //     block: {\r\n    //         flexDirection: 'row'\r\n    //     },\r\n    //     section: {\r\n    //         margin: 10,\r\n    //         padding: 10,\r\n    //         flexGrow: 1\r\n    //     },\r\n    //     image: {\r\n    //         // marginVertical: 15,\r\n    //         // marginHorizontal: 10,\r\n    //         width: 132\r\n    //     },\r\n    //     footText: {\r\n    //         fontSize: 14\r\n    //     }\r\n    // });\r\n    // Styles for a5\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flexDirection: 'column',\r\n            backgroundColor: 'white'\r\n        },\r\n        block: {\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between'\r\n        },\r\n        sectionFull: {\r\n            marginHorizontal: 55,\r\n            // padding: 10,\r\n            flexGrow: 1\r\n        },\r\n        section: {\r\n            margin: 10,\r\n            padding: 10,\r\n        },\r\n        image: {\r\n            width: 64\r\n        },\r\n        desc: {\r\n            fontSize: 12\r\n        },\r\n        footText: {\r\n            fontSize: 14\r\n        },\r\n        prescription: {\r\n            fontSize: 16\r\n        },\r\n    });\r\n    // Create Document Component\r\n    function Receta() {\r\n        return <Document>\r\n            <Page size=\"A5\" orientation=\"landscape\" style={styles.page}>\r\n\r\n                <View style={styles.block}>\r\n                    <View style={[styles.section, { alignItems: 'center' }]}>\r\n                        <Image style={styles.image} src={IMAGE_API + props.logoHospital} />\r\n                        <Text style={styles.footText}>Dr. {usuario.name}</Text>\r\n                        <View style={{ color: 'black', width: '60%', backgroundColor: 'black', borderBottomColor: '#9bb4df', borderBottomWidth: 1 }}></View>\r\n                        {usuario.especialidad && <Text style={styles.footText}>{usuario.especialidad}</Text>}\r\n                    </View>\r\n                    <View style={[styles.section, { alignItems: 'center' }]}>\r\n                        {\r\n                            usuario.universidades && usuario.universidades.map((u) => <View style={{ alignItems: 'center' }}>\r\n                                <Text style={(usuario.universidades && usuario.universidades.length) > 1 ? styles.desc : styles.footText}>{u.carrera}</Text>\r\n                                <Text style={(usuario.universidades && usuario.universidades.length) > 1 ? styles.desc : styles.footText}>{u.universidad.toUpperCase()}</Text>\r\n                            </View>)\r\n                        }\r\n                        <Text style={(usuario.universidades && usuario.universidades.length) > 1 ? styles.desc : styles.footText}>Ced. Prof.: {usuario.cedula}</Text>\r\n                    </View>\r\n                </View>\r\n\r\n                <View style={styles.sectionFull}>\r\n                    <Text style={styles.footText}>Nombre: {props.paciente.name}</Text>\r\n                    <Text style={styles.footText}>Fecha: {new Date().toLocaleString()}</Text>\r\n                </View>\r\n\r\n                <View style={styles.sectionFull}>\r\n                    <Text style={[styles.prescription, { lineHeight: 2 }]}>{props.receta.prescripcion}</Text>\r\n                </View>\r\n\r\n                <View style={{ color: 'black', width: '94%', backgroundColor: 'black', borderBottomColor: '#9bb4df', borderBottomWidth: 1, marginHorizontal: 20 }}></View>\r\n                <View style={styles.block}>\r\n                    <View style={styles.section}>\r\n                        {/* <Text style={styles.footText}>José Rubén Romero #103, Bosque Camelinas</Text>\r\n                        <Text style={styles.footText}>Morelia, Mich. CP 58290</Text>\r\n                        <Text style={styles.footText}>Tel. (443) 3235088, Cel (443) 356 7822</Text> */}\r\n                        <Text style={styles.footText}>{usuario.email}</Text>\r\n                        <Text style={styles.footText}>{usuario.telefono}</Text>\r\n                    </View>\r\n                    <View style={styles.section}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text style={{ fontSize: 10, }}>www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n    }\r\n    return <div>\r\n        <PDFViewer height={500} width={550}>\r\n            <Receta />\r\n        </PDFViewer>\r\n    </div>\r\n\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\create-cita-for-medic.jsx",["1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397"],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\expediente.jsx",["1398"],"import React, { useState } from 'react'\r\nimport { Button } from 'antd'\r\nimport { CloudDownloadOutlined, AccountBookOutlined, BookOutlined } from '@ant-design/icons'\r\n\r\nimport DetallesPaciente from '../pacientes/detalles.paciente'\r\nimport DetalleHistoria from './historia';\r\nimport NotaFisio from './nota';\r\nimport Exoneracion from './exoneracion';\r\nimport ExpedienteDocument from './expedienteDocument';\r\nimport { usuario } from '../../resources';\r\n\r\nexport default function ExpedienteFisio({ paciente, setIsEditModalOpen }) {\r\n\r\n    const { _id: id_paciente } = paciente;\r\n\r\n    const [isExoModalOpen, setIsExoModalOpen] = useState(false);\r\n    const [isExpedientModalOpen, setIsExpedientModalOpen] = useState(false);\r\n\r\n    const mobile = window.matchMedia(\"(max-width: 500px)\").matches;\r\n\r\n    return paciente ? (\r\n        <div>\r\n            <div style={mobile ? { display: 'flex', flexDirection: 'column' } : { display: 'flex', flexDirection: 'row', gap: 15 }}>\r\n\r\n                <DetallesPaciente paciente={paciente} setIsEditModalOpen={setIsEditModalOpen} />\r\n\r\n                <DetalleHistoria paciente={paciente} />\r\n\r\n            </div>\r\n\r\n            <NotaFisio id_paciente={id_paciente} pacienteData={paciente} />\r\n\r\n            <Button icon={<CloudDownloadOutlined />} onClick={() => setIsExoModalOpen(true)} style={{ alignSelf: 'flex-end', marginTop: 6 }}>Carta de exoneración</Button>\r\n            <Button icon={<BookOutlined />} onClick={() => setIsExpedientModalOpen(true)} style={ { alignSelf: 'flex-end', marginTop: 6, marginLeft: 6 }}>Expediente</Button>\r\n\r\n            <Exoneracion namePaciente={paciente.name} idHospital={usuario.horarios[0].sucursal._id} isModalOpen={isExoModalOpen} setIsModalOpen={setIsExoModalOpen} />\r\n\r\n            <ExpedienteDocument pacienteData={paciente} id_paciente={paciente._id} idHospital={usuario.horarios[0].sucursal._id} isModalOpen={isExpedientModalOpen} setIsModalOpen={setIsExpedientModalOpen} />\r\n\r\n        </div>\r\n    )\r\n        :\r\n        <div>Sin Paciente</div>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\historia.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\nota.jsx",["1399","1400"],"import React, { useEffect, useState } from 'react'\r\nimport { Card, Tabs, Row, Col, Button } from 'antd';\r\nimport Padecimiento from './padecimiento';\r\nimport { getData, ids_hospitales } from '../../resources'\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport NuevaNota from './nuevaNota';\r\nimport FDetalleReceta from './detalleReceta';\r\nimport LastCita from '../expedientes/lastCita';\r\nimport Bitacora from './bitacora';\r\nimport Goniometria from './goniometria';\r\nimport ExamenManMusc from './examenManMusc';\r\nimport PrintNota from './printNota';\r\n\r\n// It's called nota, but actually is the complete expedient \r\n// The expedient as it, is a list of notas or expediente_fisio\r\n\r\nexport default function NotaFisio({ id_paciente, pacienteData }) { // PacienteData is used for printNota\r\n\r\n    const mobile = window.matchMedia(\"(max-width: 500px)\").matches;\r\n\r\n    const [expedienteData, setExpedienteData] = useState(null)\r\n\r\n    const [addExpedienteModalOpen, setAddExpedienteModalOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getExpedienteData()\r\n    }, [id_paciente])\r\n\r\n    useEffect(() => {\r\n        getExpedienteData()\r\n    }, [addExpedienteModalOpen])\r\n\r\n    const getExpedienteData = () => {\r\n        getData(`fexpedientes/${id_paciente}`).then((rs) => {\r\n            console.log('ExpedienteData ', rs)\r\n            setExpedienteData(rs)\r\n        })\r\n    }\r\n\r\n    const onChange = (key) => {\r\n        console.log(key);\r\n    };\r\n\r\n    const Question = ({ label, answer, bkg }) => {\r\n        return <Row style={{ height: 16, backgroundColor: bkg ? '#f5f8fc' : 'white' }}>\r\n            <Col span={12} style={{ fontSize: 12, color: '#515a6e', fontWeight: 500 }}>{label}</Col>\r\n            <Col style={{ fontSize: 12 }}>{answer}</Col>\r\n        </Row>\r\n    }\r\n\r\n    const items = expedienteData ? expedienteData.map((nota, i) => { // 1 nota = 1 expedient ----- N notas = expedient = array of notas\r\n        return {\r\n            label: `Nota ${i + 1}`,\r\n            key: nota._id,\r\n            children: <Row gutter={8} style={{ backgroundColor: 'white' }}>\r\n\r\n                {/* Mitad de la pantalla para Receta y last cita*/}\r\n                <Col span={5} >\r\n\r\n                    <LastCita paciente={id_paciente} />\r\n\r\n                    <FDetalleReceta id_nota={nota._id} paciente={id_paciente} key='DetRecFisio' />\r\n\r\n                    <Bitacora bitacoras={nota.bitacoras} id_nota={nota._id} getExpedienteData={getExpedienteData} />\r\n                </Col>\r\n\r\n                {/* la otra mitad de la pantalla para NOTA*/}\r\n                <Col span={19}>\r\n                    <Card>\r\n\r\n                        <Padecimiento fisio_data={nota} />\r\n\r\n                        <div className={mobile ? 'columna' : 'fila'}>\r\n                            <Goniometria id_expediente={nota._id} goniometria={nota.goniometria} getExpedienteData={getExpedienteData} />\r\n                            <ExamenManMusc id_expediente={nota._id} examenes={nota.examenes} getExpedienteData={getExpedienteData} />\r\n                        </div>\r\n\r\n                        <div style={{ marginTop: 10 }}>\r\n                            {nota.observaciones && <Question label='Observaciones o comentarios' answer={nota.observaciones} bkg />}\r\n                            {nota.diagnostico && <Question label='Diagnostico fisioterapeutico' answer={nota.diagnostico} />}\r\n                            {nota.objetivos && <Question label='Objetivos' answer={nota.objetivos} bkg />}\r\n                            {nota.plan_tratamiento && <Question label='Plan de tratamiento' answer={nota.plan_tratamiento} />}\r\n                        </div>\r\n\r\n                    </Card>\r\n                    <PrintNota nota={nota} idHospital={ids_hospitales[0]} pacienteData={pacienteData}/>\r\n                </Col>\r\n\r\n            </Row>\r\n        }\r\n    }) : []\r\n\r\n\r\n    return <Card style={{ marginTop: 15 }} >\r\n\r\n        <div style={{ display: 'flex', flexDirectrion: 'row', gap: 10, alignItems: 'center' }}>\r\n            <h5>Notas </h5>\r\n            {\r\n                <Button className='btnIconCentered' onClick={() => { setAddExpedienteModalOpen(true) }} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n            }\r\n        </div>\r\n\r\n\r\n        <Tabs defaultActiveKey=\"1\" items={items} onChange={onChange} />\r\n\r\n        <NuevaNota id_paciente={id_paciente} isModalOpen={addExpedienteModalOpen} setIsModalOpen={setAddExpedienteModalOpen} />\r\n    </Card>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\detalles.fisio.modal.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\padecimiento.jsx",["1401"],"import { Card, Col, Row } from 'antd';\r\nimport React from 'react'\r\n\r\n\r\nexport default function Padecimiento({ fisio_data }) {\r\n\r\n    const { motivo,\r\n        tiempo,\r\n        momento_dia,\r\n        movimientos,\r\n        localizacion,\r\n        localizacion_es,\r\n        tipo,\r\n        tipo_es,\r\n        ena } = fisio_data;\r\n\r\n    const Question = ({ label, answer, bkg }) => {\r\n        return <Row style={{ height: 16, backgroundColor: bkg ? '#f5f8fc' : 'white' }}>\r\n            <Col span={12} style={{ fontSize: 12, color: '#515a6e', fontWeight: 500 }}>{label}</Col>\r\n            <Col style={{ fontSize: 12 }}>{answer}</Col>\r\n        </Row>\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', marginBottom: 15 }}>\r\n            <Question label='Cuál es el motivo de su consulta/lesión/patología?: ' answer={motivo} />\r\n            <Question label='Cuanto tiempo lleva con el problema?:' answer={tiempo} bkg />\r\n            <Question label='En qué momento le duele más?:' answer={momento_dia} />\r\n            <Question label='Con qué movimientos aumenta el dolor?:' answer={movimientos} bkg />\r\n            <Question label='Localizaión del dolor:' answer={localizacion} />\r\n            <Question label='Especificar:' answer={localizacion_es} bkg />\r\n            <Question label='Tipo de dolor:' answer={tipo} />\r\n            <Question label='Especificar:' answer={tipo_es} bkg />\r\n            <Question label='Escala numerica analogica:' answer={ena} />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\nuevaNota.jsx",["1402","1403","1404","1405"],"import React from 'react'\r\nimport { Modal, Form, Input, Slider, Divider, Radio, InputNumber, Button, Space, Select, message } from 'antd'\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { sendDataBody } from '../../resources'\r\n\r\n// It's called nota, but actually is the complete expedient \r\n\r\nexport default function NuevaNota({ isModalOpen, setIsModalOpen, id_paciente }) {\r\n\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const onFinish = (values) => {\r\n        values.usuario = id_paciente;\r\n        sendDataBody('fexpedientes/add', values).then((rs) => {\r\n            if (rs.message && rs.message === 'Datos guardados correctamente') {\r\n                message.info(rs.message)\r\n                setIsModalOpen(false)\r\n            }\r\n            else message.error(rs.error)\r\n        })\r\n        console.log('New Exp:', values);\r\n    };\r\n    const onFinishFailed = (errorInfo) => {\r\n        message.error('Revise los datos del formulario')\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const marks = { 0: '0', 10: '10' };\r\n\r\n    const questLayout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    }\r\n\r\n    const dolorTypes = [\r\n        {\r\n            value: 'Muscular',\r\n            label: 'Muscular',\r\n        },\r\n        {\r\n            value: 'Superficial',\r\n            label: 'Superficial',\r\n        },\r\n        {\r\n            value: 'Punzante',\r\n            label: 'Punzante',\r\n        },\r\n        {\r\n            value: 'Profundo',\r\n            label: 'Profundo',\r\n        },\r\n        {\r\n            value: 'Ardor',\r\n            label: 'Ardor',\r\n        },\r\n        {\r\n            value: 'Hormigueo',\r\n            label: 'Hormigueo',\r\n        },\r\n        {\r\n            value: 'Articular',\r\n            label: 'Articular',\r\n        },\r\n    ];\r\n\r\n    const newDolorTypes = [\r\n        {\r\n            label: <span>Tipo 1</span>,\r\n            title: 'Tipo1',\r\n            options: [\r\n                {\r\n                    label: <span>Superficial</span>,\r\n                    value: 'Superficial',\r\n                },\r\n                {\r\n                    label: <span>Profundo</span>,\r\n                    value: 'Profundo',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            label: <span>Tipo 2</span>,\r\n            title: 'Tipo2',\r\n            options: [\r\n                {\r\n                    label: <span>Muscular</span>,\r\n                    value: 'Muscular',\r\n                },\r\n                {\r\n                    label: <span>Tendonoso</span>,\r\n                    value: 'Tendonoso',\r\n                },\r\n                {\r\n                    label: <span>Ligamentario</span>,\r\n                    value: 'Ligamentario',\r\n                },\r\n                {\r\n                    label: <span>Articular</span>,\r\n                    value: 'Articular',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            label: <span>Tipo 3</span>,\r\n            title: 'Tipo3',\r\n            options: [\r\n                {\r\n                    label: <span>Neuropatico</span>,\r\n                    value: 'Neuropatico',\r\n                },\r\n                {\r\n                    label: <span>Vascular</span>,\r\n                    value: 'Vascular',\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            label: <span>Otro</span>,\r\n            title: 'Otro',\r\n            options: [\r\n                {\r\n                    label: <span>Otro</span>,\r\n                    value: 'Otro',\r\n                }\r\n            ],\r\n        },\r\n    ];\r\n\r\n    return <Modal width={600} title=\"Nuevo Expediente Fisioterapia\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n        footer={[\r\n            <Button onClick={() => setIsModalOpen(false)}>Cancelar</Button>,\r\n            <Button type='primary' htmlType='submit' form='add_expediente_fisio'>Guardar</Button>\r\n        ]} destroyOnClose\r\n    >\r\n        <Form\r\n            name=\"add_expediente_fisio\"\r\n            // labelCol={{ span: 12 }}\r\n            // wrapperCol={{ span: 12 }}\r\n            initialValues={{ examenes: [{}], goniometria: [{}] }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n        // layout='vertical'\r\n        >\r\n\r\n            <Divider>Padecimiento Actual</Divider>\r\n\r\n            <Form.Item label=\"¿Cuál es el motivo de su consulta/Lesión/Patología?\" name=\"motivo\" rules={[{ required: true, message: 'Ingrese respuesta' }]} >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"¿Cuánto tiempo lleva con el problema?\" name=\"tiempo\" rules={[{ required: true, message: 'Ingrese respuesta' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"¿En qué momento del día le duele más?\" name=\"momento_dia\" rules={[{ required: true, message: 'Ingrese respuesta' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"¿Con qué movimientos aumenta el dolor?\" name=\"movimientos\" rules={[{ required: true, message: 'Ingrese respuesta' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Localizacion del dolor\" name=\"localizacion\" rules={[{ required: true, message: 'Seleccione una opción' }]}>\r\n                <Select\r\n                    onChange={(val) => console.log('selected ', val)}\r\n                    options={[\r\n                        {\r\n                            value: 'Puntual',\r\n                            label: 'Puntual',\r\n                        },\r\n                        {\r\n                            value: 'Regional',\r\n                            label: 'Regional',\r\n                        },\r\n                        {\r\n                            value: 'Irradiado',\r\n                            label: 'Irradiado',\r\n                        }\r\n                    ]}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Especifique\" name=\"localizacion_es\" rules={[{ required: true, message: 'Ingrese respuesta' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Tipo de dolor\" name=\"tipo\" rules={[{ required: true, message: 'Seleccione una opción' }]}>\r\n                <Select\r\n                    onChange={(val) => console.log('selected ', val)}\r\n                    options={newDolorTypes}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Especifique\" name=\"tipo_es\" rules={[{ required: true, message: 'Ingrese respuesta' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Escala numerica analogica\" name=\"ena\" rules={[{ required: true, message: 'Seleccione un número en la escala' }]}>\r\n                <Slider defaultValue={0} min={0} max={10} marks={marks} />\r\n            </Form.Item>\r\n\r\n\r\n            <Divider>Goniometria</Divider>\r\n\r\n            <Form.List name=\"goniometria\">\r\n                {(fields, { add, remove }) => (\r\n                    <>\r\n                        {fields.map(({ key, name, ...restField }) => (\r\n                            <div>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Articulacion'\r\n                                    name={[name, 'articulacion']}\r\n                                    rules={[{ required: true, message: 'Ingrese respuesta' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Input placeholder=\"articulacion\" />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Movimiento'\r\n                                    name={[name, 'movimiento']}\r\n                                    rules={[{ required: true, message: 'Ingrese respuesta' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Input placeholder=\"movimiento\" />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Completa'\r\n                                    name={[name, 'completa']}\r\n                                    rules={[{ required: true, message: 'Seleccione una opción' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                                        <Radio value={true}>Si</Radio>\r\n                                        <Radio value={false}>No</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Ayuda'\r\n                                    name={[name, 'ayuda']}\r\n                                    rules={[{ required: true, message: 'seleccione una opción' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                                        <Radio value={true}>Necesita ayuda</Radio>\r\n                                        <Radio value={false}>Solo</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Dolor'\r\n                                    name={[name, 'dolor']}\r\n                                    rules={[{ required: true, message: 'Seleccione una opción' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                                        <Radio value={true}>Si</Radio>\r\n                                        <Radio value={false}>No</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Grados'\r\n                                    name={[name, 'grados']}\r\n                                    rules={[{ required: true, message: 'Ingrese un número' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <InputNumber style={{ width: '100%' }} />\r\n                                </Form.Item>\r\n\r\n\r\n                            </div>\r\n                        ))}\r\n                    </>\r\n                )}\r\n            </Form.List>\r\n\r\n            <Divider>Examen manual muscular</Divider>\r\n            <Form.List name=\"examenes\">\r\n                {(fields, { add, remove }) => (\r\n                    <>\r\n                        {fields.map(({ key, name, ...restField }) => (\r\n                            <div>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Grupo muscular'\r\n                                    name={[name, 'grupo']}\r\n                                    rules={[{ required: true, message: 'Ingrese respuesta' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Input placeholder=\"grupo\" />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Referencia numerica'\r\n                                    name={[name, 'referencia']}\r\n                                    rules={[{ required: true, message: 'Ingrese un número entre 1 y 10' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <InputNumber style={{ width: '100%' }} max={10} />\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Dolor'\r\n                                    name={[name, 'dolor']}\r\n                                    rules={[{ required: true, message: 'Seleccione una opción' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                                        <Radio value={true}>Si</Radio>\r\n                                        <Radio value={false}>No</Radio>\r\n                                    </Radio.Group>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    {...restField}\r\n                                    label='Dinamometro'\r\n                                    name={[name, 'dinamometro']}\r\n                                    rules={[{ required: true, message: 'Ingrese respuesta' }]}\r\n                                    {...questLayout}\r\n                                >\r\n                                    <Input placeholder=\"dinamometro\" />\r\n                                </Form.Item>\r\n\r\n                            </div>\r\n                        ))}\r\n\r\n                    </>\r\n                )}\r\n            </Form.List>\r\n\r\n            <Divider></Divider>\r\n            <Form.Item label=\"Observaciones\" name=\"observaciones\" rules={[{ required: false, message: 'Please input your username!' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Diagnostico fisioterapeutico\" name=\"diagnostico\" rules={[{ required: false, message: 'Please input your username!' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Objetivos\" name=\"objetivos\" rules={[{ required: false, message: 'Please input your username!' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item label=\"Plan de tratamiento\" name=\"plan_tratamiento\" rules={[{ required: false, message: 'Please input your username!' }]}>\r\n                <Input />\r\n            </Form.Item>\r\n\r\n        </Form>\r\n    </Modal>\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\detalleReceta.jsx",["1406"],"import React, { useEffect, useState } from 'react'\r\nimport { Card, Button, Modal, Form, Input, Row, Col } from 'antd'\r\nimport { PlusOutlined, FormOutlined, PrinterOutlined } from '@ant-design/icons';\r\nimport { getData, sendDataBody, updateData, usuario } from '../../resources'\r\nimport RecetaDocument from '../expedientes/detalleRecetaForPrint';\r\nconst { TextArea } = Input;\r\n\r\n\r\nexport default function FDetalleReceta({ id_nota, paciente }) {\r\n    const [recetasData, setRecetasData] = useState(null)\r\n    const [recetaLoading, setRecetaLoading] = useState(true)\r\n    const [recetaForEdit, setRecetaForEdit] = useState({});\r\n    const [isModalVisible, setIsModalVisible] = useState(false); // Modal For Add REcipe\r\n    const [isEditingModalVisible, setIsEditingModalVisible] = useState(false); // Modal For Edit Recipe\r\n    const [isPrintingModalVisible, setIsPrintingModalVisible] = useState(false)\r\n\r\n    // Add Recipe Modal\r\n    const handleOk = () => { setIsModalVisible(false); };\r\n    const handleCancel = () => { setIsModalVisible(false); };\r\n    // Edit Recipe Modal\r\n    const showEditModal = () => { console.log('BeforeEdit'); setIsEditingModalVisible(true); };\r\n    const handleEditOk = () => { setIsEditingModalVisible(false); };\r\n    const handleEditCancel = () => { setIsEditingModalVisible(false); };\r\n    // Print Receta Modal\r\n    const handlePrintOk = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    const handlePrintCancel = () => { setIsPrintingModalVisible(false); setIsLogoSelected(false) };\r\n    // Select logo for print in receta. Switches the modal view into select logo hospital/pdf recipe for print\r\n    const [logoHospital, setLogoHospital] = useState(null)\r\n    const [nombreHospital, setNombreHospital] = useState(null)\r\n    const [isLogoSelected, setIsLogoSelected] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getRecetasData()\r\n    }, [])\r\n\r\n    const getRecetasData = () => {\r\n        getData(`recetas/nota/${id_nota}`).then(rs => { setRecetasData(rs); setRecetaLoading(false) })\r\n    }\r\n\r\n    //Send and save new receta, agter getRecetas again\r\n    const onFinish = (values) => {\r\n        values.id_nota = id_nota;\r\n        sendDataBody('recetas/add', values).then(rs => {\r\n            getRecetasData()\r\n            setIsModalVisible(false)\r\n        })\r\n    }\r\n\r\n    // Set Edit Receta and open modal\r\n    const editReceta = (r) => {\r\n        setRecetaForEdit(r)\r\n        console.log(r);\r\n        showEditModal();\r\n    }\r\n    // Send data for update Receta\r\n    const updateReceta = (values) => {\r\n        console.log('update', values);\r\n        updateData(`recetas/update/${recetaForEdit._id}`, values).then((rs) => {\r\n            // message.success(rs);\r\n            setIsEditingModalVisible(false)\r\n            getRecetasData()\r\n        })\r\n    }\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    // Print Receta\r\n    const printReceta = async (r) => {\r\n        setRecetaForEdit(r)\r\n        setIsPrintingModalVisible(true)\r\n        console.log(r);\r\n    }\r\n    return <div>\r\n        <Card style={{ marginTop: 8 }}>\r\n            <div className='fila' style={{ marginBottom: 8 }}>\r\n                <h6>Recetas</h6>\r\n                <Button className='btnIconCentered' onClick={() => setIsModalVisible(true)} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n            </div>\r\n            {\r\n                recetaLoading ? <h5>Cargando Receta...</h5> :\r\n                    recetasData.length > 0 ?\r\n\r\n                        recetasData.map((r) => {\r\n                            return <div key={r._id} style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                                <span style={{ whiteSpace: 'pre' }}>{r.prescripcion} </span>\r\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n\r\n                                    <Button style={{ marginLeft: 6 }} onClick={() => editReceta(r)} size='small' type=\"primary\" shape=\"circle\" icon={<FormOutlined />} className='btnIconCentered' ghost />\r\n\r\n                                    <Button style={{ marginLeft: 4 }} onClick={() => printReceta(r)} size='small' type=\"primary\" shape=\"circle\" icon={<PrinterOutlined />} className='btnIconCentered' ghost />\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                        :\r\n                        <h6>No hay una receta asignada</h6>\r\n            }\r\n        </Card >\r\n\r\n        {/* Redundant from recetas PSIQ */}\r\n        < Modal title=\"Nueva Receta\" open={isModalVisible} onOk={handleOk} onCancel={handleCancel}\r\n            footer={\r\n                [\r\n                    <Button type=\"primary\" htmlType=\"submit\" form='create_receta_medic'>\r\n                        Guardar\r\n                    </Button>,\r\n                    <Button onClick={handleCancel}>Cancelar</Button>\r\n                ]} >\r\n            <Form\r\n                name=\"create_receta_medic\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    label=\"Prescripcion\"\r\n                    name=\"prescripcion\"\r\n                    rules={[{ required: true, message: 'Ingresa la prescripcion' }]}\r\n                >\r\n                    <TextArea rows={6} autoFocus />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal >\r\n\r\n        <Modal title=\"Editar Receta\" open={isEditingModalVisible} onOk={handleEditOk} onCancel={handleEditCancel} destroyOnClose\r\n            footer={[\r\n                <Button type=\"primary\" htmlType=\"submit\" form='update_receta_medic'>\r\n                    Actualizar\r\n                </Button>,\r\n            ]}>\r\n\r\n            <Form\r\n                name=\"update_receta_medic\"\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 16 }}\r\n                initialValues={{ prescripcion: recetaForEdit.prescripcion }}\r\n                onFinish={updateReceta}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    label=\"Prescripcion\"\r\n                    name=\"prescripcion\"\r\n                    rules={[{ required: true, message: 'Ingresa la prescripcion' }]}\r\n                >\r\n                    <TextArea rows={6} />\r\n                </Form.Item>\r\n\r\n            </Form>\r\n        </Modal>\r\n\r\n        <Modal title=\"Imprimir Receta\" open={isPrintingModalVisible} onOk={handlePrintOk} onCancel={handlePrintCancel} width={600}\r\n            footer={[\r\n                <Button onClick={handlePrintCancel}>Cancelar</Button>\r\n            ]}\r\n        >\r\n\r\n            {\r\n                isLogoSelected ? // Si ya hay logo seleccionado, se pasa a la receta y se muestra en pdf\r\n                    <RecetaDocument receta={recetaForEdit} logoHospital={logoHospital} nombreHospital={nombreHospital} paciente={paciente} /> // receta document is legacy from PSIQ\r\n                    :\r\n                    <div>\r\n                        <Card title='Selecciona un hospital' bordered={false}>\r\n                            {\r\n                                usuario.horarios.map((h) => {\r\n                                    return <Card.Grid style={{ width: '100%' }} onClick={() => { console.log(h.sucursal); setLogoHospital(h.sucursal.logo); setNombreHospital(h.sucursal.nombre); setIsLogoSelected(true) }} key={h._id}>\r\n                                        <Row align=\"middle\">\r\n                                            <Col span={6} offset={4}><img width={64} src={'https://api.recreamed.com/images/' + h.sucursal.logo} alt=\"Logo\" /></Col>\r\n                                            <Col span={10}>{h.sucursal.nombre} <br /> {h.horario}</Col>\r\n                                        </Row>\r\n                                    </Card.Grid>\r\n                                })\r\n                            }\r\n                        </Card>\r\n                    </div>\r\n            }\r\n        </Modal>\r\n    </div >\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\bitacora.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\goniometria.jsx",["1407"],"import React, { useState } from 'react'\r\nimport { Button, Card, Table, Form, Input, Radio, InputNumber, Modal, message } from 'antd';\r\nimport { PlusCircleOutlined } from '@ant-design/icons'\r\nimport { updateData } from '../../resources';\r\n\r\nexport default function Goniometria({ id_expediente, goniometria, getExpedienteData }) {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'articulacion',\r\n            dataIndex: 'articulacion',\r\n            key: 'articulacion',\r\n        },\r\n        {\r\n            title: 'movimiento',\r\n            dataIndex: 'movimiento',\r\n            key: 'movimiento',\r\n        },\r\n        {\r\n            title: 'completa',\r\n            dataIndex: 'completa',\r\n            key: 'completa',\r\n            render: (completa) => <span>{completa ? 'Si' : 'No'}</span>\r\n        },\r\n        {\r\n            title: 'ayuda',\r\n            dataIndex: 'ayuda',\r\n            key: 'ayuda',\r\n            render: (ayuda) => <span>{ayuda ? 'Si' : 'No'}</span>\r\n        },\r\n        {\r\n            title: 'dolor',\r\n            dataIndex: 'dolor',\r\n            key: 'dolor',\r\n            render: (dolor) => <span>{dolor ? 'Si' : 'No'}</span>\r\n        },\r\n        {\r\n            title: 'grados',\r\n            dataIndex: 'grados',\r\n            key: 'grados',\r\n        },\r\n    ];\r\n\r\n    const AddGoniometriaForm = () => {\r\n        const onFinish = (values) => {\r\n            console.log('new Data', values)\r\n            const newGoniometria = [...goniometria, values]\r\n            console.log('allData Data', newGoniometria)\r\n            updateData(`fexpedientes/update/${id_expediente}`, { goniometria: newGoniometria }).then((rs) => {\r\n                if (rs.message && rs.message === 'Datos actualizados correctamente') {\r\n                    getExpedienteData()\r\n                    setIsModalOpen(false)\r\n                } else message.error(rs.error)\r\n            })\r\n        }\r\n        const onFinishFailed = (errorInfo) => {\r\n            console.log('Failed:', errorInfo);\r\n        };\r\n        return <Form\r\n            name=\"add_goniometria_medic\"\r\n            labelCol={{ span: 8 }}\r\n            wrapperCol={{ span: 16 }}\r\n            style={{ maxWidth: 600 }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n        >\r\n\r\n            <Form.Item\r\n                label='articulacion'\r\n                name='articulacion'\r\n                rules={[{ required: true, message: 'Missing first name' }]}\r\n            >\r\n                <Input placeholder=\"articulacion\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label='movimiento'\r\n                name='movimiento'\r\n                rules={[{ required: true, message: 'Missing last name' }]}\r\n            >\r\n                <Input placeholder=\"movimiento\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label='completa'\r\n                name='completa'\r\n                rules={[{ required: true, message: 'Missing first name' }]}\r\n            >\r\n                <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                    <Radio value={true}>Si</Radio>\r\n                    <Radio value={false}>No</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label='ayuda'\r\n                name='ayuda'\r\n                rules={[{ required: true, message: 'Missing last name' }]}\r\n            >\r\n                <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                    <Radio value={true}>Necesita ayuda</Radio>\r\n                    <Radio value={false}>Solo</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label='dolor'\r\n                name='dolor'\r\n                rules={[{ required: true, message: 'Missing first name' }]}\r\n            >\r\n                <Radio.Group onChange={(val) => console.log('Selected ', val)} >\r\n                    <Radio value={true}>Si</Radio>\r\n                    <Radio value={false}>No</Radio>\r\n                </Radio.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label='grados'\r\n                name='grados'\r\n                rules={[{ required: true, message: 'Missing last name' }]}\r\n            >\r\n                <InputNumber style={{ width: '100%' }} />\r\n            </Form.Item>\r\n\r\n        </Form>\r\n    }\r\n\r\n    return <div >\r\n\r\n        <Table dataSource={goniometria} columns={columns} size='small' bordered pagination={false} title={() => <span className='desc' style={{ display: 'flex', alignContent: 'center',gap: 6 }}>Rangos de movimiento/goniometria <PlusCircleOutlined onClick={showModal} /></span>} />\r\n\r\n        <Modal title='Agregar Goniometria' open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n            footer={[\r\n                <Button onClick={() => setIsModalOpen(false)}>Cancelar</Button>,\r\n                <Button type='primary' htmlType='submit' form='add_goniometria_medic'>Guardar</Button>\r\n            ]}\r\n        >\r\n            <AddGoniometriaForm />\r\n        </Modal>\r\n    </div>\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\examenManMusc.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\exoneracion.jsx",["1408","1409","1410"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Modal } from 'antd'\r\nimport { Page, Text, View, Document, StyleSheet, Image, Font } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\n\r\nimport Arial from '../../assets/fonts/arial/arial.ttf'\r\nimport Calibri from '../../assets/fonts/calibri/calibri.ttf'\r\n\r\nimport Logo from '../../assets/Logo.png'\r\nimport { usuario, IMAGE_API, getData } from '../../resources';\r\n\r\nfunction ExoneracionDocument({ namePaciente, idHospital, historia, notas, recetas }) {\r\n\r\n    const [hospitalData, setHospitalData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const getHospitalData = () => {\r\n            getData(`sucursales/${idHospital}`).then((rs) => {\r\n                console.log(hospitalData)\r\n                setHospitalData(rs[0])\r\n            })\r\n        }\r\n        getHospitalData()\r\n    }, [])\r\n\r\n    Font.register({ family: 'Arial', src: Arial });\r\n    Font.register({ family: 'Calibri', src: Calibri });\r\n\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: 'white',\r\n            // padding: 50,\r\n            paddingHorizontal: 50,\r\n            paddingBottom: 50\r\n        },\r\n        parrafo: {\r\n            fontSize: 12, fontFamily: 'Arial', textAlign: 'justify'\r\n        },\r\n        image: {\r\n            width: 80,\r\n            paddingLeft: 16\r\n        },\r\n    });\r\n\r\n    // Create Document Component\r\n    function CartaEx() {\r\n        return <Document title={`${namePaciente}`}>\r\n            <Page size=\"A4\" orientation=\"vertical\" style={styles.page}>\r\n\r\n                <view style={{ textAlign: 'center' }}>\r\n                    {\r\n                        hospitalData && hospitalData.logo &&\r\n                        <Image style={{ width: 100, height: 80, overflow: 'hidden' }} source={`https://api.recreamed.com/images/${hospitalData.logo}`} />\r\n                    }\r\n                    <Text style={{ fontSize: 28, fontFamily: 'Calibri' }}>CARTA DE EXONERACION</Text>\r\n                </view>\r\n\r\n                <View style={{ height: 18 }}></View>\r\n\r\n                <View >\r\n\r\n                    <Text style={styles.parrafo}>El que suscribe, en pleno uso de mis facultades mentales y con plena ausencia de vicios de la voluntad, ASUMO TODOS LOS RIESGOS DE PARTICIPAR EN CUALRQUIERA/TODAS LAS TERAPIAS Y TRATAMIENTOS llevadas a cabo por el cuerpo clínico de CDEFIS (Centro del Deporte Fisioterapia y Salud)  ubicado en Avenida Lázaro Cárdenas #2707 dos mil setecientos siete, colonia Chapultepec Norte, Morelia Michoacán comprendidas en: VENDAJE NEUROMUSCULAR, VENTOSAS TERAPEUTICAS, LIBREACION MIOFASCIAL, DESCARGA MUSCULAR, MASAJE DEPORTIVO, ELECTROTERAPIA, PUNCION SECA, FORTALECIMIENTO MUSCULAR; TRATAMIENTOS PARA HERNIA DISCAL, NERVIO CIATICO, ESCOLIOSIS; FISIOTERAPIA PRE Y POST OPERATORIA DE COLUMNA, HOMBRO, RODILLA, CADERA,ETC; READAPTACION DEPORTIVA, ECOGRAFIA DIAGNOSTICA, UTLRASONIDO TERAPEUTICO, TRABAJO ISOINERCIAL, TERAPIA MANUAL, TERAPUA MANUAL INSTRUMENTALIZADA; TRATAMIENTOS CON ALTA FRECUENCIA RADIOFRECUENCIA CAVITACION, DERMAPEN, HIFU, ELECTROLIPOSIS, SPA, GALVANICO FACIAL, CORPORAL. Incluyendo a modo de ejemplo y sin limitación cualquier riesgo que pueda surgir por negligencia o descuido por parte de las personas liberadas, por equipos o bienes peligrosos o defectuosos, que sean de su propiedad mantenidos o controlados por ellos o por su posible responsabilidad sin culpa\r\n                    </Text>\r\n                    <View style={{ height: 12 }}></View>\r\n\r\n                    <Text style={styles.parrafo}>\r\n                        CERTIFICO que conozco y asumo los riesgos y contradicciones médicas que los tratamientos antes mencionados acarrean, así como DECLARO no tener alergias a ninguno de los productos, tratamientos y métodos a los cuales me veré sometido; así como, autorizo que se me realicen los tratamientos antes mencionados\r\n                    </Text>\r\n                    <View style={{ height: 12 }}></View>\r\n\r\n                    <Text style={styles.parrafo}>\r\n                        EXONERO totalmente de responsabilidades a la Clínica CDEFIS, así como personal administrativo y clínico, de toda culpa, responsabilidad civil y social por cualquier riesgo que pueda surgir por negligencia o descuido por parte de las personas liberadas, por equipos o bienes peligrosos o defectuosos, que sean de su propiedad mantenidos o controlados por ellos o por su posible responsabilidad sin culpa. </Text>\r\n                </View>\r\n\r\n                <View style={{ flex: 1 }}></View>\r\n\r\n                <View style={{ textAlign: 'center' }}>\r\n                    <View style={{ height: 1, width: '60%', backgroundColor: 'black', marginBottom: 8, alignSelf: 'center' }}></View>\r\n                    <Text style={{ fontSize: 14, fontFamily: 'Calibri' }}> {namePaciente} </Text>\r\n                    <Text style={{ fontSize: 14, fontFamily: 'Calibri' }}>{new Date().toLocaleDateString('es-MX', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' })} </Text>\r\n                    {/* <Text style={{ fontSize: 14, fontFamily: 'Calibri' }}>Nombre, Fecha y firma del paciente</Text> */}\r\n                </View>\r\n\r\n                <View style={{ height: 8 }}></View>\r\n\r\n                <View style={{ borderTop: '1pt solid #000', paddingTop: 4, flexDirection: 'row', justifyContent: 'space-between', fontSize: 10 }}>\r\n                    {\r\n                        hospitalData && <View>\r\n                            <Text>{hospitalData.nombre} </Text>\r\n                            <Text>{hospitalData.calle} N.{hospitalData.num_exterior}</Text>\r\n                            <Text>Colonia {hospitalData.colonia}, {hospitalData.ciudad_municipio}, {hospitalData.estado}</Text>\r\n                            <Text>Telefono: {hospitalData.telefono}, Correo: {hospitalData.email}</Text>\r\n                            {/* <Text>{hospitalData.sitio_web}</Text> */}\r\n                        </View>\r\n                    }\r\n\r\n                    <View style={{ textAlign: 'center' }}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text >www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n    }\r\n\r\n    return <PDFViewer height={600} width={820}>\r\n        <CartaEx />\r\n    </PDFViewer>\r\n\r\n}\r\n\r\n\r\n\r\nexport default function Exoneracion({ isModalOpen, setIsModalOpen, namePaciente, idHospital }) {\r\n\r\n\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Modal title=\"Carta de exoneración\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={900}\r\n            footer={[\r\n                <Button type='primary' onClick={handleCancel}>Cerrar</Button>\r\n            ]}>\r\n            <ExoneracionDocument namePaciente={namePaciente} idHospital={idHospital} />\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\expedienteDocument.jsx",["1411","1412"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Modal } from 'antd'\r\nimport { Page, Text, View, Document, StyleSheet, Image, Font } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\n\r\nimport Arial from '../../assets/fonts/arial/arial.ttf'\r\nimport Calibri from '../../assets/fonts/calibri/calibri.ttf'\r\n\r\nimport Logo from '../../assets/Logo.png'\r\nimport { dateOptions, getData } from '../../resources';\r\n\r\n\r\nfunction ExpedientePDF({ pacienteData, expedienteData, idHospital }) {\r\n\r\n    Font.register({ family: 'Arial', src: Arial });\r\n    Font.register({ family: 'Calibri', src: Calibri });\r\n\r\n    const [hospitalData, setHospitalData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const getHospitalData = () => {\r\n            getData(`sucursales/${idHospital}`).then((rs) => {\r\n                console.log(hospitalData)\r\n                setHospitalData(rs[0])\r\n            })\r\n        }\r\n        getHospitalData()\r\n    }, [])\r\n\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: 'white',\r\n            padding: 40,\r\n            fontSize: 12\r\n        },\r\n        subtitle: { fontSize: 22, fontFamily: 'Calibri' },\r\n        title3: { fontSize: 18, fontFamily: 'Calibri' },\r\n        parrafo: {\r\n            fontSize: 12, fontFamily: 'Arial'\r\n        },\r\n        respuesta: {\r\n            fontSize: 12, fontWeight: 'bold'\r\n        },\r\n        subpage: {\r\n            flexDirection: 'row',\r\n            backgroundColor: '#E4E4E4'\r\n        },\r\n        section: {\r\n            // margin: 10,\r\n            // padding: 10,\r\n            flexGrow: 1\r\n        },\r\n        table: {\r\n            display: 'table',\r\n            width: 'auto',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderRightWidth: 0,\r\n            borderBottomWidth: 0\r\n        },\r\n        tableRow: {\r\n            margin: 'auto',\r\n            flexDirection: 'row'\r\n        },\r\n        tableCol: {\r\n            width: '20%',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderLeftWidth: 0,\r\n            borderTopWidth: 0\r\n        },\r\n        tableCol7: {\r\n            width: '14.28%',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderLeftWidth: 0,\r\n            borderTopWidth: 0\r\n        },\r\n        text: {\r\n            margin: 5,\r\n            fontSize: 10\r\n        },\r\n        separator: {\r\n            height: 14\r\n        },\r\n        image: {\r\n            width: 80,\r\n            paddingLeft: 16\r\n        },\r\n        limage: {\r\n            width: 80\r\n        },\r\n    });\r\n\r\n\r\n    // Create Document Component\r\n    function CartaEx() {\r\n\r\n        const GonioTable = ({ goniometria }) => (\r\n            <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Articulacion</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Movimiento</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Completa</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Ayuda</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Dolor</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Grados</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Fecha</Text>\r\n                            </View>\r\n                        </View>\r\n\r\n                        {/* <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Articulaxion 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Mov 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>90</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>2024-01-24-T15:42:01.373Z</Text>\r\n                            </View>\r\n                        </View> */}\r\n\r\n                        {\r\n                            goniometria.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.articulacion}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.movimiento}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.completa ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.ayuda ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.dolor ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.grados}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n\r\n                        <View style={styles.tableRow}>\r\n                            {/* Contenido de la fila 3 */}\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        );\r\n\r\n        const ExamenesTable = ({ examenes }) => {\r\n            return <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Grupo</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Referenca</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Dolor</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Dinamometro</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Fecha</Text>\r\n                            </View>\r\n                        </View>\r\n\r\n\r\n                        {/* <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Grupo 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Referencia 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Dinamometro 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>2024-01-24-T15:42:01.373Z</Text>\r\n                            </View>\r\n                        </View> */}\r\n\r\n                        {\r\n                            examenes.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.grupo}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.referencia}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.dolor ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.dinamometro}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </View>\r\n\r\n        }\r\n\r\n        const BitacoraTable = ({ bitacoras }) => (\r\n            <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Aparatologa</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Técncas manuales</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Ejercicio</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Otros</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Estado en el que llega el paciente</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Estado en el que se retira el paciente</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Fisioterapeuta que atendió</Text>\r\n                            </View>\r\n                        </View>\r\n                        {/* <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Articulaxion 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Mov 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>90</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>2024-01-24-T15:42:01.373Z</Text>\r\n                            </View>\r\n                        </View> */}\r\n\r\n                        {\r\n                            bitacoras.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.aparatologia}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.tecnicas}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.ejercicio}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.otros}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.estado_llegada}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.estado_salida}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n\r\n                        <View style={styles.tableRow}>\r\n                            {/* Contenido de la fila 3 */}\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        );\r\n\r\n        const Separator = () => (<View style={styles.separator}></View>)\r\n\r\n        const Question = ({ label, resp, bkg }) => (\r\n            <View style={{ flexDirection: 'row', backgroundColor: bkg ? '#ebeff0' : 'white' }}>\r\n                <View style={{ width: '55%' }}><Text style={styles.parrafo}>{label}</Text></View>\r\n                <View style={{ width: '45%' }}><Text style={styles.respuesta}>{resp}</Text></View>\r\n            </View>\r\n        )\r\n\r\n        const BQuestion = ({ label, resp, bkg }) => (\r\n            <View style={{ flexDirection: 'row', backgroundColor: bkg ? '#ebeff0' : 'white' }}>\r\n                <View style={{ width: '60%' }}><Text style={styles.parrafo}>{label}</Text></View>\r\n                <View style={{ width: '40%' }}><Text style={styles.respuesta}>{resp ? 'Si' : 'No'}</Text></View>\r\n            </View>\r\n        )\r\n\r\n\r\n        return <Document title={`${pacienteData.name}`}>\r\n            <Page size=\"A4\" orientation=\"vertical\" style={styles.page}>\r\n\r\n                <View style={{ textAlign: 'center', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <View>\r\n                        <Text style={{ fontSize: 28, fontFamily: 'Calibri' }}>EXPEDIENTE</Text>\r\n                        <Text>{new Date().toLocaleDateString('es-MX', dateOptions)}</Text>\r\n                    </View>\r\n                    {\r\n                        hospitalData && hospitalData.logo &&\r\n                        <Image style={{ width: 100, height: 80, overflow: 'hidden' }} source={`https://api.recreamed.com/images/${hospitalData.logo}`} />\r\n                    }\r\n                </View>\r\n\r\n                <View>\r\n                    <Text style={styles.subtitle}>Datos del paciente</Text>\r\n                    <Question label='Nombre y apellidos:' resp={pacienteData.name} bkg />\r\n                    <Question label='Sexo' resp={pacienteData.sexo} />\r\n                    <Question label='Edad' resp={pacienteData.edad} bkg />\r\n                    <Question label='Número de celular' resp={pacienteData.telefono} />\r\n                    <Question label='Estado civil' resp={pacienteData.estado_civil} bkg />\r\n                    <Question label='Ocupacion' resp={pacienteData.ocupacion} />\r\n                </View>\r\n\r\n                <Separator />\r\n\r\n                <View>\r\n                    <Text style={styles.subtitle}>Historia clinica</Text>\r\n                    <Question label='Fecha de registro' resp={new Date(pacienteData.createdAt).toLocaleDateString('es-MX', dateOptions)} bkg />\r\n                    <Question label='Motivo por el cual nos visita/padecimiento actual' resp={pacienteData.fisio_data.motivo_visita} />\r\n                    <Question label='Viene referido por algún médico o entrenador?' resp={pacienteData.fisio_data.referido_medico} bkg />\r\n                    <Question label='Cómo se enteró de nosotros?' resp={pacienteData.fisio_data.enterado_mosotros} />\r\n                </View>\r\n\r\n                <Separator />\r\n\r\n                <View>\r\n                    <Text style={styles.subtitle}>Antecedentes personales</Text>\r\n                    <BQuestion label='Padece usted alguna enfermedad?' resp={pacienteData.fisio_data.enfermedad} bkg />\r\n                    <BQuestion label='Toma algún medcamento?' resp={pacienteData.fisio_data.medicamento} />\r\n                    <BQuestion label='Ha sdo intervendo quirurgicamente?' resp={pacienteData.fisio_data.intervenido} bkg />\r\n                    <BQuestion label='Tabaquismo' resp={pacienteData.fisio_data.tabaquismo} />\r\n                    <BQuestion label='Drogas' resp={pacienteData.fisio_data.drogas} bkg />\r\n                    <BQuestion label='Alcoholismo' resp={pacienteData.fisio_data.alcoholismo} />\r\n                    <BQuestion label='Suplemento alimenticio' resp={pacienteData.fisio_data.suplemento} bkg />\r\n                    <BQuestion label='Ha sufrido alguna fractura, esguince, luxación o desgarre?' resp={pacienteData.fisio_data.fractura} />\r\n                </View>\r\n\r\n                <Separator />\r\n\r\n                <View>\r\n                    <Text style={styles.subtitle}>Antecedentes heredofamiliares</Text>\r\n                    <View style={{ flexDirection: 'row' }}>\r\n                        <BQuestion label='Cancer' resp={pacienteData.fisio_data.cancer} bkg />\r\n                        <BQuestion label='Diabetes' resp={pacienteData.fisio_data.dabetes} bkg />\r\n                    </View>\r\n                    <View style={{ flexDirection: 'row' }}>\r\n                        <BQuestion label='Hipertension' resp={pacienteData.fisio_data.hipertension} />\r\n                        <BQuestion label='Enfermedad Mental' resp={pacienteData.fisio_data.enfermedad_mental} />\r\n                    </View>\r\n                    <View style={{ flexDirection: 'row' }}>\r\n                        <BQuestion label='Enfermedades neurologicas' resp={pacienteData.fisio_data.neurologicas} bkg />\r\n                        <BQuestion label='Cardiopatias' resp={pacienteData.fisio_data.cardiopatias} bkg />\r\n                    </View>\r\n                    <View style={{ flexDirection: 'row' }}>\r\n                        <BQuestion label='Enfermedades reumaticas' resp={pacienteData.fisio_data.reumaticas} />\r\n                        <BQuestion label='Malformaciones congénitas' resp={pacienteData.fisio_data.malformaciones} />\r\n                    </View>\r\n\r\n                </View>\r\n\r\n                <Separator />\r\n\r\n                <View style={{ textAlign: 'left' }}>\r\n                    <Text style={{ fontSize: 22, fontFamily: 'Calibri' }}>Notas</Text>\r\n                </View>\r\n\r\n                {\r\n                    expedienteData.map((nota, index) => (\r\n                        <View>\r\n                            <View style={{ textAlign: 'left' }}>\r\n                                <Text style={{ fontSize: 18, fontFamily: 'Calibri' }}>Nota {index+1}</Text>\r\n                            </View>\r\n                            <View style={{ height: 12 }}></View>\r\n                            <View >\r\n                                <View style={{ flexDirection: 'row', backgroundColor: '#ebeff0' }}>\r\n                                    <View style={{ width: '55%' }}><Text style={styles.parrafo}>Fecha: </Text></View>\r\n                                    <View style={{ width: '45%' }}><Text style={styles.respuesta}>{new Date(nota.createdAt).toLocaleDateString('es-MX', dateOptions)}</Text></View>\r\n                                </View>\r\n                                <Question label='Cuál es el motivo de su consulta/lesión/patología?:' resp={nota.motivo} />\r\n                                <Question label='Cuanto tiempo lleva con el problema?:' resp={nota.tiempo} bkg />\r\n                                <Question label='En qué momento le duele más?:' resp={nota.momento_dia} />\r\n                                <Question label='Con qué movimientos aumenta el dolor?:' resp={nota.movimientos} bkg />\r\n                                <Question label='Localizaión del dolor:' resp={nota.localizacion} />\r\n                                <Question label='Especificar:' resp={nota.localizacion_es} bkg />\r\n                                <Question label='Tipo de dolor:' resp={nota.tipo} />\r\n                                <Question label='Especificar:' resp={nota.tipo_es} bkg />\r\n                                <Question label='Escala numerica analogica:' resp={nota.ena} />\r\n                            </View>\r\n\r\n                            <View style={styles.separator}></View>\r\n\r\n                            <Text style={{ fontSize: 14 }}>Rangos de movimiento/goniometria</Text>\r\n                            <GonioTable goniometria={nota.goniometria} />\r\n\r\n                            <View style={styles.separator}></View>\r\n                            <Text style={{ fontSize: 14 }}>Examen manual muscular</Text>\r\n                            <ExamenesTable examenes={nota.examenes} />\r\n\r\n                            <View style={styles.separator}></View>\r\n                            <Text style={{ fontSize: 14 }}>Bitacora</Text>\r\n                            <BitacoraTable bitacoras={nota.bitacoras} />\r\n                        </View>\r\n                    ))\r\n                }\r\n\r\n\r\n\r\n                <View style={{ flex: 1 }}></View>\r\n\r\n                <View style={{ borderTop: '1pt solid #000', paddingTop: 4, flexDirection: 'row', justifyContent: 'space-between', fontSize: 10 }}>\r\n                    {\r\n                        hospitalData && <View>\r\n                            <Text>{hospitalData.nombre} </Text>\r\n                            <Text>{hospitalData.calle} N.{hospitalData.num_exterior}</Text>\r\n                            <Text>Colonia {hospitalData.colonia}, {hospitalData.ciudad_municipio}, {hospitalData.estado}</Text>\r\n                            <Text>Telefono: {hospitalData.telefono}, Correo: {hospitalData.email}</Text>\r\n                            {/* <Text>{hospitalData.sitio_web}</Text> */}\r\n                        </View>\r\n                    }\r\n\r\n                    <View style={{ textAlign: 'center' }}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text >www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n    }\r\n\r\n    return <PDFViewer height={600} width={820}>\r\n        <CartaEx />\r\n    </PDFViewer>\r\n\r\n}\r\n\r\n\r\n\r\nexport default function ExpedienteDocument({ isModalOpen, setIsModalOpen, pacienteData, id_paciente, idHospital }) {\r\n\r\n    const [expedienteData, setExpedienteData] = useState({})\r\n    useEffect(() => {\r\n        getExpedienteData()\r\n    }, [id_paciente])\r\n\r\n\r\n    const getExpedienteData = () => {\r\n        getData(`fexpedientes/${id_paciente}`).then((rs) => {\r\n            console.log('idExp ', id_paciente)\r\n            console.log('ExpedienteData ', rs)\r\n            setExpedienteData(rs)\r\n        })\r\n    }\r\n\r\n\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Modal title=\"Expediente\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={900}\r\n            footer={[\r\n                <Button type='primary' onClick={handleCancel}>Cerrar</Button>\r\n            ]}>\r\n            <ExpedientePDF pacienteData={pacienteData} expedienteData={expedienteData} idHospital={idHospital} />\r\n        </Modal>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\satisfaccion\\satisfaccion_stats.jsx",["1413","1414","1415","1416","1417","1418"],"import React, { useEffect, useState } from 'react'\r\nimport { ArrowDownOutlined, ArrowUpOutlined } from '@ant-design/icons';\r\nimport { Card, Col, Row, Statistic } from 'antd';\r\nimport { Pie } from '@ant-design/plots';\r\nimport Loading from '../../loading';\r\nimport { sendDataBody } from '../../resources';\r\n\r\nexport default function SatisfacconStats() {\r\n\r\n    const data1 = [\r\n        {\r\n            type: 'Si',\r\n            value: 1,\r\n        },\r\n        {\r\n            type: 'no',\r\n            value: 1,\r\n        }\r\n    ];\r\n    const data2 = [\r\n        {\r\n            type: 'Si',\r\n            value: 1,\r\n        },\r\n        {\r\n            type: 'no',\r\n            value: 1,\r\n        }\r\n    ];\r\n    const data3 = [\r\n        {\r\n            type: 'Si',\r\n            value: 1,\r\n        },\r\n        {\r\n            type: 'no',\r\n            value: 1,\r\n        }\r\n    ];\r\n\r\n    const config = {\r\n        appendPadding: 2,\r\n        angleField: 'value',\r\n        colorField: 'type',\r\n        radius: 0.8,\r\n        label: {\r\n            type: 'inner',\r\n            offset: '-30%',\r\n            content: ({ percent }) => `${(percent * 100).toFixed(0)}%`,\r\n            style: {\r\n                fontSize: 14,\r\n                textAlign: 'center',\r\n            },\r\n        },\r\n        // interactions: [\r\n        //     {\r\n        //         type: 'element-active',\r\n        //     },\r\n        // ],\r\n    };\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [statisticData, setStatisticData] = useState({})\r\n\r\n    useEffect(() => {\r\n\r\n        getData()\r\n        // setTimeout(() => {\r\n        //     setLoading(false);\r\n        // }, 2000); \r\n    }, []);\r\n\r\n    const getData = () => {\r\n        sendDataBody('encuestas/satisfaccion/estadisticas', { ids_medicos: [\"6459312ad9a3e202b16d6cc7\", \"63ed3cf981631591d768653f\"] }).then(rs => {\r\n            setStatisticData(rs)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const Indicator = ({ label, num }) => {\r\n        return <Col span={8}>\r\n            <Card bordered={true}>\r\n                <Statistic\r\n                    title={<span style={{ color: 'black' }}>{label}</span>}\r\n                    value={num}\r\n                    suffix=\"/17\"\r\n                />\r\n            </Card>\r\n        </Col>\r\n    }\r\n\r\n    if (loading) return <Loading />\r\n\r\n    return (\r\n        <div>\r\n            <h4>Estadisticas encuesta de satisfaccion</h4>\r\n            {/* <p>Stats: {JSON.stringify(statisticData)}</p> */}\r\n\r\n\r\n\r\n            {/* Object.keys(statisticData).length && */}\r\n            <Col>\r\n                <Row gutter={6}>\r\n                    <Indicator label='Total' num={12} />\r\n                    <Indicator label='Pregunta Uno' num={12} />\r\n                    <Indicator label='Pregunta Dos' num={11} />\r\n                </Row> <br />\r\n                <Row gutter={6}>\r\n                    <Indicator label='Pregunta Tres' num={12} />\r\n                    <Indicator label='Pregunta Cuatroi' num={28} />\r\n                    <Indicator label='Pregunta Cinco' num={32} />\r\n                </Row>\r\n            </Col>\r\n\r\n            <br />\r\n\r\n            <Row gutter={16}>\r\n                <Col >\r\n                    <Card bordered={true}>\r\n                        <Statistic\r\n                            title={<span style={{ color: 'black' }}>Aprobacion</span>}\r\n                            value={0.00}\r\n                            precision={2}\r\n                            valueStyle={{\r\n                                color: '#3f8600',\r\n                            }}\r\n                            prefix={<ArrowUpOutlined />}\r\n                            suffix=\"%\"\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Card bordered={true} >\r\n                        <Statistic\r\n                            title={<span style={{ color: 'black' }}>Desaprobacion</span>}\r\n                            value={0.00}\r\n                            precision={2}\r\n                            valueStyle={{\r\n                                color: '#cf1322',\r\n                            }}\r\n                            prefix={<ArrowDownOutlined />}\r\n                            suffix=\"%\"\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\r\n            <br />\r\n\r\n            {/* <Row gutter={4}>\r\n                <Col span={8} style={{ height: 220 }}>\r\n                    <h6>¿El servicio ha cumplido con tus expectativas?</h6>\r\n                    <Pie {...config} data={data1} />\r\n                </Col>\r\n                <Col span={8} style={{ height: 220 }}>\r\n                    <h6>¿Has recibido toda la información esperada sobre el tratamiento?</h6>\r\n                    <Pie {...config} data={data2} />\r\n                </Col>\r\n                <Col span={8} style={{ height: 220 }}>\r\n                    <h6>Informacio¿Estás satisfecho/a con la calidad y funcionamiento del tratamiento?</h6>\r\n                    <Pie {...config} data={data3} />\r\n                </Col>\r\n            </Row> */}\r\n\r\n            <br />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedieteFisio\\printNota.jsx",["1419"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Modal } from 'antd'\r\nimport { Page, Text, View, Document, StyleSheet, Image, Font } from '@react-pdf/renderer';\r\nimport { PDFViewer } from '@react-pdf/renderer';\r\n\r\nimport Arial from '../../assets/fonts/arial/arial.ttf'\r\nimport Calibri from '../../assets/fonts/calibri/calibri.ttf'\r\n\r\nimport Logo from '../../assets/Logo.png'\r\nimport { dateOptions, getData } from '../../resources';\r\n\r\nexport function NotaPDF({ pacienteData, nota, idHospital }) {\r\n\r\n    Font.register({ family: 'Arial', src: Arial });\r\n    Font.register({ family: 'Calibri', src: Calibri });\r\n\r\n    const [hospitalData, setHospitalData] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const getHospitalData = () => {\r\n            getData(`sucursales/${idHospital}`).then((rs) => {\r\n                console.log(hospitalData)\r\n                setHospitalData(rs[0])\r\n            })\r\n        }\r\n        getHospitalData()\r\n    }, [])\r\n\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: 'white',\r\n            padding: 40,\r\n            fontSize: 12\r\n        },\r\n        subtitle: { fontSize: 22, fontFamily: 'Calibri' },\r\n        title3: { fontSize: 18, fontFamily: 'Calibri' },\r\n        parrafo: {\r\n            fontSize: 12, fontFamily: 'Arial'\r\n        },\r\n        respuesta: {\r\n            fontSize: 12, fontWeight: 'bold'\r\n        },\r\n        subpage: {\r\n            flexDirection: 'row',\r\n            backgroundColor: '#E4E4E4'\r\n        },\r\n        section: {\r\n            // margin: 10,\r\n            // padding: 10,\r\n            flexGrow: 1\r\n        },\r\n        table: {\r\n            display: 'table',\r\n            width: 'auto',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderRightWidth: 0,\r\n            borderBottomWidth: 0\r\n        },\r\n        tableRow: {\r\n            margin: 'auto',\r\n            flexDirection: 'row'\r\n        },\r\n        tableCol: {\r\n            width: '20%',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderLeftWidth: 0,\r\n            borderTopWidth: 0\r\n        },\r\n        tableCol7: {\r\n            width: '14.28%',\r\n            borderStyle: 'solid',\r\n            borderWidth: 1,\r\n            borderLeftWidth: 0,\r\n            borderTopWidth: 0\r\n        },\r\n        text: {\r\n            margin: 5,\r\n            fontSize: 10\r\n        },\r\n        separator: {\r\n            height: 14\r\n        },\r\n        image: {\r\n            width: 80,\r\n            paddingLeft: 16\r\n        },\r\n        limage: {\r\n            width: 80\r\n        },\r\n    });\r\n\r\n\r\n    // Create Document Component\r\n    function CartaEx() {\r\n\r\n        const GonioTable = ({ goniometria }) => (\r\n            <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Articulacion</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Movimiento</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Completa</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Ayuda</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Dolor</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Grados</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Fecha</Text>\r\n                            </View>\r\n                        </View>\r\n\r\n                        {/* <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Articulaxion 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Mov 1</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Si</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>90</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>2024-01-24-T15:42:01.373Z</Text>\r\n                            </View>\r\n                        </View> */}\r\n\r\n                        {\r\n                            goniometria.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.articulacion}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.movimiento}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.completa ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.ayuda ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.dolor ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.grados}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n\r\n                        <View style={styles.tableRow}>\r\n                            {/* Contenido de la fila 3 */}\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        );\r\n\r\n        const ExamenesTable = ({ examenes }) => {\r\n            return <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Grupo</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Referenca</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Dolor</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Dinamometro</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol}>\r\n                                <Text style={styles.text}>Fecha</Text>\r\n                            </View>\r\n                        </View>\r\n\r\n                        {\r\n                            examenes.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.grupo}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.referencia}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.dolor ? 'Si' : 'No'}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{row.dinamometro}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n                    </View>\r\n                </View>\r\n            </View>\r\n\r\n        }\r\n\r\n        const BitacoraTable = ({ bitacoras }) => (\r\n            <View style={styles.subpage}>\r\n                <View style={styles.section}>\r\n                    <View style={styles.table}>\r\n                        <View style={styles.tableRow}>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Aparatologa</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Técncas manuales</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Ejercicio</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Otros</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Estado en el que llega el paciente</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Estado en el que se retira el paciente</Text>\r\n                            </View>\r\n                            <View style={styles.tableCol7}>\r\n                                <Text style={styles.text}>Fisioterapeuta que atendió</Text>\r\n                            </View>\r\n                        </View>\r\n\r\n                        {\r\n                            bitacoras.map((row) => (\r\n                                <View style={styles.tableRow}>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.aparatologia}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.tecnicas}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.ejercicio}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.otros}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.estado_llegada}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{row.estado_salida}</Text>\r\n                                    </View>\r\n                                    <View style={styles.tableCol7}>\r\n                                        <Text style={styles.text}>{new Date(row.createdAt).toLocaleDateString()}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            ))\r\n                        }\r\n\r\n                        <View style={styles.tableRow}>\r\n                            {/* Contenido de la fila 3 */}\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        );\r\n\r\n        const Separator = () => (<View style={styles.separator}></View>)\r\n\r\n        const Question = ({ label, resp, bkg }) => (\r\n            <View style={{ flexDirection: 'row', backgroundColor: bkg ? '#ebeff0' : 'white' }}>\r\n                <View style={{ width: '55%' }}><Text style={styles.parrafo}>{label}</Text></View>\r\n                <View style={{ width: '45%' }}><Text style={styles.respuesta}>{resp}</Text></View>\r\n            </View>\r\n        )\r\n\r\n        return <Document title={`${pacienteData.name}`}>\r\n            <Page size=\"A4\" orientation=\"vertical\" style={styles.page}>\r\n\r\n                <View style={{ textAlign: 'center', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <View>\r\n                        <Text style={{ fontSize: 28, fontFamily: 'Calibri' }}>NOTA MÉDICA</Text>\r\n                        <Text>{new Date().toLocaleDateString('es-MX', dateOptions)}</Text>\r\n                    </View>\r\n                    {\r\n                        hospitalData && hospitalData.logo &&\r\n                        <Image style={{ width: 100, height: 80, overflow: 'hidden' }} source={`https://api.recreamed.com/images/${hospitalData.logo}`} />\r\n                    }\r\n                </View>\r\n\r\n                <View>\r\n                    <Text style={styles.subtitle}>Datos del paciente</Text>\r\n                    <Question label='Nombre y apellidos:' resp={pacienteData.name} bkg />\r\n                    <Question label='Sexo' resp={pacienteData.sexo} />\r\n                    <Question label='Edad' resp={pacienteData.edad} bkg />\r\n                    <Question label='Número de celular' resp={pacienteData.telefono} />\r\n                    <Question label='Estado civil' resp={pacienteData.estado_civil} bkg />\r\n                    <Question label='Ocupacion' resp={pacienteData.ocupacion} />\r\n                </View>\r\n\r\n                <Separator />\r\n\r\n                <View>\r\n                    <View style={{ textAlign: 'left' }}>\r\n                        <Text style={{ fontSize: 18, fontFamily: 'Calibri' }}>Nota del {new Date(nota.createdAt).toLocaleDateString('es-MX',dateOptions)}</Text>\r\n                    </View>\r\n                    <View style={{ height: 12 }}></View>\r\n                    <View >\r\n                        <View style={{ flexDirection: 'row', backgroundColor: '#ebeff0' }}>\r\n                            <View style={{ width: '55%' }}><Text style={styles.parrafo}>Fecha: </Text></View>\r\n                            <View style={{ width: '45%' }}><Text style={styles.respuesta}>{new Date(nota.createdAt).toLocaleDateString('es-MX', dateOptions)}</Text></View>\r\n                        </View>\r\n                        <Question label='Cuál es el motivo de su consulta/lesión/patología?:' resp={nota.motivo} />\r\n                        <Question label='Cuanto tiempo lleva con el problema?:' resp={nota.tiempo} bkg />\r\n                        <Question label='En qué momento le duele más?:' resp={nota.momento_dia} />\r\n                        <Question label='Con qué movimientos aumenta el dolor?:' resp={nota.movimientos} bkg />\r\n                        <Question label='Localizaión del dolor:' resp={nota.localizacion} />\r\n                        <Question label='Especificar:' resp={nota.localizacion_es} bkg />\r\n                        <Question label='Tipo de dolor:' resp={nota.tipo} />\r\n                        <Question label='Especificar:' resp={nota.tipo_es} bkg />\r\n                        <Question label='Escala numerica analogica:' resp={nota.ena} />\r\n                    </View>\r\n\r\n                    <View style={styles.separator}></View>\r\n\r\n                    <Text style={{ fontSize: 14 }}>Rangos de movimiento/goniometria</Text>\r\n                    <GonioTable goniometria={nota.goniometria} />\r\n\r\n                    <View style={styles.separator}></View>\r\n                    <Text style={{ fontSize: 14 }}>Examen manual muscular</Text>\r\n                    <ExamenesTable examenes={nota.examenes} />\r\n\r\n                    <View style={styles.separator}></View>\r\n                    <Text style={{ fontSize: 14 }}>Bitacora</Text>\r\n                    <BitacoraTable bitacoras={nota.bitacoras} />\r\n                </View>\r\n\r\n                <View style={{ flex: 1 }}></View>\r\n\r\n                <View style={{ borderTop: '1pt solid #000', paddingTop: 4, flexDirection: 'row', justifyContent: 'space-between', fontSize: 10, marginTop: 4 }}>\r\n                    {\r\n                        hospitalData && <View>\r\n                            <Text>{hospitalData.nombre} </Text>\r\n                            <Text>{hospitalData.calle} N.{hospitalData.num_exterior}</Text>\r\n                            <Text>Colonia {hospitalData.colonia}, {hospitalData.ciudad_municipio}, {hospitalData.estado}</Text>\r\n                            <Text>Telefono: {hospitalData.telefono}, Correo: {hospitalData.email}</Text>\r\n                            {/* <Text>{hospitalData.sitio_web}</Text> */}\r\n                        </View>\r\n                    }\r\n\r\n                    <View style={{ textAlign: 'center' }}>\r\n                        <Image style={styles.image} src={Logo} />\r\n                        <Text >www.recreamed.com</Text>\r\n                    </View>\r\n                </View>\r\n\r\n            </Page>\r\n\r\n\r\n        </Document>\r\n    }\r\n\r\n    return <PDFViewer height={600} width={820}>\r\n        <CartaEx />\r\n    </PDFViewer>\r\n\r\n}\r\n\r\nexport default function PrintNota({ nota, idHospital, pacienteData }) {\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n    const handleOk = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    return <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: 6 }}>\r\n        <Button onClick={showModal}>Imprimir Nota</Button>\r\n\r\n\r\n        <Modal title=\"Imprimir nota\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={900} destroyOnClose>\r\n            <NotaPDF idHospital={idHospital} nota={nota} pacienteData={pacienteData} />\r\n        </Modal>\r\n    </div>\r\n\r\n\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\pacientes\\code.generate.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\session\\register_patient_fisio.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.encuesta.jsx",["1420","1421"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { gad7_catalog } from './gad7.catalog'\r\nexport default function Gad7Encuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            gad_7: Object.values(values),\r\n            tipo: 'gad_7',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    const Instructions = () => {\r\n        return <p>\r\n            Durante las  <u>últimas 2 semanas</u>, ¿qué tan seguido ha tenido molestias debido a los siguientes problemas?\r\n            <br /> <span style={{ fontSize: 14 }}>(Selecciona una respuesta)</span>\r\n        </p>\r\n    }\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta GAD-7</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n\r\n            <br />\r\n            <Instructions />\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"gad7_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    gad7_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your username!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>Ningún día</Radio>\r\n                            <Radio value={1}>Varios días</Radio>\r\n                            <Radio value={2}>Más de la mitad de los días</Radio>\r\n                            <Radio value={3}>Casi todos los días</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='gad7_enc' type=\"primary\" htmlType=\"submit\">\r\n                    Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\utils.jsx",["1422"],"import { getData } from \"../resources\"\r\nimport logo from \"../assets/Logo.png\";\r\nimport { message } from \"antd\";\r\n\r\n\r\nexport const EncuestaLoading = () => <div style={{ paddingTop: 180 }}>\r\n    <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n        <h3 >Cargando</h3>\r\n    </div>\r\n</div>\r\n\r\nexport function checkEncuesta  ( token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking ) {\r\n\r\n    getData('getuser/' + idpaciente).then((rs) => { setPacienteData(rs) })\r\n    getData('getuser/' + idmedico).then((rs) => { setMedicoData(rs) })\r\n\r\n\r\n    getData(`encuestas/uuid/${token}`).then(rs => {\r\n        console.log(rs);\r\n        setEncuestaNotExists(rs.message === 'The survey does not exist')\r\n    }).then(() => { setChecking(false) })\r\n}\r\n\r\nexport const ThanksMessage = () => {\r\n    return <div style={{ paddingTop: 180 }}>\r\n        <div style={{ margin: 'auto', width: '40%', textAlign: 'center' }}>\r\n            <h3 >Gracias por contestar la encuesta</h3>\r\n            <img width={256} src={logo} alt=\"recreamedLogo\" style={{ margin: 'auto' }} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport const onFinishFailed = (errorInfo) => {\r\n    errorInfo.errorFields.map((p) => {\r\n        message.error('Conteste la pregunta ' + p.name)\r\n    })\r\n};","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.results.jsx",["1423"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport Gad7Details from './gad7.details'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\n\r\n\r\nexport default function Gad7Results() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('gad_7', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/gad_7`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { gad_7 }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(gad_7); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas GAD-7</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta GAD-7\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta GAD-7\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]} destroyOnClose >\r\n                <EscalasCreateGeneralLink tipo='gad_7' />\r\n            </Modal>\r\n\r\n            <Gad7Details escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\gad7\\gad7.details.jsx",["1424"],"import React from 'react'\r\nimport { Button, Modal, Card } from 'antd';\r\nimport { gad7_catalog } from './gad7.catalog';\r\n\r\n\r\nexport default function Gad7Details({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n    var score = 0;\r\n    return (\r\n        <Modal title=\"Respuestas escala GAD-7\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} destroyOnClose>\r\n         \r\n            {\r\n                gad7_catalog.map((pr, i) => {\r\n                    score += escalaDetails[i];\r\n                    return <Card size='small'>\r\n                        <Card.Grid hoverable={false} style={{ width: '70%' }}>{pr}</Card.Grid>\r\n                        <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails && escalaDetails[i]}</Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n            <Card>\r\n                <p>Total score: <strong>{score}</strong></p>\r\n            </Card>\r\n\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.encuesta.jsx",["1425","1426","1427","1428"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { phq9_catalog } from './phq9p.catalog'\r\nexport default function Phq9pEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            phq9p: Object.values(values),\r\n            tipo: 'phq9p',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        // sendDataBody('encuestas/add', body).then((rs) => {\r\n        //     console.log('add enc resp', rs)\r\n        //     message.success(rs.message)\r\n        // }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta PHQ9P</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n\r\n            <br />\r\n            <h5>Cuestionario sobre la salud del paciente-9</h5>\r\n            <h6>(US Spanish version of the PHQ)</h6>\r\n            <br />\r\n\r\n            <p className='name'>Durante las ultimas dos semanas, ¿qué tan seguido ha tenido molestias por alguna de las siguientes dificultades?</p>\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"phq9p_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    phq9_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your username!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>\"No del todo\"</Radio>\r\n                            <Radio value={1}>\"Varios días\"</Radio>\r\n                            <Radio value={2}>\"Más de la mitad de los días\"</Radio>\r\n                            <Radio value={3}>\"Casi todos los días\"</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    label=\"Si usted marcó cualquiera de los problemas, ¿qué tan difícil han afectado estos problemas en hacer su trabajo, encargarse de tareas del hogar, o llevarse bien con otras personas?\"\r\n                    name={9}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Radio.Group onChange={onChange} >\r\n                        <Radio value={0}>Para nada dificil</Radio>\r\n                        <Radio value={1}>Un poco difícil</Radio>\r\n                        <Radio value={2}>Muy difícil</Radio>\r\n                        <Radio value={3}>Extremaadamente difícil</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='phq9p_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.results.jsx",["1429"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport Phq9pDetails from './phq9p.details'\r\n\r\n\r\nexport default function Phq9pResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('phq9p', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/phq9p`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { phq9p }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(phq9p); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas PHQ9P</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta PHQ9P\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta de PHQ9P\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='phq9p' />\r\n            </Modal>\r\n\r\n            <Phq9pDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\phq9p\\phq9p.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.encuesta.jsx",["1430","1431"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { cssrs_catalog } from './cssrs.catalog'\r\nexport default function CssrsEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    const [twoEnabled, setTwoEnabled] = useState(false) // Enables 1-5 questions\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            cssrs: Object.values(values),\r\n            tipo: 'cssrs',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n    const onEnables = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n        setTwoEnabled(e.target.value)\r\n    };\r\n\r\n    const Question = ({ i }) => {\r\n        return <Form.Item\r\n            label={cssrs_catalog[i]}\r\n            name={i}\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: 'Please input your username!',\r\n                },\r\n            ]}\r\n        >\r\n            <Radio.Group onChange={i === 1 ? onEnables : onChange} >\r\n                <Radio value={true}>Si</Radio>\r\n                <Radio value={false}>No</Radio>\r\n            </Radio.Group>\r\n        </Form.Item>\r\n    }\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta C-SSRS</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <Form\r\n                layout='vertical'\r\n                name=\"cssrs_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                <p className='desc'>Desde la última visita:</p>\r\n\r\n                <Question i={0} />\r\n                <Question i={1} />\r\n\r\n                {\r\n                    twoEnabled && <div>\r\n                        <Question i={2} />\r\n                        <Question i={3} />\r\n                        <Question i={4} />\r\n                    </div>\r\n                }\r\n\r\n                <Question i={5} />\r\n\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='cssrs_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.results.jsx",["1432"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\n// import Gad7Details from './gad7.details'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport CssrsDetails from './cssrs.details'\r\n\r\n\r\nexport default function CssrsResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('cssrs', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/cssrs`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { cssrs }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(cssrs); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas C-SSRS</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta C-SSRS\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta C-SSRS\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='cssrs' />\r\n            </Modal>\r\n\r\n            <CssrsDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\cssrs\\cssrs.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.encuesta.jsx",["1433","1434"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { thi_catalog } from './thi.catalog'\r\nexport default function ThiEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            thi: Object.values(values),\r\n            tipo: 'thi',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta THI</h4>\r\n            <h5>Adaptación en español del Tinnitus Handicap Inventory (THI)</h5>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <p>Conteste las preguntas en función de su propia valoración, seleccionando una respuesta</p>\r\n            <Form\r\n                layout='vertical'\r\n                name=\"thi_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    thi_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Seleccione su respuesta',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>Si</Radio>\r\n                            <Radio value={1}>A veces</Radio>\r\n                            <Radio value={2}>No</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='thi_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.results.jsx",["1435"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport ThiDetails from './thi.details'\r\n\r\n\r\nexport default function ThiResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('thi', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/thi`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { thi }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(thi); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas THI</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta THI\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta THI\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='thi' />\r\n            </Modal>\r\n\r\n            <ThiDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\thi\\thi.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.encuesta.jsx",["1436","1437"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { emca_catalog } from './emca.catalog'\r\nexport default function EmcaEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            emca: Object.values(values),\r\n            tipo: 'emca',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta EMCA</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <h5>Escala Multidimensional de Craving de Alcohol (EMCA)</h5>\r\n            <p>Durante la última semana...</p>\r\n            <Form\r\n                layout='vertical'\r\n                name=\"emca_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    emca_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Seleccione una respuesta',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={5}>Muy de acuerdo</Radio>\r\n                            <Radio value={4}>Bastante de acuerdo</Radio>\r\n                            <Radio value={3}>Ni de acuerdo ni en desacuerdo</Radio>\r\n                            <Radio value={2}>Bastante en desacuerdo</Radio>\r\n                            <Radio value={1}>Muy en desacuerdo</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='emca_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.results.jsx",["1438"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport EmcaDetails from './emca.details'\r\n\r\n\r\nexport default function EmcaResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('emca', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/emca`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { emca }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(emca); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas EMCA</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta EMCA\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta EMCA\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='emca' />\r\n            </Modal>\r\n\r\n            <EmcaDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\emca\\emca.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.encuesta.jsx",["1439","1440"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { ows_catalog } from './ows.catalog'\r\nexport default function OwsEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            ows: Object.values(values),\r\n            tipo: 'ows',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta OWS</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <h5>Escala de abstinencia de opiáceos (Opiate Withdrawal Scale, OWS)</h5>\r\n            <br />\r\n            <h6>Seleccione el nivel de presencia de los siguientes sintomas/signos</h6>\r\n            <br />\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"ows_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    ows_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Seleccione una respuesta',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>Ausente</Radio>\r\n                            <Radio value={1}>Leve</Radio>\r\n                            <Radio value={2}>Moderado</Radio>\r\n                            <Radio value={3}>Severo</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='ows_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.results.jsx",["1441"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport OwsDetails from './ows.details'\r\n\r\n\r\nexport default function OwsResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('ows', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/ows`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { ows }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(ows); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas OWS</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta OWS\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta OWS\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='ows' />\r\n            </Modal>\r\n\r\n            <OwsDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\ows\\ows.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.encuesta.jsx",["1442","1443"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { sows_catalog } from './sows.catalog'\r\nexport default function SowsEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        console.log('Orginal values: ', values)\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            sows: Object.values(values),\r\n            tipo: 'sows',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta SOWS</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <h5>Escala breve de Abstinencia de Opiáceos</h5>\r\n            <h6>(Short Opiate Withdrawal Scale, SOWS)</h6>\r\n            <br />\r\n            <h6>Seleccione el nivel de presencia de los siguientes sintomas/signos</h6>\r\n            <br />\r\n            <Form\r\n                layout='vertical'\r\n                name=\"sows_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                {\r\n                    sows_catalog.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Seleccione una respuesta',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>Ausente</Radio>\r\n                            <Radio value={1}>Leve</Radio>\r\n                            <Radio value={2}>Moderado</Radio>\r\n                            <Radio value={3}>Severo</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='sows_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.results.jsx",["1444"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport SowsDetails from './sows.details'\r\n\r\n\r\nexport default function SowsResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('sows', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/sows`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { sows }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(sows); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas SOWS</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta SOWS\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta SOWS\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='sows' />\r\n            </Modal>\r\n\r\n            <SowsDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\sows\\sows.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\doctorViews\\expedientes\\historialCitas.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\ingresos\\patients-chart.jsx",["1445","1446"],"import React, { useEffect, useState } from 'react'\r\nimport { Statistic, Card } from 'antd'\r\nimport { getData, sendDataBody } from '../../resources'\r\nimport Loading from '../../loading'\r\n\r\nexport default function PatientsChart({ ids_medicos }) {\r\n\r\n\r\n  const MedicCard = ({ id_medico, name }) => {\r\n    const [counter, setCounter] = useState(0)\r\n    const [loading, setLoading] = useState(true)\r\n    useEffect(() => {\r\n      getData(`pacientes/count/${id_medico}`).then(rs => { setCounter(rs); setLoading(false) })\r\n    }, [])\r\n    if (loading) return <Loading />\r\n    return <Card>\r\n      <Statistic title={<span style={{ color: 'black' }}>{name}</span>} value={counter} />\r\n    </Card>\r\n  }\r\n\r\n\r\n  return (\r\n    <div >\r\n      <h5>Pacientes de los diferentes médicos</h5>\r\n\r\n\r\n      <div className='fila'>\r\n        {\r\n          ids_medicos.map(med => (\r\n            <MedicCard id_medico={med._id} name={med.name} />\r\n          ))\r\n        }\r\n      </div>\r\n      <br />\r\n    </div>\r\n  )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\patients.results.jsx",["1447","1448"],"import React, { useEffect, useState } from 'react'\r\nimport { Select, Form, message, Table, Button } from 'antd'\r\nimport { getData, ids_hospitales, sendDataBody } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport Gad7Details from '../gad7/gad7.details'\r\nimport ThiDetails from '../thi/thi.details'\r\nimport Phq9pDetails from '../phq9p/phq9p.details'\r\nimport CssrsDetails from '../cssrs/cssrs.details'\r\nimport EmcaDetails from '../emca/emca.details'\r\nimport OwsDetails from '../ows/ows.details'\r\nimport SowsDetails from '../sows/sows.details'\r\nimport Pcl5Details from '../pcl5/pcl5.details'\r\nimport DocsDetails from '../docs/docs.details'\r\nimport Dolor2Details from '../dolor_2/dolor2_details'\r\nimport GenerateAllEscalas from './generate.escalas.all'\r\nimport CsvEscalas from './csv.escalas'\r\n\r\nexport default function PatientsResults() {\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [allPacientes, setAllPacientes] = useState([])\r\n    const [selectedPatient, setSelectedPatient] = useState(null)\r\n    const [patientScalas, setPatientScalas] = useState(null)\r\n    const [medicos, setMedicos] = useState([]) // List of medicos able to select\r\n\r\n\r\n    //Modal for details scala\r\n    const [escalaDetails, setescalaDetails] = useState(null)\r\n\r\n    const [tipoFound, setTipoFound] = useState('') // Tipos de escalas\r\n\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n    const handleCancel = () => {\r\n        setIsModalOpen(false);\r\n        setTipoFound('')\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getAllMedicos = async () => {\r\n            await getData(`users/hospital/${ids_hospitales[0]}`).then(rs => { getAllPacientes(rs) })\r\n        }\r\n\r\n        getAllMedicos()\r\n        // usuario.rol === 'Medico' ? getPacientesOfDoctor(usuario._id) : getAllMedicos()\r\n\r\n    }, [])\r\n\r\n    const getAllPacientes = async (medicos) => {\r\n        const medicosFormatted = medicos.map(m => m._id)\r\n        await sendDataBody('pacientes/simple/medicos', { medicos: medicosFormatted }).then(rs => { setAllPacientes(rs); setLoading(false) })\r\n    }\r\n\r\n\r\n    // Form Methods\r\n    const handlePatientChange = (value) => {\r\n        console.log('Selected Patient ', value)\r\n        setSelectedPatient(value)\r\n        // const found = allPacientes.find((p) => p._id === value);\r\n        // if (found) {\r\n\r\n        //     let { medicos_asignados } = found\r\n        //     medicos_asignados.forEach((m) => {\r\n        //         m.label = m.name; m.value = m._id\r\n        //     });\r\n\r\n        //     setMedicos(medicos_asignados);\r\n\r\n        // } else {\r\n        //     message.error('Paciente no encontrado')\r\n        // }\r\n        getPatientScalas(value)\r\n    };\r\n\r\n    const getPatientScalas = (id) => {\r\n        getData(`encuestas/paciente/${id}`).then(rs => { console.log(rs); setPatientScalas(rs) })\r\n    }\r\n\r\n    const filterOption = (input, option) =>\r\n        (option?.label ?? '').toLowerCase().includes(input.toLowerCase());\r\n\r\n    // Triggers for open modals and see details\r\n    const detailModalParams = { handleOk: handleCancel, handleCancel, isModalOpen, escalaDetails };\r\n\r\n\r\n    const searchEscala = (params) => {\r\n        const { protocolo, tipo, momento } = params;\r\n        console.log('Searching', params);\r\n        const found = patientScalas.find((scala) => { return scala.tipo === tipo && scala.cat[0] === protocolo && scala.cat[1] === momento })\r\n        if (found) {\r\n            message.info('Escala ya contestada')\r\n            setescalaDetails(found[tipo])\r\n            setTipoFound(tipo)\r\n            setIsModalOpen(true)\r\n        }\r\n        else {\r\n            message.error('Escala aún no registrada')\r\n        }\r\n    }\r\n\r\n    const DepresionResistenteTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' }, // Aplicacion final\r\n                address: { label: 'GAD7', value: 'gad_7' }, // Inicio mantenimiento \r\n                address2: { label: 'GAD7', value: 'gad_7' }, // Final mantenimiento\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'GAD7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion final\r\n                address: { label: 'PHQ9P', value: 'phq9p' },// Inicio mantenimiento \r\n                address2: { label: 'PHQ9P', value: 'phq9p' },// Final mantenimiento\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'CSSRS', value: 'cssrs' },// Aplicacion inicial\r\n                age: { label: 'CSSRS', value: 'cssrs' }// Aplicacion final\r\n            },\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'depreres', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'depreres', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n            {\r\n                title: 'Inicio de mantenimiento',\r\n                dataIndex: 'address',\r\n                key: 'address',\r\n                render: (_, { address }) => <Button onClick={() => searchEscala({ protocolo: 'depreres', tipo: address.value, momento: 'mant1' })} type='link'>{address?.label}</Button>\r\n            },\r\n            {\r\n                title: 'Final mantenimiento',\r\n                dataIndex: 'address2',\r\n                key: 'address2',\r\n                render: (_, { address2 }) => <Button onClick={() => searchEscala({ protocolo: 'depreres', tipo: address2.value, momento: 'mant2' })} type='link'>{address2?.label}</Button>\r\n            },\r\n        ];\r\n\r\n\r\n        return <div>\r\n            <h4>Escalas EMT</h4>\r\n            <br />\r\n            <h6>Depresion resistente al tratamiento</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const TinnitusTable = () => {\r\n\r\n        const dataSource = [\r\n            { // Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'GAD7', value: 'gad_7' }, //Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' }, //Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'PHQ9P', value: 'phq9p' }, //Aplicacion inicial\r\n                age: { label: 'THI', value: 'thi' }//Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'THI', value: 'thi' },//Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }//Aplicacion final\r\n            },\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'Tinnitus', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'Tinnitus', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            }\r\n        ];\r\n\r\n\r\n        return <div>\r\n            <h6>TINNITUS</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const TocTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'DOCS', value: 'docs' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'DOCS', value: 'docs' },// Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' },// Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'GAD-7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            },\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'Toc', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'Toc', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n        ];\r\n\r\n        return <div>\r\n            <h6>Trastorno obsesivo compulsivo (TOC)</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const AlcoholismoTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'GAD7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'EMCA', value: 'emca' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'EMCA', value: 'emca' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            },\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'Alcoholismo', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'Alcoholismo', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n        ];\r\n\r\n        return <div>\r\n            <h6>Alcoholismo</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const OpioidesTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'GAD7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'OWS', value: 'ows' },// Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'OWS', value: 'ows' },// Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'SOWS', value: 'sows' }// Aplicacion final\r\n            },\r\n            {//Fila 5\r\n                key: '5',\r\n                name: { label: 'SOWS', value: 'sows' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            },\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'Opioides', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'Opioides', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n        ];\r\n\r\n        return <div>\r\n            <h6>Opioides</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const DolorTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'GAD-7', value: 'gad_7' },// Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'GAD-7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'Escala del dolor', value: 'dolor_2' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'Escala del dolor', value: 'dolor_2' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            }\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'Dolor', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'Dolor', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n        ];\r\n\r\n        return <div>\r\n            <h6>Dolor</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    const EstresPTTable = () => {\r\n\r\n        const dataSource = [\r\n            {//Fila 1\r\n                key: '1',\r\n                name: { label: 'Sociodemografico', value: 'Sociodemografico' }, // Aplicacion inicial\r\n                age: { label: 'PCL-5', value: 'pcl_5' }, // Aplicacion final\r\n            },\r\n            {//Fila 2\r\n                key: '2',\r\n                name: { label: 'PCL-5', value: 'pcl_5' },// Aplicacion inicial\r\n                age: { label: 'GAD7', value: 'gad_7' },// Aplicacion final\r\n            },\r\n            {//Fila 3\r\n                key: '3',\r\n                name: { label: 'GAD7', value: 'gad_7' },// Aplicacion inicial\r\n                age: { label: 'PHQ9P', value: 'phq9p' }// Aplicacion final\r\n            },\r\n            {//Fila 4\r\n                key: '4',\r\n                name: { label: 'PHQ9P', value: 'phq9p' },// Aplicacion inicial\r\n                age: { label: 'Satisfaccion', value: 'satisfaccion' }// Aplicacion final\r\n            }\r\n        ];\r\n\r\n        const columns = [\r\n            {\r\n                title: 'Aplicación inicial',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                render: (_, { name }) => <Button onClick={() => searchEscala({ protocolo: 'estrespt', tipo: name.value, momento: 'inicial' })} type='link'>{name.label}</Button>\r\n            },\r\n            {\r\n                title: 'Aplicación final',\r\n                dataIndex: 'age',\r\n                key: 'age',\r\n                render: (_, { age }) => <Button onClick={() => searchEscala({ protocolo: 'estrespt', tipo: age.value, momento: 'final' })} type='link'>{age.label}</Button>\r\n            },\r\n\r\n        ];\r\n\r\n        return <div>\r\n            <h6>Estrés Postraumatico</h6>\r\n            <Table dataSource={dataSource} columns={columns} />\r\n        </div>\r\n    }\r\n\r\n    if (loading) return <Loading />;\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n\r\n            <div style={{display: 'flex', width: '100',flexDirection: 'row', justifyContent: 'space-between'}}>\r\n                <h5>Resultados de escalas</h5>\r\n                <CsvEscalas />\r\n            </div>\r\n\r\n\r\n\r\n            <div className='fila'>\r\n                <Form.Item name=\"usuario\" rules={[{ required: true, message: 'Selecciona el paciente' }]}\r\n                    style={{ alignItems: 'center', paddingTop: 20 }}\r\n                    labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\r\n\r\n                    <Select\r\n                        showSearch\r\n                        filterOption={filterOption}\r\n                        onChange={handlePatientChange}\r\n                        placeholder={<span className='desc'>Selecciona un paciente</span>}\r\n                        value={selectedPatient}\r\n                        style={{ width: 280 }}\r\n                        options={\r\n                            allPacientes.map(p => (\r\n                                {\r\n                                    ...p,\r\n                                    key: p._id,\r\n                                    value: p._id,\r\n                                    label: p.name\r\n                                }\r\n                            ))\r\n                        }\r\n                    />\r\n                </Form.Item>\r\n                <GenerateAllEscalas selectedPatient={selectedPatient} />\r\n            </div>\r\n\r\n            {\r\n                patientScalas ?\r\n                    <div>\r\n                        {/* <div>Escalas de {JSON.stringify(selectedPatient)} {JSON.stringify(patientScalas)}</div> */}\r\n                        <DepresionResistenteTable />\r\n                        <TinnitusTable />\r\n                        <TocTable />\r\n                        <AlcoholismoTable />\r\n                        <OpioidesTable />\r\n                        <DolorTable />\r\n                        <EstresPTTable />\r\n                    </div> :\r\n                    <p>Seleccione un paciente de la lista de arriba para ver sus resultados de escalas</p>\r\n            }\r\n\r\n\r\n\r\n            {tipoFound === 'gad_7' && <Gad7Details   {...detailModalParams} />}\r\n            {tipoFound === 'phq9p' && <Phq9pDetails {...detailModalParams} />}\r\n            {tipoFound === 'cssrs' && <CssrsDetails {...detailModalParams} />}\r\n            {tipoFound === 'thi' && <ThiDetails {...detailModalParams} />}\r\n            {tipoFound === 'docs' && <DocsDetails {...detailModalParams} />}\r\n            {tipoFound === 'emca' && <EmcaDetails {...detailModalParams} />}\r\n            {tipoFound === 'ows' && <OwsDetails {...detailModalParams} />}\r\n            {tipoFound === 'sows' && <SowsDetails {...detailModalParams} />}\r\n            {tipoFound === 'dolor_2' && <Dolor2Details {...detailModalParams} />}\r\n            {tipoFound === 'pcl_5' && <Pcl5Details  {...detailModalParams} />}\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.results.jsx",["1449"],"import React, { useEffect, useState } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Modal, Table } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport DocsDetails from './docs.details'\r\n\r\nexport default function DocsResults() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('docs', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/docs`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, {  docs }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(docs); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas DOCS</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta DOCS\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta DOCS\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='docs' />\r\n            </Modal>\r\n\r\n            <DocsDetails escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.encuesta.jsx",["1450","1451","1452","1453"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Divider, Form, Radio, message, Input } from \"antd\";\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { sendDataBody } from '../../resources'\r\nimport { docs_catalog_1, docs_catalog_2, docs_catalog_3, docs_catalog_4 } from './docs.catalog';\r\n\r\nexport default function DocsEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    function convertirObjeto(objeto) {\r\n        const resultado = {};\r\n\r\n        for (const clave in objeto) {\r\n            const [categoria, indice] = clave.split('-');\r\n            if (!resultado[categoria]) {\r\n                resultado[categoria] = new Array(5).fill(0);\r\n            }\r\n            resultado[categoria][parseInt(indice) - 1] = objeto[clave];\r\n        }\r\n\r\n        return resultado;\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n\r\n        console.log('Values: ', values)\r\n\r\n        const objetoConvertido = convertirObjeto(respuestas);\r\n        console.log('New', objetoConvertido)\r\n\r\n\r\n\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            docs: objetoConvertido,\r\n            tipo: 'docs',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onDocsFinishFailed = (errorInfo) => {\r\n        console.log(errorInfo)\r\n        message.error('Revise el formulario y conteste todas las preguntas')\r\n\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        message.info('radio checked ' + e.target.value);\r\n    };\r\n\r\n    const [respuestas, setRespuestas] = useState({});\r\n\r\n    const handleRespuestaChange = (n, value) => {\r\n        setRespuestas({ ...respuestas, [n]: value });\r\n    };\r\n\r\n    const InitialInstr = () => {\r\n        return <p style={{ textAlign: 'justify' }}>\r\n            En este cuestionario se le pregunta sobre 4 tipos de preocupaciones diferentes que puede que usted esté\r\n            (o no esté) experimentando. Para cada tipo de preocupación, hay una descripción del tipo de\r\n            pensamientos (a veces llamados obsesiones) y conductas (a veces llamadas rituales o compulsiones) que\r\n            son típicas de ese tipo de preocupación en particular, seguida de 5 preguntas sobre sus experiencias en\r\n            relación con estos pensamientos y conductas. Por favor, lea cada descripción detenidamente y responda\r\n            a las preguntas para cada categoría basándose en las experiencias que usted ha tenido durante el\r\n            último mes.\r\n        </p>\r\n    }\r\n\r\n    const Instr1 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones relacionadas con gérmenes y contaminación.</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Pensar o sentir que está contaminado/a porque estuvo en contacto con ciertos objetos o personas o\r\n                estuvo cerca de ellos.  <br />\r\n                - Sentir que está contaminado/a porque estuvo en ciertos lugares (por ejemplo, un cuarto de baño).  <br />\r\n                - Pensar en gérmenes, enfermedades o en la posibilidad de propagar la contaminación.  <br />\r\n                - Lavarse las manos, usar desinfectante de manos, ducharse, cambiarse de ropa o limpiar objetos\r\n                contaminación. <br />\r\n                - Evitar ciertas personas, objetos o lugares debido a la contaminación. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con pensamientos y conductas relacionados con\r\n                la contaminación durante el último mes. Recuerde que sus experiencias pueden ser diferentes de los\r\n                ejemplos mencionados anteriormente. Por favor, rodee con un círculo el número junto a su respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr2 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones relacionadas con causar daño, provocar lesiones o traer mala suerte</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Dudar de si ha cometido un error que podría hacer que sucediera algo horrible o perjudicial. <br />\r\n                - Pensar que pueda haber ocurrido un accidente, desastre o daño físico terrible u otra desgracia y que\r\n                usted no fue lo suficientemente precavido para evitarlo. <br />\r\n                - Pensar que usted podía evitar algún daño o desgracia haciendo las cosas de una determinada\r\n                manera, contando hasta cierto número o evitando determinados números o palabras \"negativos\". <br />\r\n                - Pensar que podía perder algo importante que es poco probable que pierda (por ejemplo, la cartera,\r\n                papeles, documentos personales...). <br />\r\n                - Comprobar cosas como cerraduras, enchufes, la cartera, etc. más de lo necesario. <br />\r\n                - Comprobar repetidamente o preguntar a otras personas para asegurarse de que no ha pasado (o no\r\n                va a pasar) algo malo. <br />\r\n                - Repasar mentalmente cosas del pasado para asegurarse de que no hizo nada malo. <br />\r\n                - Necesitar hacer las cosas en una secuencia determinada para evitar que ocurran cosas dañinas o\r\n                desastres. <br />\r\n                - Necesitar contar hasta cierto número o evitar ciertos números negativos por miedo a que ocurra algo\r\n                malo. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con los pensamientos y conductas relacionados\r\n                con causar daño o desastres durante el último mes. Recuerde que sus experiencias pueden ser\r\n                ligeramente diferentes de los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr3 = () => {\r\n        return <div>\r\n            <p><strong>Pensamientos inaceptables/prohibidos</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Tener pensamientos desagradables sobre sexo, cosas inmorales o violencia que le vienen a la mente en\r\n                contra de su voluntad. <br />\r\n                - Pensar que podría hacer algo horrible, indecente o que le avergüence que en realidad usted no quiere\r\n                hacer. <br />\r\n                - Repetir una acción o hacer las cosas en una secuencia determinada debido a un mal pensamiento. <br />\r\n                - Realizar mentalmente alguna acción o rezar para deshacerse de un pensamiento no deseado o\r\n                desagradable. <br />\r\n                - Evitar ciertas personas, lugares o situaciones que le provocan pensamientos no deseados o\r\n                desagradables. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con pensamientos no deseados que vienen a su\r\n                mente en contra de su voluntad y a comportamientos dirigidos a afrontar este tipo de pensamientos\r\n                durante el último mes. Recuerde que sus experiencias pueden ser ligeramente diferentes de los ejemplos\r\n                mencionados anteriormente. Por favor, seleccione respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr4 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones sobre simetría y la necesidad de que las cosas estén “bien” o “como tienen que estar\".</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br /> \r\n                - Necesitar que las cosas sean/estén simétricas, uniformes, equilibradas o exactas.<br />\r\n                - Sentir que algo no está \"del todo bien\".<br />\r\n                - Repetir algo del día a día hasta que tiene la sensación de que lo ha hecho \"bien\" o\r\n                \"equilibradamente\".<br />\r\n                - Contar cosas absurdas (por ejemplo, azulejos del techo, el número de palabras en una frase, etc.).<br />\r\n                - Poner las cosas en un orden determinado cuando no es necesario.<br />\r\n                - Tener que repetir algo de una manera determinada hasta que está \"bien\".<br />\r\n                Las siguientes preguntas se refieren a sus sensaciones de que algo no está \"bien\" y sus conductas\r\n                dirigidas a conseguir una sensación de orden, simetría o equilibrio durante el último mes. Recuerde que\r\n                sus experiencias pueden ser ligeramente diferentes a los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta DOCS</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"docs_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\">\r\n\r\n\r\n                <InitialInstr />\r\n                <Divider>Categoria 1</Divider>\r\n                <Instr1 />\r\n                {docs_catalog_1.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 2</Divider>\r\n                <Instr2 />\r\n                {docs_catalog_2.map((pregunta, ind) => (\r\n                    <Form.Item key={pregunta.n} name={ind + 5} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 3</Divider>\r\n                <Instr3 />\r\n                {docs_catalog_3.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i + 10} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 4</Divider>\r\n                <Instr4/>\r\n                {docs_catalog_4.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i + 15} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='docs_enc' type=\"primary\" htmlType=\"submit\">\r\n                    Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\docs\\docs.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.encuesta.jsx",["1454"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { pcl5_questions } from './pcl5.catalog'\r\n\r\nexport default function Pcl5Encuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        // console.log('Orginal values: ', values)\r\n\r\n        const valuesArray = Object.values(values).filter(val => typeof val === 'number');\r\n        const newArray = [...valuesArray];\r\n\r\n        const newObj = {\r\n            ...values,\r\n            problemas: newArray\r\n        };\r\n\r\n        // Eliminar las claves numéricas del objeto original\r\n        Object.keys(newObj).forEach(key => {\r\n            if (!isNaN(parseInt(key))) {\r\n                delete newObj[key];\r\n            }\r\n        });\r\n\r\n        // console.log('New Array ', newObj)\r\n\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            pcl_5: newObj,\r\n            tipo: 'pcl_5',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n    };\r\n\r\n    const inputRules = [{ required: true, message: 'Conteste correctamente' }];\r\n\r\n    const Instructions = () => {\r\n        return <p style={{ textAlign: 'justify' }}>\r\n            <strong> <u>Instrucciones:</u>  </strong>\r\n            Este cuestionario pregunta acerca de los problemas que usted pudo haber tenido después de una experiencia muy estresante que implica la muerte real o amenaza, lesiones graves o violencia sexual. Podría ser algo que le haya pasado directamente, algo que fue testigo, o algo que le haya pasado a un familiar cercano o un amigo cercano. Algunos ejemplos son un grave accidente, fuego, desastre como un huracán, tornado o terremoto, ataque o abuso físico o sexual; guerra; homicidio; o el suicidio.\r\n            Primero por favor responda a algunas preguntas acerca de su peor caso, que para este cuestionario significa el caso que en la actualidad le molesta más. Esto podría ser uno de los ejemplos anteriores o alguna otra experiencia estresante. También podría ser un solo evento (por ejemplo, un accidente de coche) o múltiples eventos similares (por ejemplo, múltiples eventos estresantes en zona de guerra o abuso sexual repetido).\r\n        </p>\r\n    }\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta PCL-5</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n            <Instructions />\r\n            <br />\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"pcl5_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={{}}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n                <Form.Item\r\n                    label=\"Brevemente identifique el peor de los casos (si usted se siente cómodo haciendolo)\"\r\n                    name=\"peor_caso\"\r\n                    rules={[{ required: true, message: 'Conteste correctamente' }]}\r\n                >\r\n                    <Input placeholder='peor de los casos' />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"¿Hace cuanto tiempo pasó? (Por favor estime si usted no está seguro)\"\r\n                    name=\"tiempo\"\r\n                    rules={inputRules}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Hubo muerte real o amenaza, lesiones graves o violencia sexual?\"\r\n                    name='muerte_real'\r\n                    rules={inputRules}\r\n                >\r\n                    <Radio.Group onChange={(e) => console.log('changed ', e.target.value)} >\r\n                        <Radio value={true}>Si</Radio>\r\n                        <Radio value={false}>No</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    key='como_experimento'\r\n                    label=\"¿Cómo lo experimentó?\"\r\n                    name='como_experimento'\r\n                    rules={inputRules}\r\n                >\r\n                    <Radio.Group onChange={onChange} >\r\n                        <Radio value=\"Me paso a mi directamente\">Me pasó a mí directamente</Radio>\r\n                        <Radio value=\"Fui testigo de ello\">Fui testigo de ello</Radio>\r\n                        <Radio value=\"Supe que le pasó a un familiar cercano o un amigo cercano\">Supe que le pasó a un familiar cercano o un amigo cercano</Radio>\r\n                        <Radio value=\"Yo estaba expuesto en repetidas ocasiones sobre detalles al respecto como parte de mi trabajo\">Yo estaba expuesto en repetidas ocasiones sobre detalles al respecto como parte de mi trabajo (por ejmplo, paramedico, policia, militar, ayuda de primera respuesta)</Radio>\r\n                        <Radio value=\"Otra\">Otra</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    key='muerte_familiar'\r\n                    id='muerte_familiar'\r\n                    label=\"Si el, evento involucra la muerte de un familiar cercano o un amigo cercano, ¿fué debido a algún tipo de accidente o violencia, o fué por causas naturales?\"\r\n                    name=\"muerte_familiar\"\r\n                    rules={inputRules}\r\n                >\r\n                    <Radio.Group onChange={onChange} >\r\n                        <Radio value=\"Accidente o violencia\">Accidente o violencia</Radio>\r\n                        <Radio value=\"Causas naturales\">Causas naturales</Radio>\r\n                        <Radio value=\"No aplicable\">No aplicable (el evento no involucra la muerte de un familiar o amistad cercana)</Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                <strong>En el mes pasado, cuánto le ha molestado tener:</strong>\r\n                {\r\n                    pcl5_questions.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Seleccione una respuesta',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group onChange={onChange} >\r\n                            <Radio value={0}>No del todo</Radio>\r\n                            <Radio value={1}>Un Poco</Radio>\r\n                            <Radio value={2}>Moderado</Radio>\r\n                            <Radio value={3}>Mucho</Radio>\r\n                            <Radio value={4}>Extremadamente</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='pcl5_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.results.jsx",["1455"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport Pcl5Details from './pcl5.details'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\n\r\nexport default function Pcl5Results() {\r\n\r\n\r\n  const [encuestasData, setEncuestasData] = useState([])\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // For Creating Modal\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const showModal = () => { setIsModalOpen(true) };\r\n  const handleOk = () => { setIsModalOpen(false) };\r\n  const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n  // Modal for details\r\n  const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n  const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n  const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n  const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n  useEffect(() => {\r\n    (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('pcl_5', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n  }, [])\r\n\r\n  const getEncuestasData = (medico) => {\r\n    getData(`encuestas/byDoctorAndTipo/${medico}/pcl_5`).then((rs) => {\r\n      console.log(rs);\r\n      setEncuestasData(rs)\r\n    })\r\n  }\r\n\r\n  const detailsColumns = [\r\n    {\r\n      title: 'Usuario',\r\n      key: 'usuario',\r\n      dataIndex: 'usuario',\r\n      render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n      sorter: true\r\n    },\r\n    {\r\n      title: 'Acciones',\r\n      key: 'actions',\r\n      dataIndex: 'actions',\r\n      render: (_, { pcl_5 }) => (<>\r\n        <Button onClick={() => { setEscalaForDetails(pcl_5); showDetailsModal() }}>Ver detalles</Button>\r\n      </>),\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <div>\r\n      <h4 className='spacedTitle'>Resultados de encuestas PCL-5</h4>\r\n      <Button type=\"primary\" onClick={showModal}>\r\n        Crear Link Encuesta PCL-5\r\n      </Button>\r\n\r\n      <br /><br />\r\n\r\n      <h4>Detalles de encuestas</h4>\r\n      <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n      <Modal title=\"Crear Encuesta PCL-5\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n        footer={[\r\n          <Button onClick={handleCancel}>Cerrar</Button>\r\n        ]} destroyOnClose >\r\n        <EscalasCreateGeneralLink tipo='pcl_5' />\r\n      </Modal>\r\n\r\n      <Pcl5Details escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n    </div>\r\n  )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\pcl5\\pcl5.details.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\doctors\\reports.doctors.jsx",["1456"],"import React, { useEffect, useState } from 'react'\r\nimport { Modal, Table } from 'antd';\r\nimport Loading from '../../loading';\r\nimport { dateOptions, sendData } from '../../resources';\r\n\r\nexport default function ReportsDoctors({ id_medico, isModalOpen, handleOk }) {\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [citasData, setCitasData] = useState(null)\r\n\r\n    useEffect(() => { getCitasData() }, [isModalOpen])\r\n\r\n\r\n\r\n\r\n    const getCitasData = () => {\r\n        setLoading(true)\r\n        if (id_medico) {\r\n            sendData(`citas/medico/dates/${id_medico}`).then(rs => {\r\n                setCitasData(rs)\r\n                setLoading(false)\r\n            })\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Paciente',\r\n            dataIndex: 'usuario',\r\n            key: 'usuario',\r\n            render: (_, { usuario }) => <div>{usuario.name}</div>\r\n        },\r\n        {\r\n            title: 'Fecha',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'fecha',\r\n            render: (_, { fecha_hora }) => <div>{new Date(fecha_hora).toLocaleDateString('es-MX', dateOptions)}</div>\r\n        },\r\n        {\r\n            title: 'Hora',\r\n            dataIndex: 'fecha_hora',\r\n            key: 'hora',\r\n            render: (_, { fecha_hora }) => <div>{new Date(fecha_hora).toLocaleTimeString('es-MX')}</div>\r\n        },\r\n        {\r\n            title: 'Servicio',\r\n            dataIndex: 'servicio',\r\n            key: 'age',\r\n        },\r\n        \r\n    ];\r\n\r\n    return (\r\n        <Modal title=\"Reporte mensual de citas \" open={isModalOpen} onOk={handleOk} onCancel={handleOk} width={800} destroyOnClose>\r\n            {\r\n                loading ? <Loading /> :\r\n                    <div>\r\n\r\n\r\n\r\n                        {/* <p>Id medico {id_medico}</p> */}\r\n                        {/* { // GO TO BACKEND AND MAKE A QUERY TO FILTER CITAS BY DATE\r\n                            JSON.stringify(citasData)\r\n                        } */}\r\n\r\n                        <Table dataSource={citasData} columns={columns} />\r\n\r\n\r\n                    </div>\r\n            }\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\register.patient.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\details-cita.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\recepcionViews\\citas\\details-cita.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\admHospitalViews\\citas\\register.patient.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_results.jsx",["1457"],"import React, { useState, useEffect } from 'react'\r\nimport { getData, usuario } from '../../resources'\r\nimport getAllEscalas from '../getEscalas'\r\nimport { Button, Table, Modal } from 'antd'\r\nimport EscalasCreateGeneralLink from '../escalasCreateGeneralLink'\r\nimport Dolor2Details from './dolor2_details'\r\n\r\n\r\n\r\nexport default function Dolor2Results() {\r\n\r\n    const [encuestasData, setEncuestasData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    // For Creating Modal\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const showModal = () => { setIsModalOpen(true) };\r\n    const handleOk = () => { setIsModalOpen(false) };\r\n    const handleCancel = () => { setIsModalOpen(false) };\r\n\r\n    // Modal for details\r\n    const [escalaForDetails, setEscalaForDetails] = useState(\"\")\r\n    const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\r\n    const showDetailsModal = () => { setIsDetailsModalOpen(true) };\r\n    const handleDetailsOk = () => { setIsDetailsModalOpen(false) };\r\n    const handleDetailsCancel = () => { setIsDetailsModalOpen(false) };\r\n\r\n    useEffect(() => {\r\n        (usuario.rol === 'Administrador' || usuario.rol === 'Recepcion' || usuario.rol === 'Enfermero') ? getAllEscalas('dolor_2', setEncuestasData, setLoading) : getEncuestasData(usuario._id)\r\n    }, [])\r\n\r\n    const getEncuestasData = (medico) => {\r\n        getData(`encuestas/byDoctorAndTipo/${medico}/dolor_2`).then((rs) => {\r\n            console.log(rs);\r\n            setEncuestasData(rs)\r\n        })\r\n    }\r\n\r\n    const detailsColumns = [\r\n        {\r\n            title: 'Usuario',\r\n            key: 'usuario',\r\n            dataIndex: 'usuario',\r\n            render: (_, { usuario }) => (<>{usuario ? usuario.name : \"usuario no existente\"}</>),\r\n            sorter: true\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'actions',\r\n            dataIndex: 'actions',\r\n            render: (_, { dolor_2 }) => (<>\r\n                <Button onClick={() => { setEscalaForDetails(dolor_2); showDetailsModal() }}>Ver detalles</Button>\r\n            </>),\r\n        },\r\n        // {\r\n        //     title: 'IDEncuesta',\r\n        //     key: 'idEncuesta',\r\n        //     dataIndex: '_id',\r\n        // },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h4 className='spacedTitle'>Resultados de encuestas de Dolor</h4>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n                Crear Link Encuesta de Dolor\r\n            </Button>\r\n\r\n            <br /><br />\r\n\r\n            <h4>Detalles de encuestas</h4>\r\n            <Table columns={detailsColumns} dataSource={encuestasData} bordered />\r\n\r\n            <Modal title=\"Crear Encuesta de Dolor\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}\r\n                footer={[\r\n                    <Button onClick={handleCancel}>Cerrar</Button>\r\n                ]}>\r\n                <EscalasCreateGeneralLink tipo='dolor_2' />\r\n            </Modal>\r\n\r\n            <Dolor2Details escalaDetails={escalaForDetails} handleCancel={handleDetailsCancel} handleOk={handleDetailsOk} isModalOpen={isDetailsModalOpen} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_encuesta.jsx",["1458","1459","1460"],"import React, { useEffect, useState } from 'react'\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { Form, Input, Button, message, Radio, Slider } from 'antd'\r\nimport { sendDataBody } from '../../resources'\r\nimport { d2_catalog_1, d2_catalog_2 } from './dolor2_catalog'\r\nimport PainZoneSelector from './dolor2_selector'\r\nimport pain1 from '../../assets/pain1.jpg'\r\nimport pain2 from '../../assets/pain2.jpg'\r\nimport pain3 from '../../assets/pain3.jpg'\r\nimport pain4 from '../../assets/pain4.jpg'\r\n\r\nexport default function Dolor2Encuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    // const marks = { 0: '0', 10: '10' }\r\n    const marks = { 0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10' }\r\n    const names = [\"one\", \"two\", \"tree\"]\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n    const [ansOne, setAnsOne] = useState(0)\r\n    const [ansTwo, setAnsTwo] = useState(0)\r\n    const [ansTree, setAnsTree] = useState(0)\r\n    const [ansFour, setAnsFour] = useState(0)\r\n    const [dolorZone, setDolorZone] = useState({})\r\n    const [irradiates, setIrradiates] = useState({})\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n\r\n        const dolorSchema = {\r\n            one: ansOne,\r\n            two: ansTwo,\r\n            tree: ansTree,\r\n            // four: \"\" + values.four,\r\n            four: ansFour,\r\n            zona: JSON.stringify(dolorZone),\r\n            irradia: JSON.stringify(irradiates),\r\n            questions: Object.values(values)\r\n        }\r\n\r\n        // one: Number,\r\n        // two: Number,\r\n        // tree: Number,\r\n        // four: String,\r\n        // zona: String,\r\n        // irradia: String,\r\n        // questions: [Number]\r\n\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            dolor_2: dolorSchema,\r\n            tipo: 'dolor_2',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n        console.log('Values:', values);\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        console.log('radio checked', e.target.value);\r\n        setAnsFour(e.target.value)\r\n    };\r\n\r\n    const SliderItem = ({ label, name, value, setState }) => {\r\n        return <Form.Item\r\n            label={label}\r\n            name={name}\r\n            rules={[{ required: true, message: 'Por favor seleccione un valor' }]}\r\n        >\r\n            <Slider value={value}\r\n                onChange={(value) => setState(value)}\r\n                defaultValue={0} min={0} max={10} marks={marks} />\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', height: '100%' }}>\r\n                <span>Ningún dolor</span>\r\n                <span>Máximo dolor</span>\r\n            </div>\r\n        </Form.Item>\r\n    }\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta de Dolor</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n\r\n            <br />\r\n\r\n\r\n            <Form\r\n                form={form}\r\n                layout='vertical'\r\n                name=\"dolor_2_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n\r\n\r\n\r\n                <SliderItem label={d2_catalog_1[0]} value={ansOne} setState={setAnsOne} />\r\n                <SliderItem label={d2_catalog_1[1]} value={ansTwo} setState={setAnsTwo} />\r\n                <SliderItem label={d2_catalog_1[2]} value={ansTree} setState={setAnsTree} />\r\n\r\n                {/* <Form.Item\r\n                    key={1111}\r\n                    label={d2_catalog_1[0]}\r\n                    name='one'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n\r\n                    <Slider defaultValue={0} min={0} max={10} marks={marks} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    key={222}\r\n                    label={d2_catalog_1[1]}\r\n                    name='two'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n\r\n                    <Slider defaultValue={0} min={0} max={10} marks={marks} />\r\n                </Form.Item> */}\r\n\r\n\r\n                <Form.Item\r\n                    label='Seleccione imagen que mejor describa el curso de su dolor'\r\n                    // name='four'\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your username!',\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Radio.Group onChange={onChange}>\r\n                        <Radio value={0}>\r\n                            <img src={pain1} alt=\"Dolor1\" style={{ marginRight: 5, marginBottom: 4 }} />\r\n                            Dolor constante con ligeras fluctuaciones</Radio>\r\n                        <Radio value={1}>\r\n                            <img src={pain2} alt=\"Dolor2\" style={{ marginRight: 5, marginBottom: 4 }} />\r\n                            Dolor constante con ataques de dolor</Radio>\r\n                        <Radio value={2}>\r\n                            <img src={pain3} alt=\"Dolor3\" style={{ marginRight: 5, marginBottom: 4 }} />\r\n                            Ataques de dolor sin dolor entre los ataques</Radio>\r\n                        <Radio value={3}>\r\n                            <img src={pain4} alt=\"Dolor4\" style={{ marginRight: 5, marginBottom: 4 }} />\r\n                            Ataques de dolor frecuentes con con dolor entre los ataques\r\n                        </Radio>\r\n                    </Radio.Group>\r\n                </Form.Item>\r\n\r\n                {/* <Form.Item\r\n                    // name={name}\r\n                    label='Seleccione su zona de dolor'\r\n                    rules={[{ required: true, message: 'Por favor seleccione un valor' }]}\r\n                    valuePropName=\"value\"\r\n                    trigger=\"onChange\"\r\n                >\r\n                </Form.Item> */}\r\n                <PainZoneSelector setDolorZone={setDolorZone} setIrradiates={setIrradiates} />\r\n\r\n\r\n                {\r\n                    d2_catalog_2.map((q, i) => <Form.Item\r\n                        label={q}\r\n                        name={i}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your username!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Radio.Group  >\r\n                            <Radio value={0}>No</Radio>\r\n                            <Radio value={1}>Muy ligera</Radio>\r\n                            <Radio value={2}>Ligera</Radio>\r\n                            <Radio value={3}>Moderada</Radio>\r\n                            <Radio value={4}>Intensa</Radio>\r\n                            <Radio value={5}>Muy intensa</Radio>\r\n                        </Radio.Group>\r\n                    </Form.Item>)\r\n                }\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='dolor_2_enc' type=\"primary\" htmlType=\"submit\">\r\n                        Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_catalog.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_selector.jsx",["1461","1462","1463"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport \"./PainZoneSelector.css\";\r\nimport body from '../../assets/body.jpg'\r\nimport { Button, Checkbox } from \"antd\";\r\n\r\nconst PainZoneSelector = ({ setDolorZone, setIrradiates }) => {\r\n    const canvasRef = useRef(null);\r\n    const [point, setPoint] = useState(null);\r\n    const [arrow, setArrow] = useState(null);\r\n    const [drawingArrow, setDrawingArrow] = useState(false);\r\n    const [radiates, setRadiates] = useState(false);\r\n\r\n    const fillColor = \"rgba(255, 0, 0, 0.5)\";\r\n    const strokeColor = \"rgba(255, 0, 0, 0.5)\";\r\n\r\n    const handleClick = (event) => {\r\n        const rect = event.target.getBoundingClientRect();\r\n        const x = event.clientX - rect.left;\r\n        const y = event.clientY - rect.top;\r\n\r\n        if (!point) {\r\n            setPoint({ x, y });\r\n            setDolorZone({x,y}) // \r\n            if (radiates) {\r\n                setDrawingArrow(true);\r\n            }\r\n        } else if (drawingArrow) {\r\n            setArrow({ start: point, end: { x, y } });\r\n            setIrradiates({ start: point, end: { x, y } })\r\n            setDrawingArrow(false);\r\n        }\r\n    };\r\n\r\n    const draw = (context) => {\r\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n\r\n        if (point) {\r\n            context.beginPath();\r\n            context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\r\n            context.fillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n            context.fill();\r\n            context.strokeStyle = strokeColor;\r\n            context.stroke();\r\n        }\r\n\r\n        if (arrow) {\r\n            const { start, end } = arrow;\r\n            context.beginPath();\r\n            context.moveTo(start.x, start.y);\r\n            context.lineTo(end.x, end.y);\r\n            context.strokeStyle = \"blue\";\r\n            context.lineWidth = 2;\r\n            context.stroke();\r\n\r\n            // Draw arrowhead\r\n            const angle = Math.atan2(end.y - start.y, end.x - start.x);\r\n            context.beginPath();\r\n            context.moveTo(end.x, end.y);\r\n            context.lineTo(end.x - 10 * Math.cos(angle - Math.PI / 6), end.y - 10 * Math.sin(angle - Math.PI / 6));\r\n            context.lineTo(end.x - 10 * Math.cos(angle + Math.PI / 6), end.y - 10 * Math.sin(angle + Math.PI / 6));\r\n            context.closePath();\r\n            context.fillStyle = \"blue\";\r\n            context.fill();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(\"2d\");\r\n        draw(context);\r\n    }, [point, arrow]);\r\n\r\n    const handleSave = () => {\r\n        // Guardar las coordenadas en la base de datos\r\n        console.log(\"Selected Point:\", point);\r\n        console.log(\"Arrow:\", arrow);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setPoint(null);\r\n        setArrow(null);\r\n        setDrawingArrow(false);\r\n        setRadiates(false);\r\n    };\r\n\r\n    const handleRadiatesChange = (event) => {\r\n        setRadiates(event.target.checked);\r\n        if (!event.target.checked) {\r\n            setArrow(null);\r\n            setDrawingArrow(false);\r\n        } else if (point) {\r\n            setDrawingArrow(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"pain-zone-selector\">\r\n            <h4>Seleccione su zona de dolor</h4>\r\n            <div className=\"canvas-container\">\r\n                <img\r\n                    src={body}\r\n                    alt=\"Cuerpo humano\"\r\n                    className=\"background-image\"\r\n                    onLoad={() => {\r\n                        const canvas = canvasRef.current;\r\n                        const context = canvas.getContext(\"2d\");\r\n                        draw(context);\r\n                    }}\r\n                />\r\n                <canvas\r\n                style={{borderRadius: 8, borderColor:'#6b809c'}}\r\n                    ref={canvasRef}\r\n                    width={600}\r\n                    height={625}\r\n                    onClick={handleClick}\r\n                />\r\n            </div>\r\n            <div>\r\n                {/* <label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        checked={radiates}\r\n                        onChange={handleRadiatesChange}\r\n                    />\r\n                    El dolor se irradia\r\n                </label> */}\r\n\r\n                <Checkbox checked={radiates} onChange={handleRadiatesChange}><strong>El dolor se irradia</strong></Checkbox>\r\n            </div>\r\n            <div className=\"button-container\">\r\n                <Button onClick={handleReset}>Borrar y volver a seleccionar</Button>\r\n                {/* <Button onClick={handleSave}>Guardar</Button> */}\r\n            </div>\r\n            <br />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PainZoneSelector;\r\n","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\dolor_2\\dolor2_details.jsx",["1464","1465"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { Form, Modal, Card } from 'antd';\r\nimport { d2_catalog_1, d2_catalog_2 } from './dolor2_catalog';\r\nimport \"./PainZoneSelector.css\";\r\nimport body from '../../assets/body.jpg'\r\n\r\nexport default function Dolor2Details({ isModalOpen, handleOk, handleCancel, escalaDetails }) {\r\n\r\n\r\n    // IMAGE\r\n    const draw = (context, point, arrow) => {\r\n        // Ajusta el tamaño del canvas al tamaño del contenedor\r\n        context.canvas.width = context.canvas.offsetWidth;\r\n        context.canvas.height = context.canvas.offsetHeight;\r\n\r\n        \r\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n        \r\n        if (point) {\r\n            context.beginPath();\r\n            context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\r\n            context.fillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n            context.fill();\r\n            context.stroke();\r\n            console.log('ANCHO ', context.canvas.width)\r\n            console.log('onDrawPoint ', point)\r\n        }\r\n\r\n        if (arrow && arrow.start && arrow.end) {\r\n            const { start, end } = arrow;\r\n            context.beginPath();\r\n            context.moveTo(start.x, start.y);\r\n            context.lineTo(end.x, end.y);\r\n            context.strokeStyle = \"blue\";\r\n            context.lineWidth = 2;\r\n            context.stroke();\r\n\r\n            // Draw arrowhead\r\n            const angle = Math.atan2(end.y - start.y, end.x - start.x);\r\n            context.beginPath();\r\n            context.moveTo(end.x, end.y);\r\n            context.lineTo(end.x - 10 * Math.cos(angle - Math.PI / 6), end.y - 10 * Math.sin(angle - Math.PI / 6));\r\n            context.lineTo(end.x - 10 * Math.cos(angle + Math.PI / 6), end.y - 10 * Math.sin(angle + Math.PI / 6));\r\n            context.closePath();\r\n            context.fillStyle = \"blue\";\r\n            context.fill();\r\n        }\r\n    };\r\n\r\n    const PainZoneResults = ({ point, arrow }) => {\r\n        const canvasRef = useRef(null);\r\n\r\n        useEffect(() => {\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext(\"2d\");\r\n            const validArrow = arrow && arrow.start && arrow.end;\r\n            draw(context, point, validArrow ? arrow : null);\r\n            console.log('POINT ', point)\r\n        }, [point, arrow]);\r\n\r\n        return (\r\n            <div className=\"pain-zone-results\">\r\n                <br />\r\n                <span className='desc'>Zona de dolor/irradiacion</span>\r\n                <div style={{ position: 'relative', textAlign: 'center', marginBottom: '20px' }}>\r\n                    <img src={body} alt=\"Example\" style={{ width: '100%' }} onLoad={() => {\r\n                        const canvas = canvasRef.current;\r\n                        const context = canvas.getContext(\"2d\");\r\n                        draw(context, point, arrow);\r\n                    }} />\r\n                    <canvas ref={canvasRef} style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', zIndex: 2 ,borderRadius: 8, borderColor:'#6b809c'}} />\r\n                </div>\r\n                \r\n                {/* <div className=\"canvas-container\">\r\n                    <img\r\n                        src={body}\r\n                        alt=\"Cuerpo humano\"\r\n                        className=\"background-image-modal\"\r\n                        onLoad={() => {\r\n                            const canvas = canvasRef.current;\r\n                            const context = canvas.getContext(\"2d\");\r\n                            draw(context, point, arrow);\r\n                        }}\r\n                    />\r\n                    <canvas\r\n                        ref={canvasRef}\r\n                        width={800}\r\n                        height={600}\r\n                        className=\"drawing-canvas\"\r\n                    />\r\n                </div> */}\r\n            </div>\r\n        );\r\n    };\r\n    // END OF IMAGE\r\n\r\n\r\n    const RowCard = ({ labelKey, responseKey }) => {\r\n        return <Card size='small'>\r\n            <Card.Grid hoverable={false} style={{ width: '70%' }}>{d2_catalog_1[labelKey]}</Card.Grid>\r\n            <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails[responseKey]}</Card.Grid>\r\n        </Card>\r\n    }\r\n    return (\r\n        <Modal title=\"Respuestas escala de dolor\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={640} destroyOnClose>\r\n            {/* <img\r\n                src={body}\r\n                alt=\"Cuerpo humano\"\r\n                className=\"background-image-modal\"\r\n                onLoad={() => {\r\n                    // const canvas = canvasRef.current;\r\n                    // const context = canvas.getContext(\"2d\");\r\n                    // draw(context, point, arrow);\r\n                    // alert('Imagen cargada')\r\n                }}\r\n            /> */}\r\n            <RowCard labelKey={0} responseKey='one' />\r\n            <RowCard labelKey={1} responseKey='two' />\r\n            <RowCard labelKey={2} responseKey='tree' />\r\n\r\n            {/* {JSON.stringify(escalaDetails.zona)}\r\n            {JSON.stringify(escalaDetails.irradia)} */}\r\n\r\n            {\r\n                escalaDetails.zona &&\r\n                <PainZoneResults point={JSON.parse(escalaDetails.zona)} arrow={escalaDetails.irradia && JSON.parse(escalaDetails.irradia)} />\r\n            }\r\n\r\n\r\n            {\r\n                d2_catalog_2.map((pr, i) => {\r\n                    return <Card size='small'>\r\n                        <Card.Grid hoverable={false} style={{ width: '70%' }}>{pr}</Card.Grid>\r\n                        <Card.Grid hoverable={false} style={{ width: '30%' }}>{escalaDetails && escalaDetails['questions'][i]}</Card.Grid>\r\n                    </Card>\r\n                })\r\n            }\r\n\r\n\r\n\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\generate.escalas.all.jsx",[],"C:\\Users\\Gil\\Documents\\ReCreaMed\\src\\escalas\\results\\csv.escalas.jsx",[],{"ruleId":"1466","replacedBy":"1467"},{"ruleId":"1468","replacedBy":"1469"},{"ruleId":"1470","severity":1,"message":"1471","line":8,"column":8,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":12},{"ruleId":"1470","severity":1,"message":"1471","line":9,"column":8,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":12},{"ruleId":"1470","severity":1,"message":"1471","line":9,"column":8,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":12},{"ruleId":"1470","severity":1,"message":"1474","line":36,"column":38,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":36,"column":49,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1474","line":47,"column":38,"nodeType":"1472","messageId":"1473","endLine":47,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":47,"column":49,"nodeType":"1472","messageId":"1473","endLine":47,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1474","line":58,"column":38,"nodeType":"1472","messageId":"1473","endLine":58,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":58,"column":49,"nodeType":"1472","messageId":"1473","endLine":58,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1474","line":70,"column":38,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":70,"column":49,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1474","line":81,"column":38,"nodeType":"1472","messageId":"1473","endLine":81,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":81,"column":49,"nodeType":"1472","messageId":"1473","endLine":81,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1474","line":92,"column":38,"nodeType":"1472","messageId":"1473","endLine":92,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1475","line":92,"column":49,"nodeType":"1472","messageId":"1473","endLine":92,"endColumn":56},{"ruleId":"1476","severity":1,"message":"1477","line":88,"column":15,"nodeType":"1478","endLine":88,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":35,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":42},{"ruleId":"1470","severity":1,"message":"1480","line":7,"column":10,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1481","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1482","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1483","line":16,"column":21,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1484","line":2,"column":17,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":20},{"ruleId":"1476","severity":1,"message":"1485","line":24,"column":29,"nodeType":"1478","endLine":24,"endColumn":32},{"ruleId":"1470","severity":1,"message":"1480","line":7,"column":10,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1481","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1486","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1487","line":4,"column":15,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1488","line":6,"column":8,"nodeType":"1472","messageId":"1473","endLine":6,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1489","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1490","line":40,"column":11,"nodeType":"1472","messageId":"1473","endLine":40,"endColumn":18},{"ruleId":"1476","severity":1,"message":"1485","line":45,"column":29,"nodeType":"1478","endLine":45,"endColumn":32},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":35,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":42},{"ruleId":"1470","severity":1,"message":"1491","line":8,"column":10,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":24},{"ruleId":"1492","severity":1,"message":"1493","line":41,"column":8,"nodeType":"1494","endLine":41,"endColumn":21,"suggestions":"1495"},{"ruleId":"1470","severity":1,"message":"1496","line":2,"column":26,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1497","line":8,"column":8,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1498","line":10,"column":24,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1499","line":10,"column":40,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":52},{"ruleId":"1470","severity":1,"message":"1500","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1501","line":2,"column":32,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":42},{"ruleId":"1470","severity":1,"message":"1502","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1503","line":10,"column":21,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1504","line":41,"column":11,"nodeType":"1472","messageId":"1473","endLine":41,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1500","line":4,"column":58,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":68},{"ruleId":"1470","severity":1,"message":"1505","line":36,"column":12,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1506","line":37,"column":11,"nodeType":"1472","messageId":"1473","endLine":37,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1507","line":42,"column":12,"nodeType":"1472","messageId":"1473","endLine":42,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1508","line":42,"column":23,"nodeType":"1472","messageId":"1473","endLine":42,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1509","line":43,"column":12,"nodeType":"1472","messageId":"1473","endLine":43,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1510","line":43,"column":24,"nodeType":"1472","messageId":"1473","endLine":43,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1509","line":44,"column":12,"nodeType":"1472","messageId":"1473","endLine":44,"endColumn":22},{"ruleId":"1492","severity":1,"message":"1511","line":51,"column":8,"nodeType":"1494","endLine":51,"endColumn":10,"suggestions":"1512"},{"ruleId":"1492","severity":1,"message":"1513","line":55,"column":8,"nodeType":"1494","endLine":55,"endColumn":19,"suggestions":"1514"},{"ruleId":"1470","severity":1,"message":"1515","line":2,"column":32,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1501","line":2,"column":40,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":50},{"ruleId":"1470","severity":1,"message":"1516","line":2,"column":52,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":58},{"ruleId":"1470","severity":1,"message":"1488","line":4,"column":8,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1517","line":9,"column":12,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1502","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1503","line":10,"column":21,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1519","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1520","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1521","line":77,"column":11,"nodeType":"1472","messageId":"1473","endLine":77,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1522","line":109,"column":11,"nodeType":"1472","messageId":"1473","endLine":109,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1523","line":17,"column":8,"nodeType":"1494","endLine":17,"endColumn":10,"suggestions":"1524"},{"ruleId":"1525","severity":1,"message":"1526","line":49,"column":39,"nodeType":"1527","messageId":"1528","endLine":49,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1529","line":6,"column":9,"nodeType":"1472","messageId":"1473","endLine":6,"endColumn":15},{"ruleId":"1492","severity":1,"message":"1523","line":17,"column":6,"nodeType":"1494","endLine":17,"endColumn":8,"suggestions":"1530"},{"ruleId":"1492","severity":1,"message":"1523","line":16,"column":8,"nodeType":"1494","endLine":16,"endColumn":10,"suggestions":"1531"},{"ruleId":"1525","severity":1,"message":"1526","line":48,"column":39,"nodeType":"1527","messageId":"1528","endLine":48,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1516","line":2,"column":16,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1532","line":2,"column":46,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1533","line":2,"column":51,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":54},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":73,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":80},{"ruleId":"1470","severity":1,"message":"1534","line":3,"column":10,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1529","line":7,"column":9,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1535","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1536","line":10,"column":25,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1537","line":11,"column":12,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1538","line":11,"column":28,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":45},{"ruleId":"1492","severity":1,"message":"1523","line":22,"column":8,"nodeType":"1494","endLine":22,"endColumn":10,"suggestions":"1539"},{"ruleId":"1525","severity":1,"message":"1526","line":77,"column":39,"nodeType":"1527","messageId":"1528","endLine":77,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1540","line":81,"column":11,"nodeType":"1472","messageId":"1473","endLine":81,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1515","line":2,"column":56,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":73,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":80},{"ruleId":"1492","severity":1,"message":"1523","line":23,"column":6,"nodeType":"1494","endLine":23,"endColumn":8,"suggestions":"1541"},{"ruleId":"1542","severity":1,"message":"1543","line":47,"column":14,"nodeType":"1472","messageId":"1544","endLine":47,"endColumn":15},{"ruleId":"1542","severity":1,"message":"1543","line":52,"column":14,"nodeType":"1472","messageId":"1544","endLine":52,"endColumn":15},{"ruleId":"1525","severity":1,"message":"1526","line":79,"column":35,"nodeType":"1527","messageId":"1528","endLine":79,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1540","line":83,"column":9,"nodeType":"1472","messageId":"1473","endLine":83,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1516","line":2,"column":16,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1532","line":2,"column":46,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1533","line":2,"column":51,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":54},{"ruleId":"1470","severity":1,"message":"1529","line":7,"column":9,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1535","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1536","line":10,"column":25,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1537","line":11,"column":12,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1538","line":11,"column":28,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":45},{"ruleId":"1492","severity":1,"message":"1523","line":22,"column":8,"nodeType":"1494","endLine":22,"endColumn":10,"suggestions":"1545"},{"ruleId":"1525","severity":1,"message":"1526","line":38,"column":35,"nodeType":"1527","messageId":"1528","endLine":38,"endColumn":37},{"ruleId":"1525","severity":1,"message":"1526","line":65,"column":39,"nodeType":"1527","messageId":"1528","endLine":65,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1540","line":69,"column":11,"nodeType":"1472","messageId":"1473","endLine":69,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1516","line":2,"column":16,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1532","line":2,"column":46,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1533","line":2,"column":51,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":54},{"ruleId":"1470","severity":1,"message":"1515","line":2,"column":56,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":73,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":80},{"ruleId":"1470","severity":1,"message":"1535","line":9,"column":12,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1536","line":9,"column":25,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1537","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1538","line":10,"column":28,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":45},{"ruleId":"1492","severity":1,"message":"1523","line":20,"column":8,"nodeType":"1494","endLine":20,"endColumn":10,"suggestions":"1546"},{"ruleId":"1525","severity":1,"message":"1526","line":52,"column":39,"nodeType":"1527","messageId":"1528","endLine":52,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1540","line":56,"column":11,"nodeType":"1472","messageId":"1473","endLine":56,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1516","line":2,"column":16,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1547","line":2,"column":39,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1515","line":2,"column":56,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":62},{"ruleId":"1470","severity":1,"message":"1535","line":9,"column":12,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1536","line":9,"column":25,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1537","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1538","line":10,"column":28,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":45},{"ruleId":"1492","severity":1,"message":"1523","line":21,"column":8,"nodeType":"1494","endLine":21,"endColumn":10,"suggestions":"1548"},{"ruleId":"1525","severity":1,"message":"1526","line":56,"column":39,"nodeType":"1527","messageId":"1528","endLine":56,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1540","line":60,"column":11,"nodeType":"1472","messageId":"1473","endLine":60,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1549","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1550","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1551"},{"ruleId":"1470","severity":1,"message":"1552","line":82,"column":9,"nodeType":"1472","messageId":"1473","endLine":82,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1549","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1550","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1555"},{"ruleId":"1470","severity":1,"message":"1552","line":82,"column":9,"nodeType":"1472","messageId":"1473","endLine":82,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1492","severity":1,"message":"1556","line":19,"column":8,"nodeType":"1494","endLine":19,"endColumn":10,"suggestions":"1557"},{"ruleId":"1492","severity":1,"message":"1550","line":78,"column":5,"nodeType":"1494","endLine":78,"endColumn":7,"suggestions":"1558"},{"ruleId":"1470","severity":1,"message":"1549","line":2,"column":75,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":86},{"ruleId":"1470","severity":1,"message":"1559","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1480","line":4,"column":26,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1560","line":4,"column":40,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":59},{"ruleId":"1470","severity":1,"message":"1519","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1561","line":15,"column":25,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1562","line":21,"column":12,"nodeType":"1472","messageId":"1473","endLine":21,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1563","line":22,"column":12,"nodeType":"1472","messageId":"1473","endLine":22,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1564","line":8,"column":7,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1565","line":9,"column":7,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1566","line":38,"column":11,"nodeType":"1472","messageId":"1473","endLine":38,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1567","line":29,"column":11,"nodeType":"1472","messageId":"1473","endLine":29,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1568","line":32,"column":12,"nodeType":"1472","messageId":"1473","endLine":32,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1569","line":32,"column":29,"nodeType":"1472","messageId":"1473","endLine":32,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1570","line":35,"column":12,"nodeType":"1472","messageId":"1473","endLine":35,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1571","line":35,"column":22,"nodeType":"1472","messageId":"1473","endLine":35,"endColumn":33},{"ruleId":"1470","severity":1,"message":"1572","line":36,"column":12,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1573","line":36,"column":26,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":41},{"ruleId":"1492","severity":1,"message":"1574","line":46,"column":8,"nodeType":"1494","endLine":46,"endColumn":21,"suggestions":"1575"},{"ruleId":"1492","severity":1,"message":"1576","line":22,"column":8,"nodeType":"1494","endLine":22,"endColumn":18,"suggestions":"1577"},{"ruleId":"1470","severity":1,"message":"1578","line":5,"column":19,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":28},{"ruleId":"1470","severity":1,"message":"1534","line":2,"column":18,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1479","line":2,"column":24,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1532","line":2,"column":41,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":44},{"ruleId":"1470","severity":1,"message":"1533","line":2,"column":46,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":49},{"ruleId":"1470","severity":1,"message":"1579","line":4,"column":8,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1580","line":8,"column":11,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1547","line":2,"column":40,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":45},{"ruleId":"1470","severity":1,"message":"1581","line":7,"column":8,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1582","line":24,"column":6,"nodeType":"1494","endLine":24,"endColumn":8,"suggestions":"1583"},{"ruleId":"1470","severity":1,"message":"1584","line":4,"column":8,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1585","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1586","line":6,"column":8,"nodeType":"1472","messageId":"1473","endLine":6,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1529","line":11,"column":9,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":16,"column":10,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1587","line":17,"column":10,"nodeType":"1472","messageId":"1473","endLine":17,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1588","line":17,"column":24,"nodeType":"1472","messageId":"1473","endLine":17,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1589","line":18,"column":10,"nodeType":"1472","messageId":"1473","endLine":18,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1590","line":18,"column":27,"nodeType":"1472","messageId":"1473","endLine":18,"endColumn":45},{"ruleId":"1470","severity":1,"message":"1591","line":48,"column":9,"nodeType":"1472","messageId":"1473","endLine":48,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1592","line":66,"column":9,"nodeType":"1472","messageId":"1473","endLine":66,"endColumn":34},{"ruleId":"1470","severity":1,"message":"1593","line":98,"column":9,"nodeType":"1472","messageId":"1473","endLine":98,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1490","line":115,"column":9,"nodeType":"1472","messageId":"1473","endLine":115,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1585","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1529","line":8,"column":9,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1517","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1594","line":13,"column":20,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1587","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1589","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1518","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1595","line":32,"column":8,"nodeType":"1494","endLine":32,"endColumn":10,"suggestions":"1596"},{"ruleId":"1470","severity":1,"message":"1591","line":34,"column":11,"nodeType":"1472","messageId":"1473","endLine":34,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1593","line":65,"column":11,"nodeType":"1472","messageId":"1473","endLine":65,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1490","line":83,"column":11,"nodeType":"1472","messageId":"1473","endLine":83,"endColumn":18},{"ruleId":"1476","severity":1,"message":"1485","line":253,"column":21,"nodeType":"1478","endLine":253,"endColumn":24},{"ruleId":"1476","severity":1,"message":"1485","line":254,"column":21,"nodeType":"1478","endLine":254,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1597","line":3,"column":28,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":40},{"ruleId":"1470","severity":1,"message":"1598","line":3,"column":42,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1585","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1529","line":9,"column":9,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1561","line":13,"column":25,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1517","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1594","line":14,"column":20,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1587","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1589","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1518","line":17,"column":12,"nodeType":"1472","messageId":"1473","endLine":17,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1595","line":33,"column":8,"nodeType":"1494","endLine":33,"endColumn":10,"suggestions":"1599"},{"ruleId":"1470","severity":1,"message":"1593","line":61,"column":11,"nodeType":"1472","messageId":"1473","endLine":61,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1490","line":79,"column":11,"nodeType":"1472","messageId":"1473","endLine":79,"endColumn":18},{"ruleId":"1476","severity":1,"message":"1485","line":249,"column":21,"nodeType":"1478","endLine":249,"endColumn":24},{"ruleId":"1476","severity":1,"message":"1485","line":250,"column":21,"nodeType":"1478","endLine":250,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1487","line":5,"column":10,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1597","line":5,"column":19,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1600","line":5,"column":33,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":40},{"ruleId":"1470","severity":1,"message":"1598","line":5,"column":42,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1479","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1601","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1602"},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1500","line":6,"column":42,"nodeType":"1472","messageId":"1473","endLine":6,"endColumn":52},{"ruleId":"1470","severity":1,"message":"1603","line":64,"column":11,"nodeType":"1472","messageId":"1473","endLine":64,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1604","line":35,"column":12,"nodeType":"1472","messageId":"1473","endLine":35,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1605","line":37,"column":12,"nodeType":"1472","messageId":"1473","endLine":37,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1606","line":37,"column":29,"nodeType":"1472","messageId":"1473","endLine":37,"endColumn":47},{"ruleId":"1470","severity":1,"message":"1490","line":71,"column":11,"nodeType":"1472","messageId":"1473","endLine":71,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1607","line":123,"column":11,"nodeType":"1472","messageId":"1473","endLine":123,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1608","line":2,"column":30,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1488","line":5,"column":8,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1518","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1513","line":16,"column":8,"nodeType":"1494","endLine":16,"endColumn":10,"suggestions":"1609"},{"ruleId":"1470","severity":1,"message":"1518","line":9,"column":12,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1610","line":20,"column":8,"nodeType":"1494","endLine":20,"endColumn":30,"suggestions":"1611"},{"ruleId":"1492","severity":1,"message":"1612","line":145,"column":8,"nodeType":"1494","endLine":145,"endColumn":10,"suggestions":"1613"},{"ruleId":"1470","severity":1,"message":"1500","line":2,"column":15,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1608","line":5,"column":10,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1501","line":5,"column":17,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1614","line":5,"column":29,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1515","line":5,"column":37,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1615","line":7,"column":22,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":36},{"ruleId":"1492","severity":1,"message":"1616","line":70,"column":8,"nodeType":"1494","endLine":70,"endColumn":10,"suggestions":"1617"},{"ruleId":"1492","severity":1,"message":"1618","line":90,"column":8,"nodeType":"1494","endLine":90,"endColumn":36,"suggestions":"1619"},{"ruleId":"1492","severity":1,"message":"1550","line":78,"column":5,"nodeType":"1494","endLine":78,"endColumn":7,"suggestions":"1620"},{"ruleId":"1470","severity":1,"message":"1621","line":10,"column":19,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1622","line":16,"column":9,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1623","line":163,"column":9,"nodeType":"1472","messageId":"1473","endLine":163,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1554","line":183,"column":9,"nodeType":"1472","messageId":"1473","endLine":183,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1553","line":198,"column":9,"nodeType":"1472","messageId":"1473","endLine":198,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1624","line":31,"column":17,"nodeType":"1472","messageId":"1473","endLine":31,"endColumn":30},{"ruleId":"1470","severity":1,"message":"1518","line":10,"column":12,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1500","line":2,"column":15,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1608","line":5,"column":10,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1501","line":5,"column":17,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1614","line":5,"column":29,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":35},{"ruleId":"1470","severity":1,"message":"1515","line":5,"column":37,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1615","line":7,"column":22,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":36},{"ruleId":"1492","severity":1,"message":"1625","line":41,"column":8,"nodeType":"1494","endLine":41,"endColumn":10,"suggestions":"1626"},{"ruleId":"1492","severity":1,"message":"1618","line":97,"column":8,"nodeType":"1494","endLine":97,"endColumn":36,"suggestions":"1627"},{"ruleId":"1492","severity":1,"message":"1628","line":14,"column":8,"nodeType":"1494","endLine":14,"endColumn":10,"suggestions":"1629"},{"ruleId":"1492","severity":1,"message":"1630","line":142,"column":8,"nodeType":"1494","endLine":142,"endColumn":10,"suggestions":"1631"},{"ruleId":"1470","severity":1,"message":"1632","line":7,"column":12,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":26},{"ruleId":"1492","severity":1,"message":"1633","line":12,"column":8,"nodeType":"1494","endLine":12,"endColumn":17,"suggestions":"1634"},{"ruleId":"1470","severity":1,"message":"1622","line":25,"column":11,"nodeType":"1472","messageId":"1473","endLine":25,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1635","line":36,"column":11,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1636","line":1,"column":27,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1637","line":3,"column":74,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":90},{"ruleId":"1470","severity":1,"message":"1638","line":5,"column":9,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1639","line":10,"column":7,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1640","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1641","line":14,"column":24,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1642","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1643","line":15,"column":22,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":33},{"ruleId":"1470","severity":1,"message":"1585","line":3,"column":10,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1529","line":8,"column":9,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1517","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1594","line":15,"column":20,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1587","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1589","line":18,"column":12,"nodeType":"1472","messageId":"1473","endLine":18,"endColumn":27},{"ruleId":"1492","severity":1,"message":"1595","line":28,"column":8,"nodeType":"1494","endLine":28,"endColumn":10,"suggestions":"1644"},{"ruleId":"1470","severity":1,"message":"1591","line":30,"column":11,"nodeType":"1472","messageId":"1473","endLine":30,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1593","line":62,"column":11,"nodeType":"1472","messageId":"1473","endLine":62,"endColumn":25},{"ruleId":"1492","severity":1,"message":"1618","line":17,"column":41,"nodeType":"1494","endLine":17,"endColumn":43,"suggestions":"1645"},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1646","line":5,"column":7,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1585","line":2,"column":32,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1529","line":7,"column":7,"nodeType":"1472","messageId":"1473","endLine":7,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1519","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1517","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1594","line":13,"column":20,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1587","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1589","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1490","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1518","line":17,"column":12,"nodeType":"1472","messageId":"1473","endLine":17,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1595","line":35,"column":8,"nodeType":"1494","endLine":35,"endColumn":10,"suggestions":"1647"},{"ruleId":"1470","severity":1,"message":"1591","line":36,"column":11,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1593","line":67,"column":11,"nodeType":"1472","messageId":"1473","endLine":67,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1646","line":5,"column":7,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1547","line":3,"column":24,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1529","line":8,"column":9,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1636","line":1,"column":27,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":36},{"ruleId":"1470","severity":1,"message":"1487","line":3,"column":10,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1518","line":9,"column":12,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1648","line":9,"column":21,"nodeType":"1472","messageId":"1473","endLine":9,"endColumn":31},{"ruleId":"1492","severity":1,"message":"1649","line":20,"column":41,"nodeType":"1494","endLine":20,"endColumn":43,"suggestions":"1650"},{"ruleId":"1492","severity":1,"message":"1651","line":26,"column":8,"nodeType":"1494","endLine":26,"endColumn":10,"suggestions":"1652"},{"ruleId":"1470","severity":1,"message":"1653","line":132,"column":14,"nodeType":"1472","messageId":"1473","endLine":132,"endColumn":28},{"ruleId":"1470","severity":1,"message":"1479","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1601","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1654"},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1655","line":1,"column":17,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1479","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1601","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1656"},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1492","severity":1,"message":"1651","line":26,"column":8,"nodeType":"1494","endLine":26,"endColumn":10,"suggestions":"1657"},{"ruleId":"1470","severity":1,"message":"1653","line":132,"column":14,"nodeType":"1472","messageId":"1473","endLine":132,"endColumn":28},{"ruleId":"1470","severity":1,"message":"1598","line":3,"column":36,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":50},{"ruleId":"1470","severity":1,"message":"1658","line":11,"column":11,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1562","line":21,"column":12,"nodeType":"1472","messageId":"1473","endLine":21,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1659","line":24,"column":12,"nodeType":"1472","messageId":"1473","endLine":24,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1660","line":25,"column":12,"nodeType":"1472","messageId":"1473","endLine":25,"endColumn":25},{"ruleId":"1492","severity":1,"message":"1661","line":36,"column":8,"nodeType":"1494","endLine":36,"endColumn":10,"suggestions":"1662"},{"ruleId":"1492","severity":1,"message":"1663","line":40,"column":8,"nodeType":"1494","endLine":40,"endColumn":17,"suggestions":"1664"},{"ruleId":"1470","severity":1,"message":"1665","line":47,"column":15,"nodeType":"1472","messageId":"1473","endLine":47,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1666","line":70,"column":11,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1667","line":152,"column":11,"nodeType":"1472","messageId":"1473","endLine":152,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1668","line":171,"column":11,"nodeType":"1472","messageId":"1473","endLine":171,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1669","line":260,"column":26,"nodeType":"1472","messageId":"1473","endLine":260,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1670","line":2,"column":24,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1655","line":1,"column":17,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":26},{"ruleId":"1470","severity":1,"message":"1671","line":12,"column":10,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1672","line":12,"column":16,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1673","line":13,"column":9,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1674","line":70,"column":9,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":37,"column":9,"nodeType":"1472","messageId":"1473","endLine":37,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1675","line":4,"column":8,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":12},{"ruleId":"1470","severity":1,"message":"1600","line":5,"column":10,"nodeType":"1472","messageId":"1473","endLine":5,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1676","line":20,"column":8,"nodeType":"1494","endLine":20,"endColumn":10,"suggestions":"1677"},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1479","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1601","line":78,"column":6,"nodeType":"1494","endLine":78,"endColumn":8,"suggestions":"1678"},{"ruleId":"1470","severity":1,"message":"1553","line":139,"column":9,"nodeType":"1472","messageId":"1473","endLine":139,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1554","line":153,"column":9,"nodeType":"1472","messageId":"1473","endLine":153,"endColumn":23},{"ruleId":"1492","severity":1,"message":"1679","line":40,"column":8,"nodeType":"1494","endLine":40,"endColumn":17,"suggestions":"1680"},{"ruleId":"1470","severity":1,"message":"1681","line":117,"column":11,"nodeType":"1472","messageId":"1473","endLine":117,"endColumn":20},{"ruleId":"1492","severity":1,"message":"1682","line":59,"column":8,"nodeType":"1494","endLine":59,"endColumn":10,"suggestions":"1683"},{"ruleId":"1470","severity":1,"message":"1585","line":2,"column":33,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1529","line":8,"column":9,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1517","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":18},{"ruleId":"1470","severity":1,"message":"1594","line":13,"column":20,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1587","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1589","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1518","line":16,"column":12,"nodeType":"1472","messageId":"1473","endLine":16,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1490","line":17,"column":12,"nodeType":"1472","messageId":"1473","endLine":17,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1595","line":35,"column":8,"nodeType":"1494","endLine":35,"endColumn":10,"suggestions":"1684"},{"ruleId":"1470","severity":1,"message":"1591","line":36,"column":11,"nodeType":"1472","messageId":"1473","endLine":36,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1593","line":67,"column":11,"nodeType":"1472","messageId":"1473","endLine":67,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1585","line":3,"column":10,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1597","line":4,"column":28,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":40},{"ruleId":"1470","severity":1,"message":"1598","line":4,"column":42,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":56},{"ruleId":"1470","severity":1,"message":"1529","line":8,"column":9,"nodeType":"1472","messageId":"1473","endLine":8,"endColumn":15},{"ruleId":"1470","severity":1,"message":"1519","line":14,"column":12,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":23},{"ruleId":"1470","severity":1,"message":"1561","line":14,"column":25,"nodeType":"1472","messageId":"1473","endLine":14,"endColumn":39},{"ruleId":"1470","severity":1,"message":"1587","line":15,"column":12,"nodeType":"1472","messageId":"1473","endLine":15,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1685","line":37,"column":11,"nodeType":"1472","messageId":"1473","endLine":37,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1593","line":53,"column":11,"nodeType":"1472","messageId":"1473","endLine":53,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1492","severity":1,"message":"1610","line":11,"column":8,"nodeType":"1494","endLine":11,"endColumn":10,"suggestions":"1686"},{"ruleId":"1470","severity":1,"message":"1598","line":3,"column":36,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":50},{"ruleId":"1470","severity":1,"message":"1658","line":11,"column":11,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1562","line":21,"column":12,"nodeType":"1472","messageId":"1473","endLine":21,"endColumn":20},{"ruleId":"1470","severity":1,"message":"1659","line":24,"column":12,"nodeType":"1472","messageId":"1473","endLine":24,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1660","line":25,"column":12,"nodeType":"1472","messageId":"1473","endLine":25,"endColumn":25},{"ruleId":"1492","severity":1,"message":"1661","line":36,"column":8,"nodeType":"1494","endLine":36,"endColumn":10,"suggestions":"1687"},{"ruleId":"1492","severity":1,"message":"1663","line":40,"column":8,"nodeType":"1494","endLine":40,"endColumn":17,"suggestions":"1688"},{"ruleId":"1470","severity":1,"message":"1665","line":47,"column":15,"nodeType":"1472","messageId":"1473","endLine":47,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1666","line":70,"column":11,"nodeType":"1472","messageId":"1473","endLine":70,"endColumn":24},{"ruleId":"1470","severity":1,"message":"1667","line":152,"column":11,"nodeType":"1472","messageId":"1473","endLine":152,"endColumn":27},{"ruleId":"1470","severity":1,"message":"1668","line":171,"column":11,"nodeType":"1472","messageId":"1473","endLine":171,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1669","line":260,"column":26,"nodeType":"1472","messageId":"1473","endLine":260,"endColumn":41},{"ruleId":"1470","severity":1,"message":"1689","line":3,"column":33,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":52},{"ruleId":"1492","severity":1,"message":"1690","line":27,"column":8,"nodeType":"1494","endLine":27,"endColumn":21,"suggestions":"1691"},{"ruleId":"1492","severity":1,"message":"1690","line":31,"column":8,"nodeType":"1494","endLine":31,"endColumn":32,"suggestions":"1692"},{"ruleId":"1470","severity":1,"message":"1534","line":1,"column":10,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":14},{"ruleId":"1470","severity":1,"message":"1547","line":2,"column":75,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":80},{"ruleId":"1470","severity":1,"message":"1560","line":3,"column":10,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1480","line":3,"column":31,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":43},{"ruleId":"1470","severity":1,"message":"1693","line":40,"column":11,"nodeType":"1472","messageId":"1473","endLine":40,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1679","line":34,"column":8,"nodeType":"1494","endLine":34,"endColumn":10,"suggestions":"1694"},{"ruleId":"1470","severity":1,"message":"1534","line":2,"column":18,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":22},{"ruleId":"1470","severity":1,"message":"1600","line":10,"column":10,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1578","line":10,"column":19,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":28},{"ruleId":"1492","severity":1,"message":"1695","line":24,"column":8,"nodeType":"1494","endLine":24,"endColumn":10,"suggestions":"1696"},{"ruleId":"1492","severity":1,"message":"1695","line":28,"column":8,"nodeType":"1494","endLine":28,"endColumn":10,"suggestions":"1697"},{"ruleId":"1492","severity":1,"message":"1690","line":518,"column":8,"nodeType":"1494","endLine":518,"endColumn":21,"suggestions":"1698"},{"ruleId":"1470","severity":1,"message":"1699","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":13},{"ruleId":"1470","severity":1,"message":"1700","line":10,"column":11,"nodeType":"1472","messageId":"1473","endLine":10,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1701","line":20,"column":11,"nodeType":"1472","messageId":"1473","endLine":20,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1702","line":30,"column":11,"nodeType":"1472","messageId":"1473","endLine":30,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1703","line":41,"column":11,"nodeType":"1472","messageId":"1473","endLine":41,"endColumn":17},{"ruleId":"1470","severity":1,"message":"1704","line":63,"column":12,"nodeType":"1472","messageId":"1473","endLine":63,"endColumn":25},{"ruleId":"1492","severity":1,"message":"1695","line":27,"column":8,"nodeType":"1494","endLine":27,"endColumn":10,"suggestions":"1705"},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1707"},{"ruleId":"1525","severity":1,"message":"1526","line":34,"column":35,"nodeType":"1527","messageId":"1528","endLine":34,"endColumn":37},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1614","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":16},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1708","line":3,"column":31,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":38},{"ruleId":"1470","severity":1,"message":"1597","line":4,"column":10,"nodeType":"1472","messageId":"1473","endLine":4,"endColumn":22},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1709"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":17,"column":8,"nodeType":"1494","endLine":17,"endColumn":10,"suggestions":"1710"},{"ruleId":"1470","severity":1,"message":"1518","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1711"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1712"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1713"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1714"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":12,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1597","line":3,"column":19,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":31},{"ruleId":"1492","severity":1,"message":"1715","line":14,"column":8,"nodeType":"1494","endLine":14,"endColumn":10,"suggestions":"1716"},{"ruleId":"1470","severity":1,"message":"1717","line":24,"column":12,"nodeType":"1472","messageId":"1473","endLine":24,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1718","line":24,"column":21,"nodeType":"1472","messageId":"1473","endLine":24,"endColumn":31},{"ruleId":"1470","severity":1,"message":"1518","line":11,"column":12,"nodeType":"1472","messageId":"1473","endLine":11,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":2,"column":49,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":54},{"ruleId":"1492","severity":1,"message":"1706","line":17,"column":8,"nodeType":"1494","endLine":17,"endColumn":10,"suggestions":"1719"},{"ruleId":"1470","severity":1,"message":"1720","line":62,"column":11,"nodeType":"1472","messageId":"1473","endLine":62,"endColumn":29},{"ruleId":"1470","severity":1,"message":"1522","line":68,"column":11,"nodeType":"1472","messageId":"1473","endLine":68,"endColumn":19},{"ruleId":"1492","severity":1,"message":"1706","line":15,"column":8,"nodeType":"1494","endLine":15,"endColumn":10,"suggestions":"1721"},{"ruleId":"1470","severity":1,"message":"1518","line":12,"column":10,"nodeType":"1472","messageId":"1473","endLine":12,"endColumn":17},{"ruleId":"1492","severity":1,"message":"1618","line":11,"column":41,"nodeType":"1494","endLine":11,"endColumn":54,"suggestions":"1722"},{"ruleId":"1470","severity":1,"message":"1518","line":13,"column":12,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":19},{"ruleId":"1470","severity":1,"message":"1670","line":3,"column":16,"nodeType":"1472","messageId":"1473","endLine":3,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1723","line":18,"column":11,"nodeType":"1472","messageId":"1473","endLine":18,"endColumn":16},{"ruleId":"1492","severity":1,"message":"1706","line":34,"column":8,"nodeType":"1494","endLine":34,"endColumn":10,"suggestions":"1724"},{"ruleId":"1470","severity":1,"message":"1725","line":13,"column":11,"nodeType":"1472","messageId":"1473","endLine":13,"endColumn":20},{"ruleId":"1492","severity":1,"message":"1726","line":71,"column":8,"nodeType":"1494","endLine":71,"endColumn":22,"suggestions":"1727"},{"ruleId":"1470","severity":1,"message":"1728","line":73,"column":11,"nodeType":"1472","messageId":"1473","endLine":73,"endColumn":21},{"ruleId":"1470","severity":1,"message":"1729","line":1,"column":17,"nodeType":"1472","messageId":"1473","endLine":1,"endColumn":25},{"ruleId":"1470","severity":1,"message":"1585","line":2,"column":10,"nodeType":"1472","messageId":"1473","endLine":2,"endColumn":14},"no-native-reassign",["1730"],"no-negated-in-lhs",["1731"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'protocolo' is assigned a value but never used.","'momento' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Divider' is defined but never used.","'PlusOutlined' is defined but never used.","'profileForEdit' is assigned a value but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'Tag' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Table' is defined but never used.","'getData' is defined but never used.","'Loading' is defined but never used.","'isLoading' is assigned a value but never used.","'columns' is assigned a value but never used.","'GoogleOutlined' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getExpedientesData'. Either include it or remove the dependency array.","ArrayExpression",["1732"],"'List' is defined but never used.","'DetallesPaciente' is defined but never used.","'MobileOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'deleteData' is defined but never used.","'Popconfirm' is defined but never used.","'balance' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'createCorte' is assigned a value but never used.","'isEgresoModalOpen' is assigned a value but never used.","'showEgresoModal' is assigned a value but never used.","'lastFecha' is assigned a value but never used.","'setLastFecha' is assigned a value but never used.","'firstFecha' is assigned a value but never used.","'setFirstFecha' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getLastFechaCierre'. Either include it or remove the dependency array.",["1733"],"React Hook useEffect has a missing dependency: 'getIngresos'. Either include it or remove the dependency array.",["1734"],"'Select' is defined but never used.","'Switch' is defined but never used.","'medico' is assigned a value but never used.","'loading' is assigned a value but never used.","'medicosData' is assigned a value but never used.","'viewTipeMedics' is assigned a value but never used.","'handleDoctorChange' is assigned a value but never used.","'onChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'checkEncuesta'. Either include it or remove the dependency array.",["1735"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Option' is assigned a value but never used.",["1736"],["1737"],"'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'pesoEnabled' is assigned a value but never used.","'setPesoEnabled' is assigned a value but never used.","'apetitoEnabled' is assigned a value but never used.","'setApetitoEnabled' is assigned a value but never used.",["1738"],"'handleChange' is assigned a value but never used.",["1739"],"no-redeclare","'i' is already defined.","redeclared",["1740"],["1741"],"'Space' is defined but never used.",["1742"],"'InputNumber' is defined but never used.","React Hook useEffect has a missing dependency: 'props.perfil'. Either include it or remove the dependency array.",["1743"],"'onFinish' is assigned a value but never used.","'suffixSelector' is assigned a value but never used.","'onFinishFailed' is assigned a value but never used.",["1744"],"React Hook useEffect has a missing dependency: 'getProfileData'. Either include it or remove the dependency array.",["1745"],["1746"],"'UploadOutlined' is defined but never used.","'MinusCircleOutlined' is defined but never used.","'setMedicosData' is assigned a value but never used.","'isOnline' is assigned a value but never used.","'hospital' is assigned a value but never used.","'CLIENT_SECRET' is assigned a value but never used.","'REDIRECT_URI' is assigned a value but never used.","'addEvent' is assigned a value but never used.","'editarNota' is assigned a value but never used.","'editingEntradas' is assigned a value but never used.","'setEditingEntradas' is assigned a value but never used.","'notasLen' is assigned a value but never used.","'setNotasLen' is assigned a value but never used.","'counterPilot' is assigned a value but never used.","'setCounterPilot' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNotasData'. Either include it or remove the dependency array.",["1747"],"React Hook useEffect has a missing dependency: 'getHistoriaData'. Either include it or remove the dependency array.",["1748"],"'IMAGE_API' is defined but never used.","'DetallesFisioModal' is defined but never used.","'TYPE' is assigned a value but never used.","'RegisterFisio' is defined but never used.","React Hook useEffect has a missing dependency: 'props.paciente'. Either include it or remove the dependency array.",["1749"],"'PostTraumaticoClinicoResults' is defined but never used.","'Form' is defined but never used.","'LoadingIndicator' is defined but never used.","'countersData' is assigned a value but never used.","'setCountersData' is assigned a value but never used.","'loadingCounters' is assigned a value but never used.","'setLoadingCounters' is assigned a value but never used.","'getDoctorsData' is assigned a value but never used.","'getEcuestasDataByHospital' is assigned a value but never used.","'counterColumns' is assigned a value but never used.","'setMedico' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEncuestasData'. Either include it or remove the dependency array.",["1750"],"'sendDataBody' is defined but never used.","'ids_hospitales' is defined but never used.",["1751"],"'usuario' is defined but never used.","React Hook useEffect has a missing dependency: 'props.medico'. Either include it or remove the dependency array.",["1752"],"'MatchPatient' is assigned a value but never used.","'receptionist' is assigned a value but never used.","'loadinSchedules' is assigned a value but never used.","'setLoadinSchedules' is assigned a value but never used.","'getSchedules' is assigned a value but never used.","'Modal' is defined but never used.",["1753"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["1754"],"React Hook useEffect has a missing dependency: 'idHospital'. Either include it or remove the dependency array.",["1755"],"'Button' is defined but never used.","'CreateCitaForm' is defined but never used.","React Hook useEffect has a missing dependency: 'id_hospital'. Either include it or remove the dependency array.",["1756"],"React Hook useEffect has a missing dependency: 'getCitasData'. Either include it or remove the dependency array.",["1757"],["1758"],"'setUsuario' is assigned a value but never used.","'showModal' is assigned a value but never used.","'onFinishEdit' is assigned a value but never used.","'listOfDeudors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPatientsData'. Either include it or remove the dependency array.",["1759"],["1760"],"React Hook useEffect has a missing dependency: 'props.balanceForEdit'. Either include it or remove the dependency array.",["1761"],"React Hook useEffect has missing dependencies: 'hospitalData', 'idHospital', and 'ingresos'. Either include them or remove the dependency array.",["1762"],"'initialService' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'profileData'. Either include it or remove the dependency array.",["1763"],"'gridStyle2' is assigned a value but never used.","'useEffect' is defined but never used.","'DownloadOutlined' is defined but never used.","'TextArea' is assigned a value but never used.","'numbers' is assigned a value but never used.","'newEstudio' is assigned a value but never used.","'setNewEstudio' is assigned a value but never used.","'evoImage' is assigned a value but never used.","'setEvoImage' is assigned a value but never used.",["1764"],["1765"],"'pretungas' is assigned a value but never used.",["1766"],"'setLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDoctorsData'. Either include it or remove the dependency array.",["1767"],"React Hook useEffect has a missing dependency: 'getPacientes'. Either include it or remove the dependency array.",["1768"],"'DetalleUsuario' is defined but never used.",["1769"],"'Component' is defined but never used.",["1770"],["1771"],"'isCreating' is assigned a value but never used.","'costoBaseCita' is assigned a value but never used.","'usesCostoBase' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleMedicochange', 'handlePatientChange', and 'props.cita'. Either include them or remove the dependency array.",["1772"],"React Hook useEffect has missing dependencies: 'handleMedicochange' and 'props.cita'. Either include them or remove the dependency array.",["1773"],"'tipo_pago' is assigned a value but never used.","'createBalance' is assigned a value but never used.","'onSwitchCosoBase' is assigned a value but never used.","'paymentOptions' is assigned a value but never used.","'setEnableCreate' is assigned a value but never used.","'Input' is defined but never used.","'view' is assigned a value but never used.","'setview' is assigned a value but never used.","'views' is assigned a value but never used.","'tablaPacientes' is assigned a value but never used.","'Logo' is defined but never used.","React Hook useEffect has missing dependencies: 'datosPaciente' and 'receta'. Either include them or remove the dependency array.",["1774"],["1775"],"React Hook useEffect has a missing dependency: 'getRecetasData'. Either include it or remove the dependency array.",["1776"],"'gridStyle' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.nota'. Either include it or remove the dependency array.",["1777"],["1778"],"'getCounters' is assigned a value but never used.",["1779"],["1780"],["1781"],"'AccountBookOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'getExpedienteData'. Either include it or remove the dependency array.",["1782"],["1783"],"'dolorTypes' is assigned a value but never used.",["1784"],"React Hook useEffect has missing dependencies: 'hospitalData' and 'idHospital'. Either include them or remove the dependency array.",["1785"],["1786"],["1787"],"'Pie' is defined but never used.","'data1' is assigned a value but never used.","'data2' is assigned a value but never used.","'data3' is assigned a value but never used.","'config' is assigned a value but never used.","'statisticData' is assigned a value but never used.",["1788"],"React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["1789"],"'message' is defined but never used.",["1790"],["1791"],["1792"],["1793"],["1794"],["1795"],"React Hook useEffect has a missing dependency: 'id_medico'. Either include it or remove the dependency array.",["1796"],"'medicos' is assigned a value but never used.","'setMedicos' is assigned a value but never used.",["1797"],"'onDocsFinishFailed' is assigned a value but never used.",["1798"],["1799"],"'names' is assigned a value but never used.",["1800"],"'fillColor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["1801"],"'handleSave' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1802","fix":"1803"},{"desc":"1804","fix":"1805"},{"desc":"1806","fix":"1807"},{"desc":"1808","fix":"1809"},{"desc":"1808","fix":"1810"},{"desc":"1808","fix":"1811"},{"desc":"1808","fix":"1812"},{"desc":"1808","fix":"1813"},{"desc":"1808","fix":"1814"},{"desc":"1808","fix":"1815"},{"desc":"1808","fix":"1816"},{"desc":"1817","fix":"1818"},{"desc":"1817","fix":"1819"},{"desc":"1820","fix":"1821"},{"desc":"1817","fix":"1822"},{"desc":"1823","fix":"1824"},{"desc":"1825","fix":"1826"},{"desc":"1827","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1829","fix":"1831"},{"desc":"1832","fix":"1833"},{"desc":"1834","fix":"1835"},{"desc":"1836","fix":"1837"},{"desc":"1838","fix":"1839"},{"desc":"1840","fix":"1841"},{"desc":"1842","fix":"1843"},{"desc":"1817","fix":"1844"},{"desc":"1845","fix":"1846"},{"desc":"1842","fix":"1847"},{"desc":"1848","fix":"1849"},{"desc":"1850","fix":"1851"},{"desc":"1852","fix":"1853"},{"desc":"1829","fix":"1854"},{"desc":"1855","fix":"1856"},{"desc":"1829","fix":"1857"},{"desc":"1858","fix":"1859"},{"desc":"1860","fix":"1861"},{"desc":"1832","fix":"1862"},{"desc":"1832","fix":"1863"},{"desc":"1860","fix":"1864"},{"desc":"1865","fix":"1866"},{"desc":"1867","fix":"1868"},{"desc":"1869","fix":"1870"},{"desc":"1832","fix":"1871"},{"desc":"1872","fix":"1873"},{"desc":"1874","fix":"1875"},{"desc":"1829","fix":"1876"},{"desc":"1877","fix":"1878"},{"desc":"1865","fix":"1879"},{"desc":"1867","fix":"1880"},{"desc":"1881","fix":"1882"},{"desc":"1883","fix":"1884"},{"desc":"1885","fix":"1886"},{"desc":"1887","fix":"1888"},{"desc":"1887","fix":"1889"},{"desc":"1881","fix":"1890"},{"desc":"1887","fix":"1891"},{"desc":"1892","fix":"1893"},{"desc":"1892","fix":"1894"},{"desc":"1892","fix":"1895"},{"desc":"1892","fix":"1896"},{"desc":"1892","fix":"1897"},{"desc":"1892","fix":"1898"},{"desc":"1892","fix":"1899"},{"desc":"1900","fix":"1901"},{"desc":"1892","fix":"1902"},{"desc":"1892","fix":"1903"},{"desc":"1904","fix":"1905"},{"desc":"1892","fix":"1906"},{"desc":"1907","fix":"1908"},"Update the dependencies array to be: [getExpedientesData, id_paciente]",{"range":"1909","text":"1910"},"Update the dependencies array to be: [getLastFechaCierre]",{"range":"1911","text":"1912"},"Update the dependencies array to be: [getIngresos, lastFecha]",{"range":"1913","text":"1914"},"Update the dependencies array to be: [checkEncuesta]",{"range":"1915","text":"1916"},{"range":"1917","text":"1916"},{"range":"1918","text":"1916"},{"range":"1919","text":"1916"},{"range":"1920","text":"1916"},{"range":"1921","text":"1916"},{"range":"1922","text":"1916"},{"range":"1923","text":"1916"},"Update the dependencies array to be: [props.perfil]",{"range":"1924","text":"1925"},{"range":"1926","text":"1925"},"Update the dependencies array to be: [getProfileData]",{"range":"1927","text":"1928"},{"range":"1929","text":"1925"},"Update the dependencies array to be: [getNotasData, id_paciente]",{"range":"1930","text":"1931"},"Update the dependencies array to be: [getHistoriaData, historia]",{"range":"1932","text":"1933"},"Update the dependencies array to be: [props.paciente]",{"range":"1934","text":"1935"},"Update the dependencies array to be: [getEncuestasData]",{"range":"1936","text":"1937"},{"range":"1938","text":"1937"},"Update the dependencies array to be: [props.medico]",{"range":"1939","text":"1940"},"Update the dependencies array to be: [getIngresos]",{"range":"1941","text":"1942"},"Update the dependencies array to be: [props, props.balanceForEdit]",{"range":"1943","text":"1944"},"Update the dependencies array to be: [idHospital]",{"range":"1945","text":"1946"},"Update the dependencies array to be: [id_hospital]",{"range":"1947","text":"1948"},"Update the dependencies array to be: [serviceList, pacientesData, getCitasData]",{"range":"1949","text":"1950"},{"range":"1951","text":"1925"},"Update the dependencies array to be: [getPatientsData]",{"range":"1952","text":"1953"},{"range":"1954","text":"1950"},"Update the dependencies array to be: [props.balanceForEdit]",{"range":"1955","text":"1956"},"Update the dependencies array to be: [hospitalData, idHospital, ingresos]",{"range":"1957","text":"1958"},"Update the dependencies array to be: [profileData, service]",{"range":"1959","text":"1960"},{"range":"1961","text":"1937"},"Update the dependencies array to be: [getCitasData]",{"range":"1962","text":"1963"},{"range":"1964","text":"1937"},"Update the dependencies array to be: [getDoctorsData]",{"range":"1965","text":"1966"},"Update the dependencies array to be: [getPacientes]",{"range":"1967","text":"1968"},{"range":"1969","text":"1940"},{"range":"1970","text":"1940"},{"range":"1971","text":"1968"},"Update the dependencies array to be: [handleMedicochange, handlePatientChange, props.cita]",{"range":"1972","text":"1973"},"Update the dependencies array to be: [handleMedicochange, medicos, props.cita]",{"range":"1974","text":"1975"},"Update the dependencies array to be: [datosPaciente, receta]",{"range":"1976","text":"1977"},{"range":"1978","text":"1940"},"Update the dependencies array to be: [getRecetasData, recetas]",{"range":"1979","text":"1980"},"Update the dependencies array to be: [props.nota]",{"range":"1981","text":"1982"},{"range":"1983","text":"1937"},"Update the dependencies array to be: [props]",{"range":"1984","text":"1985"},{"range":"1986","text":"1973"},{"range":"1987","text":"1975"},"Update the dependencies array to be: [getExpedienteData, id_paciente]",{"range":"1988","text":"1989"},"Update the dependencies array to be: [addExpedienteModalOpen, getExpedienteData]",{"range":"1990","text":"1991"},"Update the dependencies array to be: [getRecetasData]",{"range":"1992","text":"1993"},"Update the dependencies array to be: [hospitalData, idHospital]",{"range":"1994","text":"1995"},{"range":"1996","text":"1995"},{"range":"1997","text":"1989"},{"range":"1998","text":"1995"},"Update the dependencies array to be: [init]",{"range":"1999","text":"2000"},{"range":"2001","text":"2000"},{"range":"2002","text":"2000"},{"range":"2003","text":"2000"},{"range":"2004","text":"2000"},{"range":"2005","text":"2000"},{"range":"2006","text":"2000"},"Update the dependencies array to be: [id_medico]",{"range":"2007","text":"2008"},{"range":"2009","text":"2000"},{"range":"2010","text":"2000"},"Update the dependencies array to be: [getCitasData, isModalOpen]",{"range":"2011","text":"2012"},{"range":"2013","text":"2000"},"Update the dependencies array to be: [point, arrow, draw]",{"range":"2014","text":"2015"},[1493,1506],"[getExpedientesData, id_paciente]",[2401,2403],"[getLastFechaCierre]",[2461,2472],"[getIngresos, lastFecha]",[739,741],"[checkEncuesta]",[739,741],[692,694],[931,933],[940,942],[881,883],[840,842],[890,892],[1925,1927],"[props.perfil]",[1925,1927],[724,726],"[getProfileData]",[1920,1922],[1985,1998],"[getNotasData, id_paciente]",[784,794],"[getHistoriaData, historia]",[876,878],"[props.paciente]",[1642,1644],"[getEncuestasData]",[1717,1719],[1950,1952],"[props.medico]",[680,682],"[getIngresos]",[877,899],"[props, props.balanceForEdit]",[3592,3594],"[idHospital]",[2918,2920],"[id_hospital]",[3805,3833],"[serviceList, pacientesData, getCitasData]",[1907,1909],[1543,1545],"[getPatientsData]",[3937,3965],[631,633],"[props.balanceForEdit]",[3501,3503],"[hospitalData, idHospital, ingresos]",[470,479],"[profileData, service]",[1297,1299],[693,695],"[getCitasData]",[1716,1718],[720,722],"[getDoctorsData]",[1315,1317],"[getPacientes]",[1950,1952],[1950,1952],[1315,1317],[1453,1455],"[handleMedicochange, handlePatientChange, props.cita]",[1574,1583],"[handleMedicochange, medicos, props.cita]",[950,952],"[datosPaciente, receta]",[1950,1952],[2222,2231],"[getRecetasData, recetas]",[1393,1395],"[props.nota]",[1695,1697],[403,405],"[props]",[1432,1434],[1553,1562],[1073,1086],"[getExpedienteData, id_paciente]",[1150,1174],"[addExpedienteModalOpen, getExpedienteData]",[1902,1904],"[getRecetasData]",[886,888],"[hospitalData, idHospital]",[977,979],[25591,25604],[966,968],[674,676],"[init]",[676,678],[761,763],[671,673],[674,676],[671,673],[674,676],[522,524],"[id_medico]",[739,741],[676,678],[416,429],"[getCitasData, isModalOpen]",[1457,1459],[2571,2585],"[point, arrow, draw]"]