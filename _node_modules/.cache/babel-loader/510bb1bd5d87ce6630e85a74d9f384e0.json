{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Card,Button,Tabs,Row,Col,Modal,Space,message}from'antd';import{getData,API,usuario}from'../../resources';import{PlusOutlined}from'@ant-design/icons';import{NuevaNota}from'./nuevaNota';import DetalleReceta from'./detalleReceta';import LastCita from'./lastCita';import NotasEvolucion from'./notasEvolucion';import HojasEnfermeria from'./hojasEnfermeria';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function DetalleNota(props){const isDoctor=usuario&&usuario.rol&&usuario.rol==='Medico';const[notaData,setNotaData]=useState([]);const[notaLoading,setnotaLoading]=useState(true);const[notaForEdit,setNotaForEdit]=useState(\"\");// Add Nota Modal\nconst[isModalVisible,setIsModalVisible]=useState(false);const handleOk=()=>{setIsModalVisible(false);};const handleCancel=()=>{setIsModalVisible(false);};// End of Add Nota Modal\n// Edit Nota Modal\nconst[isEditModalVisible,setIsEditModalVisible]=useState(false);const handleEditOk=()=>{setIsEditModalVisible(false);};const handleEditCancel=()=>{setIsEditModalVisible(false);};const editarNota=async n=>{await setNotaForEdit(n);setIsEditModalVisible(true);};// End of Edit Nota Modal\n// Edit Nota fields\nconst[editingEntradas,setEditingEntradas]=useState(false);// const [editingDiagnostico, setEditingDiagnostico] = useState(false)\nconst[notasLen,setNotasLen]=useState(null);const[counterPilot,setCounterPilot]=useState(0);const id_paciente=props.paciente;useEffect(()=>{// console.log('Paciente received to detailNota: ', id_paciente)\nid_paciente?getNotasData():finishGet();},[id_paciente]);const getNotasData=async()=>{await getData(\"notas/\".concat(id_paciente)).then(rs=>{console.log('NotasData: ',rs);if(rs&&rs.length===0){createNota();}rs.forEach((nt,i)=>{nt.label='Nota'+(i+1);});setNotaData(rs);setnotaLoading(false);});};// if patient not contains notas\nconst finishGet=()=>{setNotaData([]);setnotaLoading(false);};const createNota=async()=>{let newNotaBody={id_usuario:id_paciente,id_medico:usuario._id,edad:1,talla:1,imc:1,peso:1,temperatura:1,presion_arterial:\"---/---\",frecuencia_cardiaca:1,frecuencia_respiratoria:1,estudios:[],Observaciones:\"\",recetas:[]};const newNota=await fetch(API+'notas/add',{method:'POST',body:JSON.stringify(newNotaBody),headers:{'Content-Type':'application/json'}}).then(res=>res.json()).then(response=>{message.success(response.message||response.error);// response.message && response.message === ''\nreturn response;}).catch(error=>console.error('Error:',error));// Add new nota to received notas\nprops.prevExpNotas.push(newNota.id_nota);//Update nota at expedient\nfetch(API+'expedientes/updateNotas/'+props.id_expediente,{method:'PUT',body:JSON.stringify({\"notas\":props.prevExpNotas}),headers:{'Content-Type':'application/json'}}).then(res=>res.json()).then(response=>{// console.log('Update Exp:', response);\nmessage.success(response.message||response.error);}).catch(error=>console.error('Error:',error)).finally(()=>{getNotasData();});};// const updateNota = (originalNota, field, newString) => {\n//     originalNota[field] = newString;\n//     console.log(originalNota)\n//     updateData(`notas/update/${originalNota._id}`, originalNota).then((rs) => { getNotasData() })\n// }\n// const onEntryFinish = (nota, values) => {\n//     console.log(values)\n//     console.log('Before:', nota)\n//     nota.entradas = [...nota.entradas, values];\n//     console.log('After:', nota)\n//     updateData(`notas/update/${nota._id}`, nota).then((rs) => {\n//         getNotasData()\n//     }).finally(() => setEditingEntradas(false))\n// }\n// const onEntryFinishFailed = (errorInfo) => {\n//     console.log('Failed:', errorInfo);\n// };\n// // Upload File For Estudios\n// const dragDropProps = {\n//     name: 'file',\n//     multiple: true,\n//     action: API + 'notas/estudios/upload', // Production\n//     onChange(info) {\n//         const { status } = info.file;\n//         if (status !== 'uploading') {\n//             console.log(info.file, info.fileList);\n//         }\n//         if (status === 'done') {\n//             message.success(`${info.file.name} file uploaded successfully.`);\n//             console.log('New Files: ', info.file.response.file)\n//             // setEstudiosFiles([...estudiosFiles, info.file.response.file])\n//         } else if (status === 'error') {\n//             message.error(`${info.file.name} file upload failed.`);\n//         }\n//     },\n//     onDrop(e) {\n//         console.log('Dropped files', e.dataTransfer.files);\n//     },\n// };\nconst items=notaData?notaData.map((nota,i)=>{return{label:\"Nota \".concat(i+1),key:nota._id,children:/*#__PURE__*/_jsxs(Row,{gutter:8,style:{backgroundColor:'white'},children:[/*#__PURE__*/_jsxs(Col,{span:6,children:[/*#__PURE__*/_jsx(DetalleReceta,{recetas:nota.recetas,id_nota:nota._id,paciente:props.paciente}),/*#__PURE__*/_jsx(LastCita,{paciente:id_paciente}),/*#__PURE__*/_jsx(HojasEnfermeria,{hojas_enfermeria:nota.hojas_enfermeria,id_nota:nota._id,datosPaciente:props.datosPaciente})]}),/*#__PURE__*/_jsx(Col,{span:18,children:/*#__PURE__*/_jsx(NotasEvolucion,{_notas_evolucion:nota.notas_evolucion,id_nota:nota._id})})]})};}).reverse():[];// return <div style={{backgroundColor: '#fff', padding: 16}}>\nreturn/*#__PURE__*/_jsxs(Card,{style:{marginTop:15},children:[/*#__PURE__*/_jsxs(Space,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Notas \"}),isDoctor&&/*#__PURE__*/_jsx(Button,{className:\"btnIconCentered\",onClick:createNota,size:\"small\",type:\"primary\",shape:\"circle\",icon:/*#__PURE__*/_jsx(PlusOutlined,{}),ghost:true})]}),notaLoading?/*#__PURE__*/_jsx(\"h5\",{children:\"Cargando Nota...\"}):/*#__PURE__*/_jsx(Tabs,{items:items}),/*#__PURE__*/_jsx(Modal,{title:\"Nueva Nota\",open:isModalVisible,onOk:handleOk,onCancel:handleCancel,width:680,footer:[],destroyOnClose:true,children:/*#__PURE__*/_jsx(NuevaNota,{id_expediente:props.id_expediente,paciente:id_paciente,prevExpNotas:props.prevExpNotas,setIsModalVisible:setIsModalVisible})}),/*#__PURE__*/_jsx(Modal,{title:\"Editar Nota\",open:isEditModalVisible,onOk:handleEditOk,onCancel:handleEditCancel,width:680,footer:[],destroyOnClose:true,children:/*#__PURE__*/_jsx(NuevaNota,{nota:notaForEdit,setIsModalVisible:setIsEditModalVisible})})]});}","map":{"version":3,"names":["React","useState","useEffect","Card","Button","Tabs","Row","Col","Modal","Space","message","getData","API","usuario","PlusOutlined","NuevaNota","DetalleReceta","LastCita","NotasEvolucion","HojasEnfermeria","jsx","_jsx","jsxs","_jsxs","DetalleNota","props","isDoctor","rol","notaData","setNotaData","notaLoading","setnotaLoading","notaForEdit","setNotaForEdit","isModalVisible","setIsModalVisible","handleOk","handleCancel","isEditModalVisible","setIsEditModalVisible","handleEditOk","handleEditCancel","editarNota","n","editingEntradas","setEditingEntradas","notasLen","setNotasLen","counterPilot","setCounterPilot","id_paciente","paciente","getNotasData","finishGet","concat","then","rs","console","log","length","createNota","forEach","nt","i","label","newNotaBody","id_usuario","id_medico","_id","edad","talla","imc","peso","temperatura","presion_arterial","frecuencia_cardiaca","frecuencia_respiratoria","estudios","Observaciones","recetas","newNota","fetch","method","body","JSON","stringify","headers","res","json","response","success","error","catch","prevExpNotas","push","id_nota","id_expediente","finally","items","map","nota","key","children","gutter","style","backgroundColor","span","hojas_enfermeria","datosPaciente","_notas_evolucion","notas_evolucion","reverse","marginTop","className","onClick","size","type","shape","icon","ghost","title","open","onOk","onCancel","width","footer","destroyOnClose"],"sources":["C:/Users/Gil/Documents/ReCreaMed/src/doctorViews/expedientes/detalleNota.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Tabs, Row, Col, Modal, Space, message } from 'antd';\r\nimport { getData, API, usuario } from '../../resources';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { NuevaNota } from './nuevaNota';\r\nimport DetalleReceta from './detalleReceta';\r\nimport LastCita from './lastCita'\r\nimport NotasEvolucion from './notasEvolucion';\r\nimport HojasEnfermeria from './hojasEnfermeria';\r\n\r\n\r\n\r\nexport default function DetalleNota(props) {\r\n\r\n    const isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\r\n\r\n    const [notaData, setNotaData] = useState([]);\r\n    const [notaLoading, setnotaLoading] = useState(true);\r\n    const [notaForEdit, setNotaForEdit] = useState(\"\")\r\n    // Add Nota Modal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const handleOk = () => { setIsModalVisible(false) };\r\n    const handleCancel = () => { setIsModalVisible(false) };\r\n    // End of Add Nota Modal\r\n    // Edit Nota Modal\r\n    const [isEditModalVisible, setIsEditModalVisible] = useState(false);\r\n    const handleEditOk = () => { setIsEditModalVisible(false) };\r\n    const handleEditCancel = () => { setIsEditModalVisible(false) };\r\n    const editarNota = async (n) => { await setNotaForEdit(n); setIsEditModalVisible(true) }\r\n    // End of Edit Nota Modal\r\n    // Edit Nota fields\r\n    const [editingEntradas, setEditingEntradas] = useState(false)\r\n    // const [editingDiagnostico, setEditingDiagnostico] = useState(false)\r\n\r\n    const [notasLen, setNotasLen] = useState(null)\r\n    const [counterPilot, setCounterPilot] = useState(0)\r\n\r\n    const id_paciente = props.paciente;\r\n\r\n    useEffect(() => {\r\n        // console.log('Paciente received to detailNota: ', id_paciente)\r\n        id_paciente ?\r\n            getNotasData()\r\n            :\r\n            finishGet()\r\n    }, [id_paciente])\r\n\r\n\r\n    const getNotasData = async () => {\r\n        await getData(`notas/${id_paciente}`).then(rs => {\r\n            console.log('NotasData: ', rs);\r\n            if (rs && rs.length === 0) {\r\n                createNota()\r\n            }\r\n\r\n            rs.forEach((nt, i) => {\r\n                nt.label = 'Nota' + (i + 1);\r\n            });\r\n\r\n            setNotaData(rs);\r\n            setnotaLoading(false)\r\n        })\r\n    }\r\n    // if patient not contains notas\r\n    const finishGet = () => { setNotaData([]); setnotaLoading(false); }\r\n\r\n    const createNota = async () => {\r\n        let newNotaBody = {\r\n            id_usuario: id_paciente,\r\n            id_medico: usuario._id,\r\n            edad: 1,\r\n            talla: 1,\r\n            imc: 1,\r\n            peso: 1,\r\n            temperatura: 1,\r\n            presion_arterial: \"---/---\",\r\n            frecuencia_cardiaca: 1,\r\n            frecuencia_respiratoria: 1,\r\n            estudios: [],\r\n            Observaciones: \"\",\r\n            recetas: []\r\n        }\r\n        const newNota = await fetch(API + 'notas/add', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newNotaBody),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                message.success(response.message || response.error);\r\n                // response.message && response.message === ''\r\n                return response;\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n        // Add new nota to received notas\r\n        props.prevExpNotas.push(newNota.id_nota)\r\n        //Update nota at expedient\r\n        fetch(API + 'expedientes/updateNotas/' + props.id_expediente, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \"notas\": props.prevExpNotas }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                // console.log('Update Exp:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n            .finally(() => {\r\n                getNotasData()\r\n            })\r\n    };\r\n\r\n\r\n\r\n    // const updateNota = (originalNota, field, newString) => {\r\n    //     originalNota[field] = newString;\r\n    //     console.log(originalNota)\r\n    //     updateData(`notas/update/${originalNota._id}`, originalNota).then((rs) => { getNotasData() })\r\n    // }\r\n    // const onEntryFinish = (nota, values) => {\r\n    //     console.log(values)\r\n    //     console.log('Before:', nota)\r\n    //     nota.entradas = [...nota.entradas, values];\r\n    //     console.log('After:', nota)\r\n    //     updateData(`notas/update/${nota._id}`, nota).then((rs) => {\r\n    //         getNotasData()\r\n    //     }).finally(() => setEditingEntradas(false))\r\n    // }\r\n\r\n    // const onEntryFinishFailed = (errorInfo) => {\r\n    //     console.log('Failed:', errorInfo);\r\n    // };\r\n\r\n    // // Upload File For Estudios\r\n    // const dragDropProps = {\r\n    //     name: 'file',\r\n    //     multiple: true,\r\n    //     action: API + 'notas/estudios/upload', // Production\r\n\r\n    //     onChange(info) {\r\n    //         const { status } = info.file;\r\n\r\n    //         if (status !== 'uploading') {\r\n    //             console.log(info.file, info.fileList);\r\n    //         }\r\n\r\n    //         if (status === 'done') {\r\n    //             message.success(`${info.file.name} file uploaded successfully.`);\r\n    //             console.log('New Files: ', info.file.response.file)\r\n    //             // setEstudiosFiles([...estudiosFiles, info.file.response.file])\r\n    //         } else if (status === 'error') {\r\n    //             message.error(`${info.file.name} file upload failed.`);\r\n    //         }\r\n    //     },\r\n\r\n    //     onDrop(e) {\r\n    //         console.log('Dropped files', e.dataTransfer.files);\r\n    //     },\r\n    // };\r\n\r\n    const items = notaData ? notaData.map((nota, i) => {\r\n        return {\r\n            label: `Nota ${i + 1}`,\r\n            key: nota._id,\r\n            children: <Row gutter={8} style={{ backgroundColor: 'white' }}>\r\n\r\n\r\n                {/* Mitad de la pantalla para Receta */}\r\n                <Col span={6} >\r\n                    <DetalleReceta recetas={nota.recetas} id_nota={nota._id} paciente={props.paciente} />\r\n\r\n                    {/* Debajo de la receta esta la ultima cita */}\r\n                    <LastCita paciente={id_paciente} />\r\n\r\n                    {/* Debajo de la ultima cita va hojas de enfermeria*/}\r\n                    <HojasEnfermeria hojas_enfermeria={nota.hojas_enfermeria} id_nota={nota._id} datosPaciente={props.datosPaciente} />\r\n\r\n                </Col>\r\n\r\n                {/* la otra mitad de la pantalla para NOTA*/}\r\n                <Col span={18}>\r\n                    {/* Detalle nota and soap will come into enfermero nota */}\r\n                    {/* <Soap />\r\n                    <Collapse bordered={false} style={{ backgroundColor: '#fff' }}>\r\n                        <Panel header={<Tooltip title=\"Haga Click para mostrar u ocultar\" placement=\"right\"><span>Detalles de la nota</span></Tooltip>} key=\"1\">\r\n                            <Card >\r\n                                <Card.Grid style={NotaGridStyle}>Edad: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"edad\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Talla:<Paragraph editable={{ onChange: (ns) => updateNota(nota, \"talla\", ns) }} >{nota.talla}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Peso: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"peso\", ns) }} >{nota.peso}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>IMC: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"imc\", ns) }} >{nota.imc}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Temperatura: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"temperatura\", ns) }} >{nota.temperatura}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Presion Arterial: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"presion_arterial\", ns) }} >{nota.presion_arterial}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Cardiaca : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_cardiaca\", ns) }} >{nota.frecuencia_cardiaca}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Respiratoria : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_respiratoria\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                            </Card>\r\n                        </Panel>\r\n                    </Collapse> */}\r\n\r\n                    {/* <Card title='Observaciones'>\r\n                        <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"Observaciones\", ns) }} >\r\n                            {nota.Observaciones}\r\n                        </Paragraph>\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Diagnostico'>\r\n\r\n                        {\r\n                            nota.diagnostico ? <div>{nota.diagnostico}</div> : <Select\r\n                                showSearch\r\n                                placeholder='Selecciona un diagnostico'\r\n                                style={{ width: 400 }}\r\n                                onChange={(newValue) => updateNota(nota, \"diagnostico\", newValue)}\r\n                            >\r\n                                {\r\n                                    Object.keys(diagnosticos).map((k) => {\r\n                                        return <OptGroup label={k}>\r\n                                            {Object.keys(diagnosticos[k]).map((sk) => {\r\n                                                return <Option value={diagnosticos[k][sk]}>{diagnosticos[k][sk]}</Option>\r\n                                            })}\r\n                                        </OptGroup>\r\n\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        }\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Entradas'>\r\n                        {\r\n                            editingEntradas ? <Form\r\n                                name=\"add_entry_form\"\r\n                                // labelCol={{ span: 8 }}\r\n                                // wrapperCol={{ span: 16 }}\r\n                                onFinish={(vals) => onEntryFinish(nota, vals)}\r\n                                onFinishFailed={onEntryFinishFailed}\r\n                                autoComplete=\"off\"\r\n                            >\r\n                                <Space>\r\n                                    <Form.Item\r\n                                        // label=\"Nueva entrada\"\r\n                                        name=\"descripcion\"\r\n                                        rules={[{ required: true, message: 'Ingresa la descripcion' }]}\r\n                                    >\r\n                                        <TextArea rows={2} placeholder=\"Ingresa los detalles\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                    // wrapperCol={{ offset: 8, span: 16 }}\r\n                                    >\r\n                                        <div className='fila'>\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' htmlType=\"submit\" icon={<SaveOutlined />} />\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' onClick={() => setEditingEntradas(false)} icon={<CloseOutlined />} />\r\n                                        </div>\r\n                                    </Form.Item>\r\n                                </Space>\r\n                            </Form> : <div className='fila'>\r\n                                <ul>\r\n                                    {\r\n                                        nota.entradas && nota.entradas.map((e) => <li key={e._id}>{e.createdAt?.substring(0, 10)} - {e.descripcion}</li>)\r\n                                    }\r\n                                </ul>\r\n                                <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" ghost onClick={() => { setEditingEntradas(true) }} size='small' icon={<PlusOutlined />} />\r\n                            </div>\r\n                        }\r\n\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Tratamiento'>\r\n                        <Select\r\n                            defaultValue=\"Tratamiento 1\"\r\n                            style={{ width: 120 }}\r\n                            // onChange={handleChange}\r\n                            options={[\r\n                                {\r\n                                    value: 'jack',\r\n                                    label: 'Tratamiento 1',\r\n                                },\r\n                                {\r\n                                    value: 'lucy',\r\n                                    label: 'Tratamiento 2',\r\n                                },\r\n                                {\r\n                                    value: 'Yiminghe',\r\n                                    label: 'Tratamiento 3',\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Estudios'>\r\n                        {nota.estudios.map((e) => {\r\n                            return <Card.Grid style={EstudioGridStyle}>\r\n                                <a href={`${API}notas/estudios/download/${e}`}><ExperimentOutlined />{e}<DownloadOutlined /> </a>\r\n                            </Card.Grid>\r\n                        })}\r\n\r\n                        <Dragger {...dragDropProps} style={{ padding: 6 }}>\r\n                            <p className=\"ant-upload-drag-icon\">\r\n                                <InboxOutlined />\r\n                            </p>\r\n                            <p className=\"ant-upload-text\">Arrastra los archivos de estudio aquí, o da click para buscar</p>\r\n                            <p className=\"ant-upload-hint\">\r\n                                Selecciona archivos en pdf o imagen que sean menores a 2 MB para poder subirlos\r\n                            </p>\r\n                        </Dragger>\r\n                    </Card> */}\r\n\r\n                    <NotasEvolucion _notas_evolucion={nota.notas_evolucion} id_nota={nota._id} />\r\n\r\n                    {/* <Button style={{ float: 'right' }} onClick={() => { editarNota(nota) }} size='small' type=\"primary\" icon={<EditOutlined />} className='btnIconCentered'>Editar Nota</Button> */}\r\n                </Col>\r\n            </Row>\r\n        }\r\n    }).reverse() : []\r\n\r\n    // return <div style={{backgroundColor: '#fff', padding: 16}}>\r\n    return <Card style={{ marginTop: 15 }}>\r\n\r\n        <Space>\r\n            <h5>Notas </h5>\r\n            {\r\n                isDoctor && <Button className='btnIconCentered' onClick={createNota} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n            }\r\n        </Space>\r\n\r\n        {\r\n            notaLoading ? <h5>Cargando Nota...</h5> : <Tabs items={items} />\r\n        }\r\n\r\n        <Modal title=\"Nueva Nota\" open={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota id_expediente={props.id_expediente} paciente={id_paciente} prevExpNotas={props.prevExpNotas} setIsModalVisible={setIsModalVisible} />\r\n        </Modal>\r\n\r\n        <Modal title=\"Editar Nota\" open={isEditModalVisible} onOk={handleEditOk} onCancel={handleEditCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota nota={notaForEdit} setIsModalVisible={setIsEditModalVisible} />\r\n        </Modal>\r\n\r\n\r\n\r\n    </Card>\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}