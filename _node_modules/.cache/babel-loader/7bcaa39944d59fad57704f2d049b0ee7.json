{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gil\\\\Documents\\\\ReCreaMed\\\\src\\\\doctorViews\\\\expedientes\\\\detalleNota.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Card, Button, Tabs, Row, Col, Modal, Space, message } from 'antd';\nimport { getData, API, usuario } from '../../resources';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { NuevaNota } from './nuevaNota';\nimport DetalleReceta from './detalleReceta';\nimport LastCita from './lastCita';\nimport NotasEvolucion from './notasEvolucion';\nimport HojasEnfermeria from './hojasEnfermeria';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DetalleNota(props) {\n  _s();\n  const isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\n  const [notaData, setNotaData] = useState([]);\n  const [notaLoading, setnotaLoading] = useState(true);\n  const [notaForEdit, setNotaForEdit] = useState(\"\");\n  // Add Nota Modal\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n  // End of Add Nota Modal\n  // Edit Nota Modal\n  const [isEditModalVisible, setIsEditModalVisible] = useState(false);\n  const handleEditOk = () => {\n    setIsEditModalVisible(false);\n  };\n  const handleEditCancel = () => {\n    setIsEditModalVisible(false);\n  };\n  const editarNota = async n => {\n    await setNotaForEdit(n);\n    setIsEditModalVisible(true);\n  };\n  // End of Edit Nota Modal\n  // Edit Nota fields\n  const [editingEntradas, setEditingEntradas] = useState(false);\n  // const [editingDiagnostico, setEditingDiagnostico] = useState(false)\n\n  const [notasLen, setNotasLen] = useState(null);\n  const [counterPilot, setCounterPilot] = useState(0);\n  const id_paciente = props.paciente;\n  useEffect(() => {\n    // console.log('Paciente received to detailNota: ', id_paciente)\n    id_paciente ? getNotasData() : finishGet();\n  }, [id_paciente]);\n  const getNotasData = async () => {\n    await getData(`notas/${id_paciente}`).then(rs => {\n      console.log('NotasData: ', rs);\n      if (rs && rs.length === 0) {\n        createNota();\n      }\n      rs.forEach((nt, i) => {\n        nt.label = 'Nota' + (i + 1);\n      });\n      setNotaData(rs);\n      setnotaLoading(false);\n    });\n  };\n  // if patient not contains notas\n  const finishGet = () => {\n    setNotaData([]);\n    setnotaLoading(false);\n  };\n  const createNota = async () => {\n    let newNotaBody = {\n      id_usuario: id_paciente,\n      id_medico: usuario._id,\n      edad: 1,\n      talla: 1,\n      imc: 1,\n      peso: 1,\n      temperatura: 1,\n      presion_arterial: \"---/---\",\n      frecuencia_cardiaca: 1,\n      frecuencia_respiratoria: 1,\n      estudios: [],\n      Observaciones: \"\",\n      recetas: []\n    };\n    const newNota = await fetch(API + 'notas/add', {\n      method: 'POST',\n      body: JSON.stringify(newNotaBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => {\n      message.success(response.message || response.error);\n      // response.message && response.message === ''\n      return response;\n    }).catch(error => console.error('Error:', error));\n\n    // Add new nota to received notas\n    props.prevExpNotas.push(newNota.id_nota);\n    //Update nota at expedient\n    fetch(API + 'expedientes/updateNotas/' + props.id_expediente, {\n      method: 'PUT',\n      body: JSON.stringify({\n        \"notas\": props.prevExpNotas\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => {\n      // console.log('Update Exp:', response);\n      message.success(response.message || response.error);\n    }).catch(error => console.error('Error:', error)).finally(() => {\n      getNotasData();\n    });\n  };\n\n  // const updateNota = (originalNota, field, newString) => {\n  //     originalNota[field] = newString;\n  //     console.log(originalNota)\n  //     updateData(`notas/update/${originalNota._id}`, originalNota).then((rs) => { getNotasData() })\n  // }\n  // const onEntryFinish = (nota, values) => {\n  //     console.log(values)\n  //     console.log('Before:', nota)\n  //     nota.entradas = [...nota.entradas, values];\n  //     console.log('After:', nota)\n  //     updateData(`notas/update/${nota._id}`, nota).then((rs) => {\n  //         getNotasData()\n  //     }).finally(() => setEditingEntradas(false))\n  // }\n\n  // const onEntryFinishFailed = (errorInfo) => {\n  //     console.log('Failed:', errorInfo);\n  // };\n\n  // // Upload File For Estudios\n  // const dragDropProps = {\n  //     name: 'file',\n  //     multiple: true,\n  //     action: API + 'notas/estudios/upload', // Production\n\n  //     onChange(info) {\n  //         const { status } = info.file;\n\n  //         if (status !== 'uploading') {\n  //             console.log(info.file, info.fileList);\n  //         }\n\n  //         if (status === 'done') {\n  //             message.success(`${info.file.name} file uploaded successfully.`);\n  //             console.log('New Files: ', info.file.response.file)\n  //             // setEstudiosFiles([...estudiosFiles, info.file.response.file])\n  //         } else if (status === 'error') {\n  //             message.error(`${info.file.name} file upload failed.`);\n  //         }\n  //     },\n\n  //     onDrop(e) {\n  //         console.log('Dropped files', e.dataTransfer.files);\n  //     },\n  // };\n\n  const items = notaData ? notaData.map((nota, i) => {\n    return {\n      label: `Nota ${i + 1}`,\n      key: nota._id,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        gutter: 8,\n        style: {\n          backgroundColor: 'white'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 6,\n          children: [/*#__PURE__*/_jsxDEV(DetalleReceta, {\n            recetas: nota.recetas,\n            id_nota: nota._id,\n            paciente: props.paciente\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LastCita, {\n            paciente: id_paciente\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(HojasEnfermeria, {\n            hojas_enfermeria: nota.hojas_enfermeria,\n            id_nota: nota._id,\n            datosPaciente: props.datosPaciente\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 18,\n          children: /*#__PURE__*/_jsxDEV(NotasEvolucion, {\n            _notas_evolucion: nota.notas_evolucion,\n            id_nota: nota._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 23\n      }, this)\n    };\n  }).reverse() : [];\n\n  // return <div style={{backgroundColor: '#fff', padding: 16}}>\n  return /*#__PURE__*/_jsxDEV(Card, {\n    style: {\n      marginTop: 15\n    },\n    children: [/*#__PURE__*/_jsxDEV(Space, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Notas \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }, this), isDoctor && /*#__PURE__*/_jsxDEV(Button, {\n        className: \"btnIconCentered\",\n        onClick: createNota,\n        size: \"small\",\n        type: \"primary\",\n        shape: \"circle\",\n        icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 135\n        }, this),\n        ghost: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), notaLoading ? /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Cargando Nota...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(Tabs, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 55\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Nueva Nota\",\n      open: isModalVisible,\n      onOk: handleOk,\n      onCancel: handleCancel,\n      width: 680,\n      footer: [],\n      destroyOnClose: true,\n      children: /*#__PURE__*/_jsxDEV(NuevaNota, {\n        id_expediente: props.id_expediente,\n        paciente: id_paciente,\n        prevExpNotas: props.prevExpNotas,\n        setIsModalVisible: setIsModalVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Editar Nota\",\n      open: isEditModalVisible,\n      onOk: handleEditOk,\n      onCancel: handleEditCancel,\n      width: 680,\n      footer: [],\n      destroyOnClose: true,\n      children: /*#__PURE__*/_jsxDEV(NuevaNota, {\n        nota: notaForEdit,\n        setIsModalVisible: setIsEditModalVisible\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 12\n  }, this);\n}\n_s(DetalleNota, \"+7kSQDmK/TlNwTJp90bj+vROQ0w=\");\n_c = DetalleNota;\nvar _c;\n$RefreshReg$(_c, \"DetalleNota\");","map":{"version":3,"names":["React","useState","useEffect","Card","Button","Tabs","Row","Col","Modal","Space","message","getData","API","usuario","PlusOutlined","NuevaNota","DetalleReceta","LastCita","NotasEvolucion","HojasEnfermeria","jsxDEV","_jsxDEV","DetalleNota","props","_s","isDoctor","rol","notaData","setNotaData","notaLoading","setnotaLoading","notaForEdit","setNotaForEdit","isModalVisible","setIsModalVisible","handleOk","handleCancel","isEditModalVisible","setIsEditModalVisible","handleEditOk","handleEditCancel","editarNota","n","editingEntradas","setEditingEntradas","notasLen","setNotasLen","counterPilot","setCounterPilot","id_paciente","paciente","getNotasData","finishGet","then","rs","console","log","length","createNota","forEach","nt","i","label","newNotaBody","id_usuario","id_medico","_id","edad","talla","imc","peso","temperatura","presion_arterial","frecuencia_cardiaca","frecuencia_respiratoria","estudios","Observaciones","recetas","newNota","fetch","method","body","JSON","stringify","headers","res","json","response","success","error","catch","prevExpNotas","push","id_nota","id_expediente","finally","items","map","nota","key","children","gutter","style","backgroundColor","span","fileName","_jsxFileName","lineNumber","columnNumber","hojas_enfermeria","datosPaciente","_notas_evolucion","notas_evolucion","reverse","marginTop","className","onClick","size","type","shape","icon","ghost","title","open","onOk","onCancel","width","footer","destroyOnClose","_c","$RefreshReg$"],"sources":["C:/Users/Gil/Documents/ReCreaMed/src/doctorViews/expedientes/detalleNota.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Tabs, Row, Col, Modal, Space, message } from 'antd';\r\nimport { getData, API, usuario } from '../../resources';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { NuevaNota } from './nuevaNota';\r\nimport DetalleReceta from './detalleReceta';\r\nimport LastCita from './lastCita'\r\nimport NotasEvolucion from './notasEvolucion';\r\nimport HojasEnfermeria from './hojasEnfermeria';\r\n\r\n\r\n\r\nexport default function DetalleNota(props) {\r\n\r\n    const isDoctor = usuario && usuario.rol && usuario.rol === 'Medico';\r\n\r\n    const [notaData, setNotaData] = useState([]);\r\n    const [notaLoading, setnotaLoading] = useState(true);\r\n    const [notaForEdit, setNotaForEdit] = useState(\"\")\r\n    // Add Nota Modal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const handleOk = () => { setIsModalVisible(false) };\r\n    const handleCancel = () => { setIsModalVisible(false) };\r\n    // End of Add Nota Modal\r\n    // Edit Nota Modal\r\n    const [isEditModalVisible, setIsEditModalVisible] = useState(false);\r\n    const handleEditOk = () => { setIsEditModalVisible(false) };\r\n    const handleEditCancel = () => { setIsEditModalVisible(false) };\r\n    const editarNota = async (n) => { await setNotaForEdit(n); setIsEditModalVisible(true) }\r\n    // End of Edit Nota Modal\r\n    // Edit Nota fields\r\n    const [editingEntradas, setEditingEntradas] = useState(false)\r\n    // const [editingDiagnostico, setEditingDiagnostico] = useState(false)\r\n\r\n    const [notasLen, setNotasLen] = useState(null)\r\n    const [counterPilot, setCounterPilot] = useState(0)\r\n\r\n    const id_paciente = props.paciente;\r\n\r\n    useEffect(() => {\r\n        // console.log('Paciente received to detailNota: ', id_paciente)\r\n        id_paciente ?\r\n            getNotasData()\r\n            :\r\n            finishGet()\r\n    }, [id_paciente])\r\n\r\n\r\n    const getNotasData = async () => {\r\n        await getData(`notas/${id_paciente}`).then(rs => {\r\n            console.log('NotasData: ', rs);\r\n            if (rs && rs.length === 0) {\r\n                createNota()\r\n            }\r\n\r\n            rs.forEach((nt, i) => {\r\n                nt.label = 'Nota' + (i + 1);\r\n            });\r\n\r\n            setNotaData(rs);\r\n            setnotaLoading(false)\r\n        })\r\n    }\r\n    // if patient not contains notas\r\n    const finishGet = () => { setNotaData([]); setnotaLoading(false); }\r\n\r\n    const createNota = async () => {\r\n        let newNotaBody = {\r\n            id_usuario: id_paciente,\r\n            id_medico: usuario._id,\r\n            edad: 1,\r\n            talla: 1,\r\n            imc: 1,\r\n            peso: 1,\r\n            temperatura: 1,\r\n            presion_arterial: \"---/---\",\r\n            frecuencia_cardiaca: 1,\r\n            frecuencia_respiratoria: 1,\r\n            estudios: [],\r\n            Observaciones: \"\",\r\n            recetas: []\r\n        }\r\n        const newNota = await fetch(API + 'notas/add', {\r\n            method: 'POST',\r\n            body: JSON.stringify(newNotaBody),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                message.success(response.message || response.error);\r\n                // response.message && response.message === ''\r\n                return response;\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n\r\n        // Add new nota to received notas\r\n        props.prevExpNotas.push(newNota.id_nota)\r\n        //Update nota at expedient\r\n        fetch(API + 'expedientes/updateNotas/' + props.id_expediente, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({ \"notas\": props.prevExpNotas }),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        }).then(res => res.json())\r\n            .then(response => {\r\n                // console.log('Update Exp:', response);\r\n                message.success(response.message || response.error);\r\n            })\r\n            .catch(error => console.error('Error:', error))\r\n            .finally(() => {\r\n                getNotasData()\r\n            })\r\n    };\r\n\r\n\r\n\r\n    // const updateNota = (originalNota, field, newString) => {\r\n    //     originalNota[field] = newString;\r\n    //     console.log(originalNota)\r\n    //     updateData(`notas/update/${originalNota._id}`, originalNota).then((rs) => { getNotasData() })\r\n    // }\r\n    // const onEntryFinish = (nota, values) => {\r\n    //     console.log(values)\r\n    //     console.log('Before:', nota)\r\n    //     nota.entradas = [...nota.entradas, values];\r\n    //     console.log('After:', nota)\r\n    //     updateData(`notas/update/${nota._id}`, nota).then((rs) => {\r\n    //         getNotasData()\r\n    //     }).finally(() => setEditingEntradas(false))\r\n    // }\r\n\r\n    // const onEntryFinishFailed = (errorInfo) => {\r\n    //     console.log('Failed:', errorInfo);\r\n    // };\r\n\r\n    // // Upload File For Estudios\r\n    // const dragDropProps = {\r\n    //     name: 'file',\r\n    //     multiple: true,\r\n    //     action: API + 'notas/estudios/upload', // Production\r\n\r\n    //     onChange(info) {\r\n    //         const { status } = info.file;\r\n\r\n    //         if (status !== 'uploading') {\r\n    //             console.log(info.file, info.fileList);\r\n    //         }\r\n\r\n    //         if (status === 'done') {\r\n    //             message.success(`${info.file.name} file uploaded successfully.`);\r\n    //             console.log('New Files: ', info.file.response.file)\r\n    //             // setEstudiosFiles([...estudiosFiles, info.file.response.file])\r\n    //         } else if (status === 'error') {\r\n    //             message.error(`${info.file.name} file upload failed.`);\r\n    //         }\r\n    //     },\r\n\r\n    //     onDrop(e) {\r\n    //         console.log('Dropped files', e.dataTransfer.files);\r\n    //     },\r\n    // };\r\n\r\n    const items = notaData ? notaData.map((nota, i) => {        return {\r\n            label: `Nota ${i + 1}`,\r\n            key: nota._id,\r\n            children: <Row gutter={8} style={{ backgroundColor: 'white' }}>\r\n\r\n\r\n                {/* Mitad de la pantalla para Receta */}\r\n                <Col span={6} >\r\n                    <DetalleReceta recetas={nota.recetas} id_nota={nota._id} paciente={props.paciente} />\r\n\r\n                    {/* Debajo de la receta esta la ultima cita */}\r\n                    <LastCita paciente={id_paciente} />\r\n\r\n                    {/* Debajo de la ultima cita va hojas de enfermeria*/}\r\n                    <HojasEnfermeria hojas_enfermeria={nota.hojas_enfermeria} id_nota={nota._id} datosPaciente={props.datosPaciente} />\r\n\r\n                </Col>\r\n\r\n                {/* la otra mitad de la pantalla para NOTA*/}\r\n                <Col span={18}>\r\n                    {/* Detalle nota and soap will come into enfermero nota */}\r\n                    {/* <Soap />\r\n                    <Collapse bordered={false} style={{ backgroundColor: '#fff' }}>\r\n                        <Panel header={<Tooltip title=\"Haga Click para mostrar u ocultar\" placement=\"right\"><span>Detalles de la nota</span></Tooltip>} key=\"1\">\r\n                            <Card >\r\n                                <Card.Grid style={NotaGridStyle}>Edad: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"edad\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Talla:<Paragraph editable={{ onChange: (ns) => updateNota(nota, \"talla\", ns) }} >{nota.talla}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Peso: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"peso\", ns) }} >{nota.peso}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>IMC: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"imc\", ns) }} >{nota.imc}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Temperatura: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"temperatura\", ns) }} >{nota.temperatura}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Presion Arterial: <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"presion_arterial\", ns) }} >{nota.presion_arterial}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Cardiaca : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_cardiaca\", ns) }} >{nota.frecuencia_cardiaca}</Paragraph></Card.Grid>\r\n                                <Card.Grid style={NotaGridStyle}>Frecuencia Respiratoria : <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"frecuencia_respiratoria\", ns) }} >{nota.edad}</Paragraph></Card.Grid>\r\n                            </Card>\r\n                        </Panel>\r\n                    </Collapse> */}\r\n\r\n                    {/* <Card title='Observaciones'>\r\n                        <Paragraph editable={{ onChange: (ns) => updateNota(nota, \"Observaciones\", ns) }} >\r\n                            {nota.Observaciones}\r\n                        </Paragraph>\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Diagnostico'>\r\n\r\n                        {\r\n                            nota.diagnostico ? <div>{nota.diagnostico}</div> : <Select\r\n                                showSearch\r\n                                placeholder='Selecciona un diagnostico'\r\n                                style={{ width: 400 }}\r\n                                onChange={(newValue) => updateNota(nota, \"diagnostico\", newValue)}\r\n                            >\r\n                                {\r\n                                    Object.keys(diagnosticos).map((k) => {\r\n                                        return <OptGroup label={k}>\r\n                                            {Object.keys(diagnosticos[k]).map((sk) => {\r\n                                                return <Option value={diagnosticos[k][sk]}>{diagnosticos[k][sk]}</Option>\r\n                                            })}\r\n                                        </OptGroup>\r\n\r\n                                    })\r\n                                }\r\n                            </Select>\r\n                        }\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Entradas'>\r\n                        {\r\n                            editingEntradas ? <Form\r\n                                name=\"add_entry_form\"\r\n                                // labelCol={{ span: 8 }}\r\n                                // wrapperCol={{ span: 16 }}\r\n                                onFinish={(vals) => onEntryFinish(nota, vals)}\r\n                                onFinishFailed={onEntryFinishFailed}\r\n                                autoComplete=\"off\"\r\n                            >\r\n                                <Space>\r\n                                    <Form.Item\r\n                                        // label=\"Nueva entrada\"\r\n                                        name=\"descripcion\"\r\n                                        rules={[{ required: true, message: 'Ingresa la descripcion' }]}\r\n                                    >\r\n                                        <TextArea rows={2} placeholder=\"Ingresa los detalles\" />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                    // wrapperCol={{ offset: 8, span: 16 }}\r\n                                    >\r\n                                        <div className='fila'>\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' htmlType=\"submit\" icon={<SaveOutlined />} />\r\n                                            <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" size='small' onClick={() => setEditingEntradas(false)} icon={<CloseOutlined />} />\r\n                                        </div>\r\n                                    </Form.Item>\r\n                                </Space>\r\n                            </Form> : <div className='fila'>\r\n                                <ul>\r\n                                    {\r\n                                        nota.entradas && nota.entradas.map((e) => <li key={e._id}>{e.createdAt?.substring(0, 10)} - {e.descripcion}</li>)\r\n                                    }\r\n                                </ul>\r\n                                <Button className='btnIconCentered' type=\"primary\" shape=\"circle\" ghost onClick={() => { setEditingEntradas(true) }} size='small' icon={<PlusOutlined />} />\r\n                            </div>\r\n                        }\r\n\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Tratamiento'>\r\n                        <Select\r\n                            defaultValue=\"Tratamiento 1\"\r\n                            style={{ width: 120 }}\r\n                            // onChange={handleChange}\r\n                            options={[\r\n                                {\r\n                                    value: 'jack',\r\n                                    label: 'Tratamiento 1',\r\n                                },\r\n                                {\r\n                                    value: 'lucy',\r\n                                    label: 'Tratamiento 2',\r\n                                },\r\n                                {\r\n                                    value: 'Yiminghe',\r\n                                    label: 'Tratamiento 3',\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </Card> */}\r\n\r\n                    {/* <Card title='Estudios'>\r\n                        {nota.estudios.map((e) => {\r\n                            return <Card.Grid style={EstudioGridStyle}>\r\n                                <a href={`${API}notas/estudios/download/${e}`}><ExperimentOutlined />{e}<DownloadOutlined /> </a>\r\n                            </Card.Grid>\r\n                        })}\r\n\r\n                        <Dragger {...dragDropProps} style={{ padding: 6 }}>\r\n                            <p className=\"ant-upload-drag-icon\">\r\n                                <InboxOutlined />\r\n                            </p>\r\n                            <p className=\"ant-upload-text\">Arrastra los archivos de estudio aquí, o da click para buscar</p>\r\n                            <p className=\"ant-upload-hint\">\r\n                                Selecciona archivos en pdf o imagen que sean menores a 2 MB para poder subirlos\r\n                            </p>\r\n                        </Dragger>\r\n                    </Card> */}\r\n\r\n                    <NotasEvolucion _notas_evolucion={nota.notas_evolucion} id_nota={nota._id} />\r\n\r\n                    {/* <Button style={{ float: 'right' }} onClick={() => { editarNota(nota) }} size='small' type=\"primary\" icon={<EditOutlined />} className='btnIconCentered'>Editar Nota</Button> */}\r\n                </Col>\r\n            </Row>\r\n        }\r\n    }).reverse() : []\r\n\r\n    // return <div style={{backgroundColor: '#fff', padding: 16}}>\r\n    return <Card style={{ marginTop: 15 }}>\r\n\r\n        <Space>\r\n            <h5>Notas </h5>\r\n            {\r\n                isDoctor && <Button className='btnIconCentered' onClick={createNota} size='small' type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} ghost />\r\n            }\r\n        </Space>\r\n\r\n        {\r\n            notaLoading ? <h5>Cargando Nota...</h5> : <Tabs items={items} />\r\n        }\r\n\r\n        <Modal title=\"Nueva Nota\" open={isModalVisible} onOk={handleOk} onCancel={handleCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota id_expediente={props.id_expediente} paciente={id_paciente} prevExpNotas={props.prevExpNotas} setIsModalVisible={setIsModalVisible} />\r\n        </Modal>\r\n\r\n        <Modal title=\"Editar Nota\" open={isEditModalVisible} onOk={handleEditOk} onCancel={handleEditCancel} width={680} footer={[]} destroyOnClose>\r\n            <NuevaNota nota={notaForEdit} setIsModalVisible={setIsEditModalVisible} />\r\n        </Modal>\r\n\r\n\r\n\r\n    </Card>\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}