{"ast":null,"code":"import{useEffect,useState}from'react';import{Button,Table,Space,Select,Popconfirm,Switch}from'antd';import{getData,sendDataBody,usuario,ids_hospitales}from'../../resources';import Loading from'../../loading';import Detalles from'./details.corte';import CreateCorte from'./create.corte';import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function Cortes(){const[medico,setMedico]=useState(null);const[balance,setBalance]=useState({});const[cortesData,setCortesData]=useState([]);const[loading,setLoading]=useState(true);const[medicosData,setMedicosData]=useState([]);// For populate medics select\n// Toggles between for medic/for hospital\nconst[viewTipeMedics,setViewTipeMedics]=useState(true);// Data before all\nconst[idsMedicos,setIdsMedicos]=useState([]);// For details modal\nconst[corteForDetails,setCorteForDetails]=useState({});const[isModalOpen,setIsModalOpen]=useState(false);const showModal=corte=>{corte.medico=idsMedicos;// in controller, medics is used for flter balances not cortes   \nsetCorteForDetails(corte);setIsModalOpen(true);};// For Create Corte Modal\nconst[isCreateModalOpen,setIsCreateModalOpen]=useState(false);const showCreateModal=()=>{setIsCreateModalOpen(true);};const handleCreateOk=()=>{setIsCreateModalOpen(false);};const handleCreateCancel=()=>{setIsCreateModalOpen(false);};useEffect(()=>{getDoctorsData();getCortesData();},[]);const getDoctorsData=()=>{//Para el caso que la sesion sea de Administrador. Is used for filter balances by corte\nsendDataBody('users/getMany/hospitals',{ids_hospitales:ids_hospitales}).then(rs=>{const md=rs.map(doc=>{return doc._id;});rs.forEach(m=>{m.value=m._id;m.label=m.name;});setMedicosData(rs);setIdsMedicos(md);}).finally(()=>setLoading(false));};const getCortesData=()=>{getData(\"cortes/\".concat(usuario._id)).then(rs=>{console.log('cortesData',rs);setCortesData(rs.reverse());}).finally(()=>{setLoading(false);});};const createCorte=values=>{const newCorte={medico:usuario._id,fecha_inicio:cortesData.length===0?new Date():cortesData.at(0).fecha_cierre,...values};console.log('ready to send ',newCorte);sendDataBody('cortes/add',newCorte).then(rs=>{console.log(rs);getCortesData();});};const handleDoctorChange=value=>{setMedico(value);getCortesData(value);};const columns=[{title:'fecha y hora de Inicio',dataIndex:'fecha_inicio',key:'fecha_inicio',render:(_,_ref)=>{let{fecha_inicio}=_ref;return/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",new Date(fecha_inicio).toLocaleString()]});}},{title:'Fecha y hora de Cierre',dataIndex:'fecha_cierre',key:'fecha_cierre',render:(_,_ref2)=>{let{fecha_cierre}=_ref2;return/*#__PURE__*/_jsxs(_Fragment,{children:[\" \",new Date(fecha_cierre).toLocaleString()]});}},{title:'Comentario',dataIndex:'comentario',key:'comentario'},{title:'Acciones',key:'Acciones',render:(_,record)=>/*#__PURE__*/_jsx(Space,{size:\"middle\",children:/*#__PURE__*/_jsx(Button,{onClick:()=>{showModal(record);},children:\"Ver Detalles\"})})}];const onChange=checked=>{console.log(\"switch to \".concat(checked));setViewTipeMedics(checked);};return/*#__PURE__*/_jsxs(\"div\",{className:\"mainContainer\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Cortes de cada Medico\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Button,{onClick:showCreateModal,type:\"primary\",style:{marginLeft:12},children:\"Generar corte\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Table,{columns:columns,dataSource:cortesData}),/*#__PURE__*/_jsx(\"div\",{style:{height:200}}),/*#__PURE__*/_jsx(Detalles,{corte:corteForDetails,isModalOpen:isModalOpen,setIsModalOpen:setIsModalOpen}),/*#__PURE__*/_jsx(CreateCorte,{isModalOpen:isCreateModalOpen,handleOk:handleCreateOk,handleCancel:handleCreateCancel,onFinish:createCorte})]});}","map":{"version":3,"names":["useEffect","useState","Button","Table","Space","Select","Popconfirm","Switch","getData","sendDataBody","usuario","ids_hospitales","Loading","Detalles","CreateCorte","Fragment","_Fragment","jsxs","_jsxs","jsx","_jsx","Cortes","medico","setMedico","balance","setBalance","cortesData","setCortesData","loading","setLoading","medicosData","setMedicosData","viewTipeMedics","setViewTipeMedics","idsMedicos","setIdsMedicos","corteForDetails","setCorteForDetails","isModalOpen","setIsModalOpen","showModal","corte","isCreateModalOpen","setIsCreateModalOpen","showCreateModal","handleCreateOk","handleCreateCancel","getDoctorsData","getCortesData","then","rs","md","map","doc","_id","forEach","m","value","label","name","finally","concat","console","log","reverse","createCorte","values","newCorte","fecha_inicio","length","Date","at","fecha_cierre","handleDoctorChange","columns","title","dataIndex","key","render","_","_ref","children","toLocaleString","_ref2","record","size","onClick","onChange","checked","className","type","style","marginLeft","dataSource","height","handleOk","handleCancel","onFinish"],"sources":["C:/Users/Gil/Documents/ReCreaMed/src/admHospitalViews/cortes/main.cortes.jsx"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { Button, Table, Space, Select, Popconfirm, Switch } from 'antd'\r\nimport { getData, sendDataBody, usuario, ids_hospitales } from '../../resources'\r\nimport Loading from '../../loading'\r\nimport Detalles from './details.corte'\r\nimport CreateCorte from './create.corte'\r\n\r\nexport default function Cortes() {\r\n    const [medico, setMedico] = useState(null)\r\n    const [balance, setBalance] = useState({})\r\n    const [cortesData, setCortesData] = useState([])\r\n    const [loading, setLoading] = useState(true)\r\n    const [medicosData, setMedicosData] = useState([]) // For populate medics select\r\n\r\n    // Toggles between for medic/for hospital\r\n    const [viewTipeMedics, setViewTipeMedics] = useState(true)\r\n\r\n    // Data before all\r\n    const [idsMedicos, setIdsMedicos] = useState([])\r\n\r\n    // For details modal\r\n    const [corteForDetails, setCorteForDetails] = useState({})\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const showModal = (corte) => {\r\n        corte.medico = idsMedicos; // in controller, medics is used for flter balances not cortes   \r\n        setCorteForDetails(corte); setIsModalOpen(true)\r\n    };\r\n\r\n    // For Create Corte Modal\r\n    const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r\n    const showCreateModal = () => {\r\n        setIsCreateModalOpen(true);\r\n    };\r\n    const handleCreateOk = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n    const handleCreateCancel = () => {\r\n        setIsCreateModalOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getDoctorsData()\r\n        getCortesData()\r\n    }, [])\r\n\r\n    const getDoctorsData = () => { //Para el caso que la sesion sea de Administrador. Is used for filter balances by corte\r\n        sendDataBody('users/getMany/hospitals', { ids_hospitales: ids_hospitales }).then(rs => {\r\n            const md = rs.map(doc => {\r\n                return doc._id\r\n            });\r\n            rs.forEach(m => { m.value = m._id; m.label = m.name })\r\n            setMedicosData(rs)\r\n            setIdsMedicos(md)\r\n        }).finally(() => setLoading(false))\r\n    }\r\n\r\n    const getCortesData = () => {\r\n        getData(`cortes/${usuario._id}`).then((rs) => {\r\n            console.log('cortesData', rs)\r\n            setCortesData(rs.reverse())\r\n        }).finally(() => { setLoading(false) })\r\n    }\r\n\r\n    const createCorte = (values) => {\r\n        const newCorte = {\r\n            medico: usuario._id,\r\n            fecha_inicio: cortesData.length === 0 ? new Date() : cortesData.at(0).fecha_cierre,\r\n            ...values\r\n        }\r\n        console.log('ready to send ', newCorte)\r\n        sendDataBody('cortes/add', newCorte).then((rs) => {\r\n            console.log(rs);\r\n            getCortesData()\r\n        })\r\n    }\r\n\r\n    const handleDoctorChange = (value) => { setMedico(value); getCortesData(value); };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'fecha y hora de Inicio',\r\n            dataIndex: 'fecha_inicio',\r\n            key: 'fecha_inicio',\r\n            render: (_, { fecha_inicio }) => <> {new Date(fecha_inicio).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Fecha y hora de Cierre',\r\n            dataIndex: 'fecha_cierre',\r\n            key: 'fecha_cierre',\r\n            render: (_, { fecha_cierre }) => <> {new Date(fecha_cierre).toLocaleString()}</>\r\n        },\r\n        {\r\n            title: 'Comentario',\r\n            dataIndex: 'comentario',\r\n            key: 'comentario',\r\n        },\r\n        {\r\n            title: 'Acciones',\r\n            key: 'Acciones',\r\n            render: (_, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button onClick={() => { showModal(record) }}>Ver Detalles</Button>\r\n                    {/* <Button onClick={() => console.log(record)}>Editar</Button> */}\r\n                    {/* <Button onClick={() => deleteData(`cortes/remove/${record._id}`)}>Eliminar</Button> */}\r\n                </Space>)\r\n        }\r\n    ];\r\n\r\n    const onChange = (checked) => {\r\n        console.log(`switch to ${checked}`);\r\n        setViewTipeMedics(checked);\r\n    };\r\n\r\n\r\n    return <div className='mainContainer'>\r\n\r\n        <h4>Cortes de cada Medico</h4>\r\n        <br />\r\n        {/* <p className='datos'>Selecciona un medico a continuacion para ver sus cortes</p> */}\r\n\r\n        {/* <Select options={medicosData} onChange={handleDoctorChange} style={{ width: 240 }} placeholder='Seleccione medico' /> */}\r\n\r\n        {/* <Popconfirm\r\n            placement='bottomRight'\r\n            title=\"Crear Corte\"\r\n            description=\"Seguro que quere generar un corte de caja a la fecha y hora actuales?\"\r\n            onConfirm={createCorte}\r\n            onCancel={() => console.log('Cancelled corte')}\r\n            okText=\"Si\"\r\n            cancelText=\"No\"\r\n        >\r\n\r\n            <Button type='primary' style={{ marginLeft: 12 }}>{cortesData.length === 0 ? 'Generar Primer Corte' : 'Generar Corte'}</Button>\r\n        </Popconfirm> */}\r\n\r\n        <Button onClick={showCreateModal} type='primary' style={{ marginLeft: 12 }}>Generar corte</Button>\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <Table columns={columns} dataSource={cortesData} />\r\n\r\n        <div style={{ height: 200 }}></div>\r\n        {/* {\r\n            !medico ? <div>Seleccione un medico para ver sus cortes</div>\r\n                :\r\n                <div>\r\n                    <div className='fila'>\r\n                        <h4>Cortes</h4>\r\n                        <Button onClick={createCorte} type='primary' style={{ marginLeft: 12 }}>{cortesData.length === 0 ? 'Generar Primer Corte' : 'Generar Corte'}</Button>\r\n                    </div>\r\n                    <br />\r\n                    <Table columns={columns} dataSource={cortesData} />\r\n                </div>\r\n        } */}\r\n\r\n        <Detalles corte={corteForDetails} isModalOpen={isModalOpen} setIsModalOpen={setIsModalOpen} />\r\n\r\n        <CreateCorte isModalOpen={isCreateModalOpen} handleOk={handleCreateOk} handleCancel={handleCreateCancel} onFinish={createCorte} />\r\n\r\n    </div>\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}