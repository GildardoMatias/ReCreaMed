{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Button,Divider,Form,Radio,message,Input}from\"antd\";import{EncuestaLoading,ThanksMessage,checkEncuesta,onFinishFailed}from'../utils';import{sendDataBody}from'../../resources';import{docs_catalog_1,docs_catalog_2,docs_catalog_3,docs_catalog_4}from'./docs.catalog';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function DocsEncuesta(_ref){let{idpaciente,idmedico,token,protocolo,momento}=_ref;const[encuestaNotExists,setEncuestaNotExists]=useState(null);const[checking,setChecking]=useState(true);const[pacienteData,setPacienteData]=useState({});const[medicoData,setMedicoData]=useState({});useEffect(()=>{init();},[]);function init(){checkEncuesta(token,idpaciente,setPacienteData,idmedico,setMedicoData,setEncuestaNotExists,setChecking);}function convertirObjeto(objeto){const resultado={};for(const clave in objeto){const[categoria,indice]=clave.split('-');if(!resultado[categoria]){resultado[categoria]=new Array(5).fill(0);}resultado[categoria][parseInt(indice)-1]=objeto[clave];}return resultado;}const onFinish=values=>{console.log('Values: ',values);const objetoConvertido=convertirObjeto(respuestas);console.log('New',objetoConvertido);const body={usuario:idpaciente,medico:idmedico,docs:objetoConvertido,tipo:'docs',uuid:token,cat:[protocolo,momento]};console.log('Body:',body);sendDataBody('encuestas/add',body).then(rs=>{console.log('add enc resp',rs);message.success(rs.message);}).then(()=>init());};const onDocsFinishFailed=errorInfo=>{console.log(errorInfo);message.error('Revise el formulario y conteste todas las preguntas');};const onChange=e=>{message.info('radio checked '+e.target.value);};const[respuestas,setRespuestas]=useState({});const handleRespuestaChange=(n,value)=>{setRespuestas({...respuestas,[n]:value});};const InitialInstr=()=>{return/*#__PURE__*/_jsx(\"p\",{style:{textAlign:'justify'},children:\"En este cuestionario se le pregunta sobre 4 tipos de preocupaciones diferentes que puede que usted est\\xE9 (o no est\\xE9) experimentando. Para cada tipo de preocupaci\\xF3n, hay una descripci\\xF3n del tipo de pensamientos (a veces llamados obsesiones) y conductas (a veces llamadas rituales o compulsiones) que son t\\xEDpicas de ese tipo de preocupaci\\xF3n en particular, seguida de 5 preguntas sobre sus experiencias en relaci\\xF3n con estos pensamientos y conductas. Por favor, lea cada descripci\\xF3n detenidamente y responda a las preguntas para cada categor\\xEDa bas\\xE1ndose en las experiencias que usted ha tenido durante el \\xFAltimo mes.\"});};const Instr1=()=>{return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Preocupaciones relacionadas con g\\xE9rmenes y contaminaci\\xF3n.\"})}),/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'justify'},children:[\"Ejemplos... \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar o sentir que est\\xE1 contaminado/a porque estuvo en contacto con ciertos objetos o personas o estuvo cerca de ellos.  \",/*#__PURE__*/_jsx(\"br\",{}),\"- Sentir que est\\xE1 contaminado/a porque estuvo en ciertos lugares (por ejemplo, un cuarto de ba\\xF1o).  \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar en g\\xE9rmenes, enfermedades o en la posibilidad de propagar la contaminaci\\xF3n.  \",/*#__PURE__*/_jsx(\"br\",{}),\"- Lavarse las manos, usar desinfectante de manos, ducharse, cambiarse de ropa o limpiar objetos contaminaci\\xF3n. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Evitar ciertas personas, objetos o lugares debido a la contaminaci\\xF3n. \",/*#__PURE__*/_jsx(\"br\",{}),\"Las siguientes preguntas se refieren a sus experiencias con pensamientos y conductas relacionados con la contaminaci\\xF3n durante el \\xFAltimo mes. Recuerde que sus experiencias pueden ser diferentes de los ejemplos mencionados anteriormente. Por favor, rodee con un c\\xEDrculo el n\\xFAmero junto a su respuesta.\"]})]});};const Instr2=()=>{return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Preocupaciones relacionadas con causar da\\xF1o, provocar lesiones o traer mala suerte\"})}),/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'justify'},children:[\"Ejemplos... \",/*#__PURE__*/_jsx(\"br\",{}),\"- Dudar de si ha cometido un error que podr\\xEDa hacer que sucediera algo horrible o perjudicial. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar que pueda haber ocurrido un accidente, desastre o da\\xF1o f\\xEDsico terrible u otra desgracia y que usted no fue lo suficientemente precavido para evitarlo. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar que usted pod\\xEDa evitar alg\\xFAn da\\xF1o o desgracia haciendo las cosas de una determinada manera, contando hasta cierto n\\xFAmero o evitando determinados n\\xFAmeros o palabras \\\"negativos\\\". \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar que pod\\xEDa perder algo importante que es poco probable que pierda (por ejemplo, la cartera, papeles, documentos personales...). \",/*#__PURE__*/_jsx(\"br\",{}),\"- Comprobar cosas como cerraduras, enchufes, la cartera, etc. m\\xE1s de lo necesario. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Comprobar repetidamente o preguntar a otras personas para asegurarse de que no ha pasado (o no va a pasar) algo malo. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Repasar mentalmente cosas del pasado para asegurarse de que no hizo nada malo. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Necesitar hacer las cosas en una secuencia determinada para evitar que ocurran cosas da\\xF1inas o desastres. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Necesitar contar hasta cierto n\\xFAmero o evitar ciertos n\\xFAmeros negativos por miedo a que ocurra algo malo. \",/*#__PURE__*/_jsx(\"br\",{}),\"Las siguientes preguntas se refieren a sus experiencias con los pensamientos y conductas relacionados con causar da\\xF1o o desastres durante el \\xFAltimo mes. Recuerde que sus experiencias pueden ser ligeramente diferentes de los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\"]})]});};const Instr3=()=>{return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Pensamientos inaceptables/prohibidos\"})}),/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'justify'},children:[\"Ejemplos... \",/*#__PURE__*/_jsx(\"br\",{}),\"- Tener pensamientos desagradables sobre sexo, cosas inmorales o violencia que le vienen a la mente en contra de su voluntad. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Pensar que podr\\xEDa hacer algo horrible, indecente o que le averg\\xFCence que en realidad usted no quiere hacer. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Repetir una acci\\xF3n o hacer las cosas en una secuencia determinada debido a un mal pensamiento. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Realizar mentalmente alguna acci\\xF3n o rezar para deshacerse de un pensamiento no deseado o desagradable. \",/*#__PURE__*/_jsx(\"br\",{}),\"- Evitar ciertas personas, lugares o situaciones que le provocan pensamientos no deseados o desagradables. \",/*#__PURE__*/_jsx(\"br\",{}),\"Las siguientes preguntas se refieren a sus experiencias con pensamientos no deseados que vienen a su mente en contra de su voluntad y a comportamientos dirigidos a afrontar este tipo de pensamientos durante el \\xFAltimo mes. Recuerde que sus experiencias pueden ser ligeramente diferentes de los ejemplos mencionados anteriormente. Por favor, seleccione respuesta.\"]})]});};const Instr4=()=>{return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Preocupaciones sobre simetr\\xEDa y la necesidad de que las cosas est\\xE9n \\u201Cbien\\u201D o \\u201Ccomo tienen que estar\\\".\"})}),/*#__PURE__*/_jsxs(\"p\",{style:{textAlign:'justify'},children:[\"Ejemplos... \",/*#__PURE__*/_jsx(\"br\",{}),\"- Necesitar que las cosas sean/est\\xE9n sim\\xE9tricas, uniformes, equilibradas o exactas.\",/*#__PURE__*/_jsx(\"br\",{}),\"- Sentir que algo no est\\xE1 \\\"del todo bien\\\".\",/*#__PURE__*/_jsx(\"br\",{}),\"- Repetir algo del d\\xEDa a d\\xEDa hasta que tiene la sensaci\\xF3n de que lo ha hecho \\\"bien\\\" o \\\"equilibradamente\\\".\",/*#__PURE__*/_jsx(\"br\",{}),\"- Contar cosas absurdas (por ejemplo, azulejos del techo, el n\\xFAmero de palabras en una frase, etc.).\",/*#__PURE__*/_jsx(\"br\",{}),\"- Poner las cosas en un orden determinado cuando no es necesario.\",/*#__PURE__*/_jsx(\"br\",{}),\"- Tener que repetir algo de una manera determinada hasta que est\\xE1 \\\"bien\\\".\",/*#__PURE__*/_jsx(\"br\",{}),\"Las siguientes preguntas se refieren a sus sensaciones de que algo no est\\xE1 \\\"bien\\\" y sus conductas dirigidas a conseguir una sensaci\\xF3n de orden, simetr\\xEDa o equilibrio durante el \\xFAltimo mes. Recuerde que sus experiencias pueden ser ligeramente diferentes a los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\"]})]});};if(checking)return/*#__PURE__*/_jsx(EncuestaLoading,{});if(!encuestaNotExists)return/*#__PURE__*/_jsx(ThanksMessage,{});return/*#__PURE__*/_jsxs(\"div\",{className:\"mainContainer\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Encuesta DOCS\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"h5\",{children:[\"Medico: \",medicoData.name]}),/*#__PURE__*/_jsxs(\"h5\",{children:[\"Paciente: \",pacienteData.name]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Form,{layout:\"vertical\",name:\"docs_enc\"// labelCol={{ span: 24 }}\n// wrapperCol={{ span: 24 }}\n,initialValues:[],onFinish:onFinish,onFinishFailed:onFinishFailed,autoComplete:\"off\",children:[/*#__PURE__*/_jsx(InitialInstr,{}),/*#__PURE__*/_jsx(Divider,{children:\"Categoria 1\"}),/*#__PURE__*/_jsx(Instr1,{}),docs_catalog_1.map((pregunta,i)=>/*#__PURE__*/_jsx(Form.Item,{name:i,label:pregunta.pregunta,rules:[{required:true,message:'Seleccione una respuesta'}],children:/*#__PURE__*/_jsx(Radio.Group,{onChange:e=>handleRespuestaChange(pregunta.n,e.target.value),value:respuestas[pregunta.n],children:pregunta.respuestas.map((respuesta,index)=>/*#__PURE__*/_jsx(Radio,{value:index,children:respuesta},index))})},pregunta.n)),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Divider,{children:\"Categoria 2\"}),/*#__PURE__*/_jsx(Instr2,{}),docs_catalog_2.map((pregunta,ind)=>/*#__PURE__*/_jsx(Form.Item,{name:ind+5,label:pregunta.pregunta,rules:[{required:true,message:'Seleccione una respuesta'}],children:/*#__PURE__*/_jsx(Radio.Group,{onChange:e=>handleRespuestaChange(pregunta.n,e.target.value),value:respuestas[pregunta.n],children:pregunta.respuestas.map((respuesta,index)=>/*#__PURE__*/_jsx(Radio,{value:index,children:respuesta},index))})},pregunta.n)),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Divider,{children:\"Categoria 3\"}),/*#__PURE__*/_jsx(Instr3,{}),docs_catalog_3.map((pregunta,i)=>/*#__PURE__*/_jsx(Form.Item,{name:i+10,label:pregunta.pregunta,rules:[{required:true,message:'Seleccione una respuesta'}],children:/*#__PURE__*/_jsx(Radio.Group,{onChange:e=>handleRespuestaChange(pregunta.n,e.target.value),value:respuestas[pregunta.n],children:pregunta.respuestas.map((respuesta,index)=>/*#__PURE__*/_jsx(Radio,{value:index,children:respuesta},index))})},pregunta.n)),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Divider,{children:\"Categoria 4\"}),/*#__PURE__*/_jsx(Instr4,{}),docs_catalog_4.map((pregunta,i)=>/*#__PURE__*/_jsx(Form.Item,{name:i+15,label:pregunta.pregunta,rules:[{required:true,message:'Seleccione una respuesta'}],children:/*#__PURE__*/_jsx(Radio.Group,{onChange:e=>handleRespuestaChange(pregunta.n,e.target.value),value:respuestas[pregunta.n],children:pregunta.respuestas.map((respuesta,index)=>/*#__PURE__*/_jsx(Radio,{value:index,children:respuesta},index))})},pregunta.n)),/*#__PURE__*/_jsx(Form.Item,{wrapperCol:{offset:8,span:16},children:/*#__PURE__*/_jsx(Button,{form:\"docs_enc\",type:\"primary\",htmlType:\"submit\",children:\"Enviar respuestas\"})})]})]});}","map":{"version":3,"names":["React","useEffect","useState","Button","Divider","Form","Radio","message","Input","EncuestaLoading","ThanksMessage","checkEncuesta","onFinishFailed","sendDataBody","docs_catalog_1","docs_catalog_2","docs_catalog_3","docs_catalog_4","jsx","_jsx","jsxs","_jsxs","DocsEncuesta","_ref","idpaciente","idmedico","token","protocolo","momento","encuestaNotExists","setEncuestaNotExists","checking","setChecking","pacienteData","setPacienteData","medicoData","setMedicoData","init","convertirObjeto","objeto","resultado","clave","categoria","indice","split","Array","fill","parseInt","onFinish","values","console","log","objetoConvertido","respuestas","body","usuario","medico","docs","tipo","uuid","cat","then","rs","success","onDocsFinishFailed","errorInfo","error","onChange","e","info","target","value","setRespuestas","handleRespuestaChange","n","InitialInstr","style","textAlign","children","Instr1","Instr2","Instr3","Instr4","className","name","layout","initialValues","autoComplete","map","pregunta","i","Item","label","rules","required","Group","respuesta","index","ind","wrapperCol","offset","span","form","type","htmlType"],"sources":["C:/Users/Gil/Documents/ReCreaMed/src/escalas/docs/docs.encuesta.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Button, Divider, Form, Radio, message, Input } from \"antd\";\r\nimport { EncuestaLoading, ThanksMessage, checkEncuesta, onFinishFailed } from '../utils'\r\nimport { sendDataBody } from '../../resources'\r\nimport { docs_catalog_1, docs_catalog_2, docs_catalog_3, docs_catalog_4 } from './docs.catalog';\r\n\r\nexport default function DocsEncuesta({ idpaciente, idmedico, token, protocolo, momento }) {\r\n\r\n    const [encuestaNotExists, setEncuestaNotExists] = useState(null)\r\n    const [checking, setChecking] = useState(true)\r\n    const [pacienteData, setPacienteData] = useState({})\r\n    const [medicoData, setMedicoData] = useState({})\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [])\r\n\r\n    function init() {\r\n        checkEncuesta(token, idpaciente, setPacienteData, idmedico, setMedicoData, setEncuestaNotExists, setChecking)\r\n    }\r\n\r\n    function convertirObjeto(objeto) {\r\n        const resultado = {};\r\n\r\n        for (const clave in objeto) {\r\n            const [categoria, indice] = clave.split('-');\r\n            if (!resultado[categoria]) {\r\n                resultado[categoria] = new Array(5).fill(0);\r\n            }\r\n            resultado[categoria][parseInt(indice) - 1] = objeto[clave];\r\n        }\r\n\r\n        return resultado;\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n\r\n        console.log('Values: ', values)\r\n\r\n        const objetoConvertido = convertirObjeto(respuestas);\r\n        console.log('New', objetoConvertido)\r\n\r\n\r\n\r\n        const body = {\r\n            usuario: idpaciente,\r\n            medico: idmedico,\r\n            docs: objetoConvertido,\r\n            tipo: 'docs',\r\n            uuid: token,\r\n            cat: [protocolo, momento]\r\n        }\r\n\r\n        console.log('Body:', body);\r\n        sendDataBody('encuestas/add', body).then((rs) => {\r\n            console.log('add enc resp', rs)\r\n            message.success(rs.message)\r\n        }).then(() => init())\r\n    };\r\n\r\n    const onDocsFinishFailed = (errorInfo) => {\r\n        console.log(errorInfo)\r\n        message.error('Revise el formulario y conteste todas las preguntas')\r\n\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        message.info('radio checked ' + e.target.value);\r\n    };\r\n\r\n    const [respuestas, setRespuestas] = useState({});\r\n\r\n    const handleRespuestaChange = (n, value) => {\r\n        setRespuestas({ ...respuestas, [n]: value });\r\n    };\r\n\r\n    const InitialInstr = () => {\r\n        return <p style={{ textAlign: 'justify' }}>\r\n            En este cuestionario se le pregunta sobre 4 tipos de preocupaciones diferentes que puede que usted esté\r\n            (o no esté) experimentando. Para cada tipo de preocupación, hay una descripción del tipo de\r\n            pensamientos (a veces llamados obsesiones) y conductas (a veces llamadas rituales o compulsiones) que\r\n            son típicas de ese tipo de preocupación en particular, seguida de 5 preguntas sobre sus experiencias en\r\n            relación con estos pensamientos y conductas. Por favor, lea cada descripción detenidamente y responda\r\n            a las preguntas para cada categoría basándose en las experiencias que usted ha tenido durante el\r\n            último mes.\r\n        </p>\r\n    }\r\n\r\n    const Instr1 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones relacionadas con gérmenes y contaminación.</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Pensar o sentir que está contaminado/a porque estuvo en contacto con ciertos objetos o personas o\r\n                estuvo cerca de ellos.  <br />\r\n                - Sentir que está contaminado/a porque estuvo en ciertos lugares (por ejemplo, un cuarto de baño).  <br />\r\n                - Pensar en gérmenes, enfermedades o en la posibilidad de propagar la contaminación.  <br />\r\n                - Lavarse las manos, usar desinfectante de manos, ducharse, cambiarse de ropa o limpiar objetos\r\n                contaminación. <br />\r\n                - Evitar ciertas personas, objetos o lugares debido a la contaminación. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con pensamientos y conductas relacionados con\r\n                la contaminación durante el último mes. Recuerde que sus experiencias pueden ser diferentes de los\r\n                ejemplos mencionados anteriormente. Por favor, rodee con un círculo el número junto a su respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr2 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones relacionadas con causar daño, provocar lesiones o traer mala suerte</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Dudar de si ha cometido un error que podría hacer que sucediera algo horrible o perjudicial. <br />\r\n                - Pensar que pueda haber ocurrido un accidente, desastre o daño físico terrible u otra desgracia y que\r\n                usted no fue lo suficientemente precavido para evitarlo. <br />\r\n                - Pensar que usted podía evitar algún daño o desgracia haciendo las cosas de una determinada\r\n                manera, contando hasta cierto número o evitando determinados números o palabras \"negativos\". <br />\r\n                - Pensar que podía perder algo importante que es poco probable que pierda (por ejemplo, la cartera,\r\n                papeles, documentos personales...). <br />\r\n                - Comprobar cosas como cerraduras, enchufes, la cartera, etc. más de lo necesario. <br />\r\n                - Comprobar repetidamente o preguntar a otras personas para asegurarse de que no ha pasado (o no\r\n                va a pasar) algo malo. <br />\r\n                - Repasar mentalmente cosas del pasado para asegurarse de que no hizo nada malo. <br />\r\n                - Necesitar hacer las cosas en una secuencia determinada para evitar que ocurran cosas dañinas o\r\n                desastres. <br />\r\n                - Necesitar contar hasta cierto número o evitar ciertos números negativos por miedo a que ocurra algo\r\n                malo. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con los pensamientos y conductas relacionados\r\n                con causar daño o desastres durante el último mes. Recuerde que sus experiencias pueden ser\r\n                ligeramente diferentes de los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr3 = () => {\r\n        return <div>\r\n            <p><strong>Pensamientos inaceptables/prohibidos</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br />\r\n                - Tener pensamientos desagradables sobre sexo, cosas inmorales o violencia que le vienen a la mente en\r\n                contra de su voluntad. <br />\r\n                - Pensar que podría hacer algo horrible, indecente o que le avergüence que en realidad usted no quiere\r\n                hacer. <br />\r\n                - Repetir una acción o hacer las cosas en una secuencia determinada debido a un mal pensamiento. <br />\r\n                - Realizar mentalmente alguna acción o rezar para deshacerse de un pensamiento no deseado o\r\n                desagradable. <br />\r\n                - Evitar ciertas personas, lugares o situaciones que le provocan pensamientos no deseados o\r\n                desagradables. <br />\r\n                Las siguientes preguntas se refieren a sus experiencias con pensamientos no deseados que vienen a su\r\n                mente en contra de su voluntad y a comportamientos dirigidos a afrontar este tipo de pensamientos\r\n                durante el último mes. Recuerde que sus experiencias pueden ser ligeramente diferentes de los ejemplos\r\n                mencionados anteriormente. Por favor, seleccione respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n    const Instr4 = () => {\r\n        return <div>\r\n            <p><strong>Preocupaciones sobre simetría y la necesidad de que las cosas estén “bien” o “como tienen que estar\".</strong></p>\r\n            <p style={{ textAlign: 'justify' }}>\r\n                Ejemplos... <br /> \r\n                - Necesitar que las cosas sean/estén simétricas, uniformes, equilibradas o exactas.<br />\r\n                - Sentir que algo no está \"del todo bien\".<br />\r\n                - Repetir algo del día a día hasta que tiene la sensación de que lo ha hecho \"bien\" o\r\n                \"equilibradamente\".<br />\r\n                - Contar cosas absurdas (por ejemplo, azulejos del techo, el número de palabras en una frase, etc.).<br />\r\n                - Poner las cosas en un orden determinado cuando no es necesario.<br />\r\n                - Tener que repetir algo de una manera determinada hasta que está \"bien\".<br />\r\n                Las siguientes preguntas se refieren a sus sensaciones de que algo no está \"bien\" y sus conductas\r\n                dirigidas a conseguir una sensación de orden, simetría o equilibrio durante el último mes. Recuerde que\r\n                sus experiencias pueden ser ligeramente diferentes a los ejemplos mencionados anteriormente. Por favor, seleccione una respuesta.\r\n            </p>\r\n        </div>\r\n    }\r\n\r\n\r\n    if (checking) return <EncuestaLoading />\r\n\r\n    if (!encuestaNotExists) return <ThanksMessage />\r\n    return (\r\n        <div className='mainContainer'>\r\n            <h4>Encuesta DOCS</h4>\r\n            <br />\r\n            <h5>Medico: {medicoData.name}</h5>\r\n            <h5>Paciente: {pacienteData.name}</h5>\r\n            <br />\r\n\r\n            <Form\r\n                layout='vertical'\r\n                name=\"docs_enc\"\r\n                // labelCol={{ span: 24 }}\r\n                // wrapperCol={{ span: 24 }}\r\n                initialValues={[]}\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                autoComplete=\"off\">\r\n\r\n\r\n                <InitialInstr />\r\n                <Divider>Categoria 1</Divider>\r\n                <Instr1 />\r\n                {docs_catalog_1.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 2</Divider>\r\n                <Instr2 />\r\n                {docs_catalog_2.map((pregunta, ind) => (\r\n                    <Form.Item key={pregunta.n} name={ind + 5} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 3</Divider>\r\n                <Instr3 />\r\n                {docs_catalog_3.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i + 10} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n                <br />\r\n                <Divider>Categoria 4</Divider>\r\n                <Instr4/>\r\n                {docs_catalog_4.map((pregunta, i) => (\r\n                    <Form.Item key={pregunta.n} name={i + 15} label={pregunta.pregunta} rules={[{\r\n                        required: true,\r\n                        message: 'Seleccione una respuesta',\r\n                    },\r\n                    ]}>\r\n                        <Radio.Group\r\n                            onChange={(e) => handleRespuestaChange(pregunta.n, e.target.value)}\r\n                            value={respuestas[pregunta.n]}\r\n                        >\r\n                            {pregunta.respuestas.map((respuesta, index) => (\r\n                                <Radio key={index} value={index}>\r\n                                    {respuesta}\r\n                                </Radio>\r\n                            ))}\r\n                        </Radio.Group>\r\n                    </Form.Item>\r\n                ))}\r\n\r\n\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        offset: 8,\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Button form='docs_enc' type=\"primary\" htmlType=\"submit\">\r\n                    Enviar respuestas\r\n                    </Button>\r\n                </Form.Item>\r\n\r\n\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}